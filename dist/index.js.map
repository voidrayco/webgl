{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.js","webpack:///webpack/bootstrap 809f95396e7d34890ecd","webpack:///external \"three\"","webpack:///./src/webgl-surface/primitives/bounds.ts","webpack:///./node_modules/debug/src/browser.js","webpack:///./src/webgl-surface/util/buffer-util.ts","webpack:///./src/webgl-surface/buffers/base-buffer.ts","webpack:///./src/webgl-surface/primitives/line.ts","webpack:///./src/webgl-surface/primitives/point.ts","webpack:///external \"d3-color\"","webpack:///./src/webgl-surface/drawing/texture/atlas-texture.ts","webpack:///./src/webgl-surface/util/frame-info.ts","webpack:///./src/webgl-surface/util/easing.ts","webpack:///./src/webgl-surface/util/interpolation.ts","webpack:///external \"ramda\"","webpack:///./src/webgl-surface/drawing/texture/atlas-manager.ts","webpack:///./src/webgl-surface/util/pack-node.ts","webpack:///./src/webgl-surface/drawing/shape/label.ts","webpack:///./src/webgl-surface/primitives/rotateable-quad.ts","webpack:///./src/webgl-surface/drawing/texture/sprite.ts","webpack:///./src/webgl-surface/util/mouse.ts","webpack:///./src/webgl-surface/util/quad-tree.ts","webpack:///./src/webgl-surface/util/webgl-stat.ts","webpack:///./src/webgl-surface/drawing/shape/curved-line-shape.ts","webpack:///./src/webgl-surface/primitives/curved-line.ts","webpack:///./src/webgl-surface/primitives/circle.ts","webpack:///./src/webgl-surface/drawing/shape/line-shape.ts","webpack:///./src/webgl-surface/util/multi-shape-buffer-cache.ts","webpack:///./src/webgl-surface/util/shape-buffer-cache.ts","webpack:///./src/index.ts","webpack:///./src/webgl-surface/webgl-surface.tsx","webpack:///external \"react\"","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/debug/src/debug.js","webpack:///./node_modules/ms/index.js","webpack:///external \"bowser\"","webpack:///./src/webgl-surface/buffers/index.ts","webpack:///./src/webgl-surface/buffers/animated/shared-control-curved-line-buffer-ants.ts","webpack:///./src/webgl-surface/buffers/animated/shared-control-curved-line-colors-buffer.ts","webpack:///./src/webgl-surface/buffers/static/shared-control-curved-line-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-bezier-line-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-label-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-line-buffer.ts","webpack:///./src/webgl-surface/drawing/index.ts","webpack:///./src/webgl-surface/drawing/reference/reference-color.ts","webpack:///./src/webgl-surface/drawing/animation/animated-curved-line-shape.ts","webpack:///./src/webgl-surface/drawing/shape/circle-shape.ts","webpack:///./src/webgl-surface/drawing/shape/edge-shape.ts","webpack:///./src/webgl-surface/drawing/shape/image-shape.ts","webpack:///./src/webgl-surface/drawing/shape/quad-shape.ts","webpack:///./src/webgl-surface/drawing/texture/atlas-color.ts","webpack:///./src/webgl-surface/primitives/index.ts","webpack:///./src/webgl-surface/util/index.ts","webpack:///./src/webgl-surface/util/animate.ts","webpack:///./src/webgl-surface/util/animated-shape-buffer-cache.ts","webpack:///./src/webgl-surface/util/custom-selection.ts","webpack:///./src/webgl-surface/util/get-font-metrics.ts"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_0__","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_12__","__WEBPACK_EXTERNAL_MODULE_29__","__WEBPACK_EXTERNAL_MODULE_33__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","Bounds","left","right","top","bottom","height","width","x","y","arguments","length","containsPoint","point","copyBounds","b","encapsulate","bounds","encapsulateBounds","sizeToFirst","minX","Number","MAX_VALUE","maxX","minY","maxY","forEach","encapsulatePoint","encapsulatePoints","points","undefined","fits","inner","hitBounds","pointInside","isBounds","isInside","maxBounds","MIN_VALUE","process","useColors","window","type","document","documentElement","style","WebkitAppearance","console","firebug","exception","table","navigator","userAgent","toLowerCase","match","parseInt","RegExp","$1","formatArgs","args","namespace","humanize","diff","color","splice","index","lastC","replace","log","Function","apply","save","namespaces","storage","removeItem","debug","e","load","r","env","DEBUG","chrome","local","localStorage","colors","formatters","j","v","JSON","stringify","err","message","enable","applyAttributeRegisters","attributeBuffers","incrementValues","attrRegister0","attrRegister1","attrRegister2","attrRegister3","attrRegister4","attrRegister5","attrRegister6","attrRegister7","attrRegister8","attrRegister9","attrRegister10","attrIndexIncr0","attrIndexIncr1","attrIndexIncr2","attrIndexIncr3","attrIndexIncr4","attrIndexIncr5","attrIndexIncr6","attrIndexIncr7","attrIndexIncr8","attrIndexIncr9","attrIndexIncr10","updateBuffer1","numBatches","updateAccessor","lastBatchRegister","attrIndex0","updateBuffer2","attrIndex1","updateBuffer3","attrIndex2","updateBuffer4","attrIndex3","updateBuffer5","attrIndex4","updateBuffer6","attrIndex5","updateBuffer7","attrIndex6","updateBuffer8","attrIndex7","updateBuffer9","attrIndex8","updateBuffer10","attrIndex9","updateBuffer11","attrIndex10","applyDefaultsHolders","defaults","defaultsHolder0","defaultsHolder1","defaultsHolder2","defaultsHolder3","fillSize1","buffer","start","fillSize2","fillSize3","fillSize4","three_1","debugGenerator","TriangleOrientation","AttributeSize","isStreamUpdatingRegister","fillMethodLookUp","_a","ONE","TWO","THREE","FOUR","updateBufferLookUp","1","2","3","4","5","6","7","8","9","10","11","BufferUtil","beginUpdates","dispose","buffers","bufferItems","attributes","currentData","geometry","system","endUpdates","totalBatches","examineBuffer","debugNamespace","debugBuffer","enabled","bufferAttributes","map","attr","array","triangles","drawMode","TrianglesDrawMode","currentVertex_1","attrSize_1","currentIndex_1","length_1","drawRange","count","tri","vertex_0","vertex_1","vertex_2","size","slice","push","TriangleStripDrawMode","currentVertex_2","attrSize_2","currentIndex_2","length_2","material","uniforms","flattenMultiBuffers","multiShapeBuffers","all","multiBuffer","getBuffers","concat","updateMultiBuffer","multiShapeBuffer","init","update","forceUpdates","didUpdate","shapeBuffers","bufferLookup","Map","set","needsBuffer","shapes","delete","shift","shapeBuffer","vertexBuffer","vertexBuffers_1","Array","from","values","setDrawRange","makeBuffer","numVertices","iMax","BufferGeometry","totalAttributeSize","attribute","attributeSize","Float32Array","fillMethod","name_1","k","addAttribute","BufferAttribute","warn","updateBuffer","newData","vertexBatch","force","testPerformed","updateMethod","updateRange","offset","needsUpdate","makeBufferItems","buffer_util_1","BaseBuffer","unitCount","__extends","extendStatics","setPrototypeOf","__proto__","__","constructor","create","bounds_1","Line","_super","p1","p2","_this","setPoints","directionTo","vector","perpendicular","distanceTo","Math","abs","getClosest","lines","closestLine","closestDistance","distance","line","dx","dy","slope","magnitude","sqrt","mag","squareDistance","Point","add","out","testPoint","closestPoint","findClosest","getClosestIndex","getDirection","normalize","getDistance","squared","getMidpoint","direction","make","scale","zero","AtlasTexture","path","label","aspectRatio","imagePath","rasterizedLabel","getAttributeCurrentTime","time","FrameInfo","lastFrameTime","floor","Date","now","nextFrameTime","framesPlayed","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","PI","easeOutSine","sin","easeInOutSine","easeInExpo","pow","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","a","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","bezier2","c1","t2","mt","mt2","bezier3","c2","t3","mt3","circular","radiusEasing","direction1","point_1","theta1","atan2","direction2","theta2","dTheta","radius1","radius2","radius","easing_1","InterpolationMethod","pickInterpolation","BEZIER2","BEZIER3","CIRCULAR","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","verb","op","f","TypeError","_","ops","pop","trys","g","sent","throw","return","Symbol","iterator","d3_color_1","pack_node_1","label_1","atlas_texture_1","debugLabels","ZERO_IMAGE","atlasBL","atlasBR","atlasTL","atlasTR","Label","text","pixelHeight","pixelWidth","AtlasManager","atlasImages","atlasMap","atlasTexture","textureWidth","textureHeight","createAtlas","atlasName","images","canvas","_i","images_1","image","texture","_b","PackNode","createElement","getContext","draw","drawColors","Texture","premultiplyAlpha","generateMipmaps","destroyAtlas","destroy","none_1","atlasReferenceID","isValidImage","isValid","setDefaultImage","assign","loadedImage","rect","dimensions","node","insertedNode","ux","uy","uw","uh","atlasDimensions","loadImage","first","second","insert","nodeImage","nodeDimensions","drawImage","error","colorWidth","colorHeight","maxPerRow","rowWidth","rowCount","colCount","renderHeight","renderSpace","startX","startY","nextX","nextY","beginX","beginY","col","row","colors_1","min","ceil","colorIndex","colorsPerRow","firstColor","nextColor","fillStyle","round","opacity","fillRect","Error","getAtlasTexture","Image","onload","onerror","src","labelSize","getSize","ctx","rasterizationOffset","fontSize","rgb","base","font","makeCSSFont","textAlign","textBaseline","toString","fillText","image_1","setSize","toDataURL","child","isLeaf","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","remove","removed","ramda_1","rotateable_quad_1","sprite_1","measurement","Sprite","options","AnchorPosition","TopLeft","depth","fontWeight","maxWidth","id","zoomable","rasterizationPadding","setFontSize","_baseLabel","baseLabel","_rasterizedLabel","copyLabel","omit","setText","getText","position","lbl","baseSize","context","size_1","measureText","RotateableQuad","anchorCalculations","BottomLeft","quad","BottomRight","Custom","Middle","MiddleBottom","MiddleLeft","MiddleRight","MiddleTop","TopRight","location","rotation","anchor","setAnchor","setLocation","setRotation","calculateAnchor","custom","anchorType","getAnchor","getAnchorType","getLocation","getRotation","angle","Vector4","anchorMat","Matrix4","makeTranslation","rotationMat","makeRotationZ","locationMat","transform","multiply","TL","clone","applyMatrix4","TR","BL","BR","w","h","contentScaleX","contentScaleY","scaleX","scaleY","getContentScale","getContentSize","getWidth","getHeight","normalizeFirefoxWheel","wheel","nativeEvent","deltaX","deltaY","sign","lowPassY","MAX_FIREFOX_WHEELDELTA","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","unshift","Vector2","normalizeChromeWheel","normalizeIE11Wheel","wheelDeltaX","IE_ADJUSTMENT","wheelDeltaY","wheelDelta","detail","OLD_IE_ADJUSTMENT","normalizeIE12Wheel","multiplyScalar","eventElementPosition","relative","mouseX","mouseY","eventX","eventY","target","event","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","normalizeWheel","browser","firefox","msie","version","msedge","filterQuery","queryValues","filtered","obj","find","Quadrants","mid","Node","children","childrenProps","nodes","props","doAdd","cover","addAll","allChildren","gatherChildren","split","isNaN","area","list","gatherProps","query","visit","queryBounds","queryPoint","cb","finished","Boolean","QuadTree","getProgramInfo","gl","program","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","blocks","uniform","getActiveUniform","typeName","getActiveAttrib","WebGLStat","printCurrentProgramInfo","surface","info","getParameter","CURRENT_PROGRAM","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","MAX_ATTRIBUTES","WEBGL_SUPPORTED","WebGLRenderingContext","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","curved_line_1","line_1","CurvedLineShape","lineWidth","getTriangleStrip","cachesQuadSegments","cacheSegments","startColor","endColor","cachesSegments","controlPoints","end","resolution","max","cachedQuadSegments","strip","normal","lineStrip","getLineStrip","lineWidthHalf","scaledPoint","temp","previous","current","CurvedLine","bezierDistance","straightLine","closestIndex","circularDistance","straightDistance","makeBezier2Segments","cachedSegments","segments","dt","lineEnd","interpolation_1","makeBezier3Segments","makeCircularCWSegments","circleCenter","midPoint","minRadius","makeCircularCCWSegments","makeStraightSegments","CurveType","pickSegmentMethod","Bezier","CircularCW","CircularCCW","Straight","pickDistanceMethod","distanceMethod","segmentMethod","segmentMethods","numControlPoints","UID","Circle","_id","_radius","_centerX","_centerY","updateBounds","val","boundsInside","r2","dy2","dx2","notSquared","circles","closestCircle","circle","hitCircle","totalDistance","hitPoint","LineShape","g2","b2","a2","thickness","cull","newProperties","getIDProp","item","evenRoundRobinBufferAdd","smallest","found","some","tracker","noop","echoBuffer","shape_buffer_cache_1","multiBufferSelectionPrefix","multiBufferSelectionKeyUID","MultiShapeBufferCache","numBuffers","methods","selectionUID","addMethod","idMethod","initMethod","removeMethod","addShape","shape","store","allBuffers","idToItem","itemToBuffer","flagBuffersDirty","containsId","containsShape","isDirty","generate","selection","getStorage","processDirtyBuffers","getBuffer","getNumBuffers","getShapeById","getSelection","select","removeShape","indexOf","updateShape","ShapeBufferCache","bustCache","buildCache","__export","isAnimatedWithOptions","isAnimated","BaseApplyPropsMethods","React","atlas_manager_1","frame_info_1","mouse_1","quad_tree_1","webgl_stat_1","debugCam","debugColors","BaseAnimatedMethods","BACKGROUND_COLOR","Color","setRGB","Vector3","WebGLSurface","atlasManager","atlasNames","labels","animatedMethodList","animatedMethodBreak","camera","disableMouseInteraction","sizeCamera","currentZoom","destinationX","destinationY","destinationZoom","isPanning","lastMousePosition","propsMethodList","inertia","inertiaBuild","inertiaDecay","inertiaMax","quadTree","shiftIsDown","stop","currentX","currentY","targetZoom","previousZoomToFit","zoomTargetX","zoomTargetY","animating","labelsReady","labelsCurrentLoadedId","labelsLoadId","colorsReady","currentHoverItems","dragOver","animate","requestAnimationFrame","response","doDraw","method","break","updateCameraUniforms","forceDraw","emitViewport","applyProps","renderer","render","scene","el","renderEl","heightHalf","widthHalf","initCamera","Scene","initBuffers","WebGLRenderer","alpha","backgroundColor","antialias","preserveDrawingBuffer","setPixelRatio","devicePixelRatio","setClearColor","setFaceCulling","CullFaceNone","appendChild","domElement","makeDraggable","getElementById","viewSize","viewport","far","near","OrthographicCamera","z","resizeContext","renderSize","zoom","updateProjectionMatrix","tl","screenToWorld","br","updateMatrixWorld","visible","onViewport","projection","handleMouseDown","onMouseDown","handleMouseOut","onMouseOut","handleMouseUp","mouse","world","hitInside","hitItems","hitItems_1","onMouseUp","handleMouseMove","onMouse","xDistance","yDistance","pan","willPan","maxInertia","hitItems_2","onMouseHover","onMouseLeave","applyRef","animatedMethods","baseAnimatedMethods","orderedBaseAnimatedMethods","animatedMethodsBase","CONTEXT","INERTIA","POSITION","positionCamera","ZOOM","destZoom","dZoom","screenZoomTarget","worldToScreen","zoomCamera","newScreenZoomTarget","zoomDX","zoomDY","applyColorBufferChanges","applyLabelBufferChanges","applyPropsMethods","basePropsMethods","orderedBasePropsMethods","applyPropsMethodsBase","INITIALIZE","oldColor","LABELS","textures","COLORS","BUFFERCHANGES","applyBufferChanges","onRender","imageData","CAMERA","appliedViewport","zoomToFitViewH","zoomToFitViewV","zoomToFit","onZoomRequest","componentDidMount","componentWillMount","screenSizeToWorld","bind","worldSizeToScreen","componentWillReceiveProps","componentWillUnmount","element","stage","onmousedown","onmousemove","scrollY","distanceX","distanceY","onmouseup","onmouseover","onselectstart","unproject","project","merge","shouldComponentUpdate","nextProps","onMouseMove","onDoubleClick","ref","Component","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","timeout","len","run","Item","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","selectColor","hash","charCodeAt","createDebug","self","curr","ms","prevTime","prev","coerce","format","formatter","names","skips","substr","disable","test","stack","parse","str","String","exec","parseFloat","fmtShort","fmtLong","plural","long","base_buffer_1","SharedControlCurvedLineBufferAnts","numQuads","Mesh","frustumCulled","controlPointSource","controlUniform","controlReference","colorRef","colorBase","atlas","colorAtlas","colorStart","colorEnd","antLength","antGap","antSpeed","controlPoint","controlRef","halfWidthSize","this_1","shapeBuffer_1","curvedLine","marchingAnts","gapLength","speed","strokeLength","controlLength","positions","ppos","scpos","ecpos","normals","npos","endPoints","epos","halfWidth","wpos","marching","mpos","controlPick","cpos","SharedControlCurvedLineColorsBuffer","colorStartStop","colorEndStop","startTime","duration","endColorStop","startColorStop","currentStart","currentEnd","colorPicks","ctpos","timing","tpos","SharedControlCurvedLineBuffer","SimpleStaticBezierLineBuffer","copos","SimpleStaticLabelBuffer","startFade","endFade","labelMaxSize","maxLabelSize","updated","texCoords","sizes","spos","anchors","apos","SimpleStaticLineBuffer","stripPos","ReferenceColor","curved_line_shape_1","AnimatedCurvedLineShape","easing","_startColorChange","_endColorChange","startStop","endStop","_currentStartColor","_currentEndColor","_startColorStop","startBase","newBase","_endColorStop","endBase","easedTime","circle_1","CircleShape","innerColor","innerR","innerRadius","ringWidth","ringPad","outline","r_1","setOuterColor","setInnerColor","cloneWithData","line_shape_1","EdgeShape","p1Col","p2Col","p1Width","p2Width","bl","tr","endWidth","testx","testy","numberVertices","isClockwise","p1Dx","p2Dx","p1DeltaX","p1DeltaY","p2DeltaX","p2DeltaY","topEdge","bottomEdge","ImageShape","centerOn","QuadShape","AtlasColor","PlayState","Animate","playState","PLAY","propToItem","cancel","container","prop","ease","multi_shape_buffer_cache_1","AnimatedShapeBufferCache","INIT","doAnimate","STOP","boolMapToArray","filter","CustomSelection","cachedSelection","selections","_didSelectionChange","clearAllSelections","keys","key","clearSelection","category","deselect","selectionMap","didSelectionCategoryChange","didSelectionChange","finalizeUpdate","theSelection","toggleSelect","getFontMetrics","bboxHeight","canvasHeight","baseline","flip","drawBaseline","fontFamily","textWidth","offsetx","offsety","cwidth","cheight","getImageData","data","pos","realBottom","restore"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"d3-color\"), require(\"ramda\"), require(\"react\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"d3-color\", \"ramda\", \"react\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"d3-color\"), require(\"ramda\"), require(\"react\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"d3-color\"], root[\"ramda\"], root[\"react\"], root[\"bowser\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_29__, __WEBPACK_EXTERNAL_MODULE_33__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"d3-color\"), require(\"ramda\"), require(\"react\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"d3-color\", \"ramda\", \"react\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"d3-color\"), require(\"ramda\"), require(\"react\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"d3-color\"], root[\"ramda\"], root[\"react\"], root[\"bowser\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_29__, __WEBPACK_EXTERNAL_MODULE_33__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 27);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(left, right, top, bottom) {\n        this.height = 0;\n        this.width = 0;\n        this.x = 0;\n        this.y = 0;\n        if (arguments.length === 4) {\n            this.x = left;\n            this.width = right - left;\n            this.y = top;\n            this.height = top - bottom;\n        }\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        /** The total rectangular surface area of this instance */\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        /** The bottom coordinate for this instance (y + height) */\n        get: function () {\n            return this.y - this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        /** An x, y coordinate pair representing the center of this object */\n        get: function () {\n            return {\n                x: this.x + (this.width / 2),\n                y: this.y - (this.height / 2),\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Check to see if a given point lies within the bounds of this instance\n     *\n     * @param point The point to check\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        if (point.x < this.x) {\n            return false;\n        }\n        if (point.y > this.y) {\n            return false;\n        }\n        if (point.x > this.right) {\n            return false;\n        }\n        if (point.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Copies the properties of the bounds specified\n     *\n     * @param b The bounds whose dimensions we wish to copy\n     */\n    Bounds.prototype.copyBounds = function (b) {\n        this.height = b.height;\n        this.width = b.width;\n        this.x = b.x;\n        this.y = b.y;\n    };\n    /**\n     * Ensure that this object contains the smaller bounds\n     *\n     * This method will not shrink this class, but only grow it as necessary to\n     * fit the destination object\n     *\n     * @param bounds The bounds to encapsulate\n     */\n    Bounds.prototype.encapsulate = function (bounds) {\n        if (bounds.x < this.x) {\n            this.width += this.x - bounds.x;\n            this.x = bounds.x;\n        }\n        if (bounds.y > this.y) {\n            this.height += bounds.y - this.y;\n            this.y = bounds.y;\n        }\n        if (bounds.right > this.right) {\n            this.width = bounds.right - this.x;\n        }\n        if (bounds.bottom < this.bottom) {\n            this.height = this.y - bounds.bottom;\n        }\n    };\n    /**\n     * Ensure that this object contains the provided list of bounds\n     *\n     * This will never shrink or modify the original area covered by this bounds\n     * but will instead stay the same or include the original area plus the specified\n     * list of bounds.\n     *\n     * @param {Bounds<any>[]} bounds The list of bounds objects to encapsulate\n     * @param {boolean} sizeToFirst If this is set, the procedure will start by making this bounds\n     *                              be a clone of the first bounds object in the list\n     */\n    Bounds.prototype.encapsulateBounds = function (bounds, sizeToFirst) {\n        if (sizeToFirst && bounds.length) {\n            this.copyBounds(bounds[0]);\n        }\n        if (bounds.length === 0) {\n            return;\n        }\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        bounds.forEach(function (p) {\n            if (p.x < minX) {\n                minX = p.x;\n            }\n            if (p.right > maxX) {\n                maxX = p.right;\n            }\n            if (p.bottom < minY) {\n                minY = p.bottom;\n            }\n            if (p.y > maxY) {\n                maxY = p.y;\n            }\n        });\n        // Make bounds that encompasses the bounds list, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Grow this class to contain the specified point\n     *\n     * This method will not shrink this instance. It will only grow it as\n     * necessary.\n     *\n     * @param point The point to encapsulate\n     */\n    Bounds.prototype.encapsulatePoint = function (point) {\n        if (point.x < this.x) {\n            this.width += this.x - point.x;\n            this.x = point.x;\n        }\n        if (point.y > this.y) {\n            this.height += point.y - this.y;\n            this.y = point.y;\n        }\n        if (point.x > this.right) {\n            this.width = point.x - this.x;\n        }\n        if (point.y < this.bottom) {\n            this.height = this.y - point.y;\n        }\n    };\n    /**\n     * Efficiently encapsulates a set of points by growing the current dimensions\n     * of the bounds until the points are enclosed. This will perform faster than\n     * running encapsulatePoint for a list of points.\n     *\n     * @param points An array of points that Can be of format {x, y} or [x, y]\n     *\n     * @memberOf Bounds\n     */\n    Bounds.prototype.encapsulatePoints = function (points) {\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        if (points[0] !== undefined && points[0].x) {\n            points.forEach(function (p) {\n                if (p.x < minX) {\n                    minX = p.x;\n                }\n                else if (p.x > maxX) {\n                    maxX = p.x;\n                }\n                if (p.y < minY) {\n                    minY = p.y;\n                }\n                else if (p.y > maxY) {\n                    maxY = p.y;\n                }\n            });\n        }\n        else {\n            points.forEach(function (p) {\n                if (p[0] < minX) {\n                    minX = p[0];\n                }\n                else if (p[0] > maxX) {\n                    maxX = p[0];\n                }\n                if (p[1] < minY) {\n                    minY = p[1];\n                }\n                else if (p[1] > maxY) {\n                    maxY = p[1];\n                }\n            });\n        }\n        // Make bounds that encompasses the points, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Checks to see if another bounds fits in itself.\n     *\n     * @param {Bounds} inner The bounds to test against\n     *\n     * @return {number} int 1 is an exact fit, 2 it fits with space, 0 it doesn't fit\n     */\n    Bounds.prototype.fits = function (inner) {\n        if (this.width === inner.width) {\n            if (this.height === inner.height) {\n                return 1;\n            }\n        }\n        if (this.width >= inner.width) {\n            if (this.height >= inner.height) {\n                return 2;\n            }\n        }\n        return 0;\n    };\n    /**\n     * Check to see if the provided bounds intersects with this instance\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if the other object intersects with this instance\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        if (bounds.right < this.x) {\n            return false;\n        }\n        if (bounds.x > this.right) {\n            return false;\n        }\n        if (bounds.bottom > this.y) {\n            return false;\n        }\n        if (bounds.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Tests if a point is inside this bounds\n     *\n     * @param p The point to test\n     *\n     * @return boolean The point to test\n     */\n    Bounds.prototype.pointInside = function (p) {\n        if (p.x < this.x) {\n            return false;\n        }\n        if (p.y > this.y) {\n            return false;\n        }\n        if (p.x > this.right) {\n            return false;\n        }\n        if (p.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Test function to type check the provided value\n     *\n     * @return True if value is a bounds object\n     */\n    Bounds.isBounds = function (value) {\n        // Falsy values aren't bounds objects\n        if (!value) {\n            return false;\n        }\n        // Direct test for bounds objects\n        if (value instanceof this) {\n            return true;\n        }\n        // Duck-typing check\n        return value &&\n            'containsPoint' in value &&\n            'encapsulate' in value &&\n            'hitTest' in value;\n    };\n    /**\n     * Check if this instance is completely inside the provided bounds\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if this instance is inside the provided bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return (bounds.x <= this.x &&\n            bounds.right >= this.right &&\n            bounds.y >= this.y &&\n            bounds.bottom <= this.bottom);\n    };\n    /**\n     * Generates a Bounds object covering max extents\n     *\n     * @return {Bounds} bounds covering as wide of a range as possible\n     */\n    Bounds.maxBounds = function () {\n        return new Bounds(Number.MIN_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MAX_VALUE);\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(31);\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * This class and set of methods is provided to attempt to create as efficient as possible\n * methods for updating large vertex buffers with values. The first portion of the file is\n * a list of methods and registers. This is to prevent any instantiation needed for the methods\n * and registers to exist. Also, the methods have no useable parent scope to ensure nothing like\n * a 'this' is used. These methods utilize the registers and their own simple loops to pound\n * through large amounts of information while providing capabilities to edit vertices in batches.\n *\n * You will also notice there are many many similar methods with just a single extra parameter\n * here and there. This is to prevent ANY calculations on trying to determine a proper parameter set\n * while also making method calls directly without any .call or .apply.\n *\n * The number of update methods is how many differing attributes are supported. If you need more supported\n * attributes add an updateBufferN method and provide the required attributes. Insert the logic in the EXACT\n * pattern seen in the other methods. DO NOT attempt to add additional logic lest the performance be something\n * terrible.\n *\n * The BufferUtil class makes use of these methods and registers. It also provides some very handy methods\n * for working with your large buffers.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar debugGenerator = __webpack_require__(2);\nvar debug = __webpack_require__(2)('WebGLSurface:BufferUtil');\nvar TriangleOrientation;\n(function (TriangleOrientation) {\n    // The triangles points are clockwise\n    TriangleOrientation[TriangleOrientation[\"CW\"] = 0] = \"CW\";\n    // The triangles points are Counter clockwise\n    TriangleOrientation[TriangleOrientation[\"CCW\"] = 1] = \"CCW\";\n    // The triangles points are linear, thus degenerate\n    TriangleOrientation[TriangleOrientation[\"DEGENERATE\"] = 2] = \"DEGENERATE\";\n})(TriangleOrientation = exports.TriangleOrientation || (exports.TriangleOrientation = {}));\nvar AttributeSize;\n(function (AttributeSize) {\n    AttributeSize[AttributeSize[\"ONE\"] = 0] = \"ONE\";\n    AttributeSize[AttributeSize[\"TWO\"] = 1] = \"TWO\";\n    AttributeSize[AttributeSize[\"THREE\"] = 2] = \"THREE\";\n    AttributeSize[AttributeSize[\"FOUR\"] = 3] = \"FOUR\";\n})(AttributeSize = exports.AttributeSize || (exports.AttributeSize = {}));\n/**\n * These are for fast look ups of the default values provided\n * Doing this fashion avoids array look ups in the defaults values\n */\nvar defaultsHolder0 = 0;\nvar defaultsHolder1 = 0;\nvar defaultsHolder2 = 0;\nvar defaultsHolder3 = 0;\n/**\n * These are for fast look ups of attribute buffers that are going\n * through the update process. We do everything to mitigate array look ups\n * when and where we can\n */\nvar attrRegister0 = [];\nvar attrRegister1 = [];\nvar attrRegister2 = [];\nvar attrRegister3 = [];\nvar attrRegister4 = [];\nvar attrRegister5 = [];\nvar attrRegister6 = [];\nvar attrRegister7 = [];\nvar attrRegister8 = [];\nvar attrRegister9 = [];\nvar attrRegister10 = [];\nvar attrIndex0 = 0;\nvar attrIndex1 = 0;\nvar attrIndex2 = 0;\nvar attrIndex3 = 0;\nvar attrIndex4 = 0;\nvar attrIndex5 = 0;\nvar attrIndex6 = 0;\nvar attrIndex7 = 0;\nvar attrIndex8 = 0;\nvar attrIndex9 = 0;\nvar attrIndex10 = 0;\nvar attrIndexIncr0 = 0;\nvar attrIndexIncr1 = 0;\nvar attrIndexIncr2 = 0;\nvar attrIndexIncr3 = 0;\nvar attrIndexIncr4 = 0;\nvar attrIndexIncr5 = 0;\nvar attrIndexIncr6 = 0;\nvar attrIndexIncr7 = 0;\nvar attrIndexIncr8 = 0;\nvar attrIndexIncr9 = 0;\nvar attrIndexIncr10 = 0;\n/** This is used to define a starting batch location to aid in continuing batch updates */\nvar lastBatchRegister = 0;\nvar isStreamUpdatingRegister = false;\n/**\n * This takes our list of attribute buffers and applies them to the registers for rapid lookups\n *\n * @param {number[][]} attributeBuffers The buffers for each attribute to be updated\n * @param {number[]} incrementValues How much each batch increments it's lookup index\n */\nfunction applyAttributeRegisters(attributeBuffers, incrementValues) {\n    attrRegister0 = attributeBuffers[0];\n    attrRegister1 = attributeBuffers[1];\n    attrRegister2 = attributeBuffers[2];\n    attrRegister3 = attributeBuffers[3];\n    attrRegister4 = attributeBuffers[4];\n    attrRegister5 = attributeBuffers[5];\n    attrRegister6 = attributeBuffers[6];\n    attrRegister7 = attributeBuffers[7];\n    attrRegister8 = attributeBuffers[8];\n    attrRegister9 = attributeBuffers[9];\n    attrRegister10 = attributeBuffers[10];\n    attrIndexIncr0 = incrementValues[0];\n    attrIndexIncr1 = incrementValues[1];\n    attrIndexIncr2 = incrementValues[2];\n    attrIndexIncr3 = incrementValues[3];\n    attrIndexIncr4 = incrementValues[4];\n    attrIndexIncr5 = incrementValues[5];\n    attrIndexIncr6 = incrementValues[6];\n    attrIndexIncr7 = incrementValues[7];\n    attrIndexIncr8 = incrementValues[8];\n    attrIndexIncr9 = incrementValues[9];\n    attrIndexIncr10 = incrementValues[10];\n}\n/**\n * The following methods are targetted at executing the update accessor with varying number\n * of parameters while mitigating array look ups.\n *\n * @param {number} numBatches The number of batches to execute\n * @param {Function} updateAccessor The accessor function that will update the buffer values\n */\nfunction updateBuffer1(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0);\n    }\n}\nfunction updateBuffer2(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1);\n    }\n}\nfunction updateBuffer3(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2);\n    }\n}\nfunction updateBuffer4(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3);\n    }\n}\nfunction updateBuffer5(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4);\n    }\n}\nfunction updateBuffer6(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5);\n    }\n}\nfunction updateBuffer7(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6);\n    }\n}\nfunction updateBuffer8(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7);\n    }\n}\nfunction updateBuffer9(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8);\n    }\n}\nfunction updateBuffer10(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        attrIndex9 = i * attrIndexIncr9;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8, attrRegister9, attrIndex9);\n    }\n}\nfunction updateBuffer11(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        attrIndex9 = i * attrIndexIncr9;\n        attrIndex10 = i * attrIndexIncr10;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8, attrRegister9, attrIndex9, attrRegister10, attrIndex10);\n    }\n}\n/**\n * This takes the defaults array provided and loads them into our default\n * lookup values\n *\n * @param {number[]} defaults The array with the default values in them for our buffer attribute\n */\nfunction applyDefaultsHolders(defaults) {\n    defaultsHolder0 = defaults[0] || 0;\n    defaultsHolder1 = defaults[1] || 0;\n    defaultsHolder2 = defaults[2] || 0;\n    defaultsHolder3 = defaults[3] || 0;\n}\n/**\n * The following methods are rapid ways of populating the buffer without\n * setting up a generic loop. This saves on performance by not creating a loop\n * nor allocating the variables necessary for the generic loop.\n *\n * @param {Float32Array} buffer The buffer to populate\n * @param {number} start The index the data should be populated into\n */\nfunction fillSize1(buffer, start) {\n    buffer[start] = defaultsHolder0;\n}\nfunction fillSize2(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n}\nfunction fillSize3(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n}\nfunction fillSize4(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n    buffer[++start] = defaultsHolder3;\n}\n/**\n * This is a quick lookup to find the correct filler method for the given attribute size\n */\nvar fillMethodLookUp = (_a = {},\n    _a[AttributeSize.ONE] = fillSize1,\n    _a[AttributeSize.TWO] = fillSize2,\n    _a[AttributeSize.THREE] = fillSize3,\n    _a[AttributeSize.FOUR] = fillSize4,\n    _a);\nvar updateBufferLookUp = {\n    1: updateBuffer1,\n    2: updateBuffer2,\n    3: updateBuffer3,\n    4: updateBuffer4,\n    5: updateBuffer5,\n    6: updateBuffer6,\n    7: updateBuffer7,\n    8: updateBuffer8,\n    9: updateBuffer9,\n    10: updateBuffer10,\n    11: updateBuffer11,\n};\n/**\n * This provides methods for handling common buffer tasks such as construction\n * and population.\n */\nvar BufferUtil = (function () {\n    function BufferUtil() {\n    }\n    /**\n     * This places our updateBuffer into a mode where the updates start at index 0 of the\n     * buffer. Subsequent calls will start where the previous call left off. This lets\n     * you stream in updates to the buffer rather than just update the entire buffer\n     * all at once.\n     */\n    BufferUtil.beginUpdates = function () {\n        isStreamUpdatingRegister = true;\n        lastBatchRegister = 0;\n    };\n    /**\n     * This takes the buffer items and cleans up their use within memory as best as possible.\n     *\n     * @param bufferItems\n     */\n    BufferUtil.dispose = function (buffers) {\n        if (buffers) {\n            buffers.forEach(function (bufferItems) {\n                bufferItems.attributes = null;\n                bufferItems.currentData = null;\n                bufferItems.geometry.dispose();\n                bufferItems.geometry = null;\n                bufferItems.system = null;\n            });\n        }\n    };\n    /**\n     * This stops updates streaming into the buffers and makes it where an update\n     * will always just start at the beginning of the buffer.\n     */\n    BufferUtil.endUpdates = function () {\n        var totalBatches = lastBatchRegister;\n        isStreamUpdatingRegister = false;\n        lastBatchRegister = 0;\n        return totalBatches;\n    };\n    /**\n     * It is often needed to examine a given buffer and see how the triangles are packed in.\n     * This is a common debugging need and will speed up debugging significantly.\n     *\n     * @param {IBufferItems<T, U>} bufferItems This is the buffer whose structure we want\n     *                                         to examine.\n     */\n    BufferUtil.examineBuffer = function (bufferItems, message, debugNamespace) {\n        // Get the appropriate debug namespace\n        var debugBuffer = debugGenerator(debugNamespace);\n        // Quick quit if the debugger is not enabled\n        if (!debugBuffer.enabled) {\n            return;\n        }\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // Get the attributes by name out of the three js buffer\n        var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n        // Get the raw number buffers\n        var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n        // This will store all of the examined triangles for easy viewing\n        var triangles = [];\n        if (bufferItems.system.drawMode === three_1.TrianglesDrawMode) {\n            var currentVertex_1 = 0;\n            var attrSize_1 = 0;\n            var currentIndex_1 = 0;\n            var length_1 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_1 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_2 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_1 = attr.size + 1;\n                        currentIndex_1 = currentVertex_1 * attrSize_1;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_1, currentIndex_1 + attrSize_1);\n                    });\n                    // Move to the next vertex\n                    currentVertex_1++;\n                };\n                // Each new triangle is a culmination of three vertices which are packed in\n                // The buffer with no vertex sharing\n                for (var i = 0; i < 3; ++i) {\n                    _loop_2(i);\n                }\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_1 < length_1) {\n                _loop_1();\n            }\n        }\n        else if (bufferItems.system.drawMode === three_1.TriangleStripDrawMode) {\n            var currentVertex_2 = 0;\n            var attrSize_2 = 0;\n            var currentIndex_2 = 0;\n            var length_2 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_3 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_4 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_2 = attr.size + 1;\n                        currentIndex_2 = currentVertex_2 * attrSize_2;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_2, currentIndex_2 + attrSize_2);\n                    });\n                    // Move to the next vertex\n                    currentVertex_2++;\n                };\n                // Each new triangle is three vertices, where the first two are shared with\n                // The previous triangle's last two vertices\n                for (var i = 0; i < 3; ++i) {\n                    _loop_4(i);\n                }\n                // Go back two vertices as the next tri will use them + the next vertex to\n                // Make the next triangle\n                currentVertex_2 -= 2;\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_2 < length_2) {\n                _loop_3();\n            }\n        }\n        // Log the debug info to the console using the debug utility\n        debugBuffer(message, {\n            drawRange: buffer.drawRange,\n            triangles: triangles,\n        }, bufferItems.system.material.uniforms);\n    };\n    /**\n     * Aids in taking in multiple multibuffers and flattening it to a single list\n     *\n     * @param multiShapeBuffers\n     */\n    BufferUtil.flattenMultiBuffers = function (multiShapeBuffers) {\n        var all = [];\n        multiShapeBuffers.forEach(function (multiBuffer) {\n            multiBuffer.getBuffers().forEach(function (buffer) { return all = all.concat(buffer); });\n        });\n        return all;\n    };\n    /**\n     * @static\n     * This helps aid in updating a complex multi buffer. It will establish when a new\n     * buffer needs to be created and initialized and it will automatically call a BaseBuffer's\n     * update when an update is detected as a need for the buffer.\n     *\n     * @param multiShapeBuffer\n     * @param buffers\n     * @param init\n     *\n     * @return {boolean} True if a buffer was updated\n     */\n    BufferUtil.updateMultiBuffer = function (multiShapeBuffer, buffers, init, update, forceUpdates) {\n        // This flag indicates whether an update occurred or not\n        var didUpdate = false;\n        // Get the shape buffers we need rendered into vertex buffers\n        var shapeBuffers = multiShapeBuffer.getBuffers();\n        // Make a lookup to identify the buffers that already exists for the given multi shape buffers\n        var bufferLookup = new Map();\n        buffers.forEach(function (buffer) { return bufferLookup.set(buffer.bufferItems.currentData, buffer); });\n        // This will store all of the shape buffers that needs to be rendered into a vertex buffer\n        var needsBuffer = [];\n        // If we're forcing updates then we should be ensuring all shapeBuffers needs a buffer\n        // And leave all of the bufferLookup so they will all be updated with the provided needed shape buffer updates\n        if (forceUpdates) {\n            needsBuffer = [].concat(shapeBuffers);\n        }\n        else {\n            shapeBuffers.forEach(function (shapes) {\n                if (bufferLookup.get(shapes)) {\n                    bufferLookup.delete(shapes);\n                }\n                else {\n                    needsBuffer.push(shapes);\n                }\n            });\n        }\n        // All buffers remaining in the buffer lookup are available for re-rendering the\n        // Shape buffers that still needs updates\n        // If the shape buffers needing updates is greater than the vertex buffers available\n        // Then we update with what we have and initialize any additional vertex buffers needed\n        if (needsBuffer.length >= bufferLookup.size) {\n            // Take any buffer that is not found with an existing shape buffer and update it\n            // With a buffer that needs an update\n            bufferLookup.forEach(function (value) {\n                didUpdate = update(value, needsBuffer.shift()) || didUpdate;\n            });\n            // Any remaining buffers that need updates will have to initialize a buffer\n            // To cram it in\n            needsBuffer.forEach(function (shapeBuffer) {\n                var vertexBuffer = init();\n                buffers.push(vertexBuffer);\n                didUpdate = update(vertexBuffer, shapeBuffer) || didUpdate;\n            });\n        }\n        else {\n            var vertexBuffers_1 = Array.from(bufferLookup.values());\n            needsBuffer.forEach(function (shapeBuffer) {\n                var vertexBuffer = vertexBuffers_1.shift();\n                didUpdate = update(vertexBuffer, shapeBuffer) || didUpdate;\n            });\n            vertexBuffers_1.forEach(function (buffer) {\n                buffer.bufferItems.geometry.setDrawRange(0, 0);\n            });\n        }\n        return didUpdate;\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with constructing a new buffer\n     * such as applying the name, generating the buffer, and populating default values to\n     * that buffer.\n     *\n     * @param {number} numVertices The number of vertices this buffer will have\n     * @param {IAttributeInfo[]} attributes A description of each attribute in the buffer\n     *\n     * @returns {BufferGeometry} The newly made buffer\n     */\n    BufferUtil.makeBuffer = function (numVertices, attributes) {\n        var iMax = attributes.length;\n        var geometry = new three_1.BufferGeometry();\n        var totalAttributeSize = 0;\n        for (var i = 0; i < iMax; ++i) {\n            var attribute = attributes[i];\n            var attributeSize = attribute.size + 1;\n            totalAttributeSize += attributeSize;\n            var buffer = new Float32Array(attributeSize * numVertices);\n            var fillMethod = fillMethodLookUp[attribute.size];\n            var name_1 = attribute.name;\n            // We set up our default value registers before executing the fill method\n            applyDefaultsHolders(attribute.defaults);\n            // Fill our buffer with the indicated default values\n            for (var k = 0; k < numVertices; ++k) {\n                fillMethod(buffer, k * attributeSize);\n            }\n            // Apply the buffer to our geometry buffer\n            geometry.addAttribute(name_1, new three_1.BufferAttribute(buffer, attributeSize));\n            debug('Made Buffer Attribute:', name_1, attributeSize);\n        }\n        if (totalAttributeSize > 16) {\n            console.warn('A Buffer has specified more attributes than available. The max is 16 and the buffer provided:', totalAttributeSize);\n        }\n        return geometry;\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with updating a buffer. You specify how many vertices\n     * to update in a batch and you specify how many batches are present.\n     *\n     * Batches are used to represent your full shape object that is being loaded from the cpu:\n     *\n     * IE- you have a rectangle object you wish to update in your buffer. This takes around 6 vertices typically\n     * so you make your vertexBatch 6 and the numBatches the number of quads you need to update in the buffer.\n     *\n     * You then provide an accessor which aids in pointing to the buffer items that need updating. The accessor has\n     * variable arguments depending on the attributes you inject in.\n     *\n     * If you have attributes like:\n     * [\n     *  {name: position, size: AttributeSize.Three},\n     *  {name: color, size: AttributeSize.Four},\n     * ]\n     *\n     * Then your accessor will be delievered arguments in this form:\n     *\n     * function(batchIndex: number, positionBuffer: number[], positionIndex: number, colorBuffer: number[], colorIndex: number)\n     *\n     * NOTE: The params handed in ARE ORDERED BY the attributes injected in\n     *\n     * You then can update the buffers based on the index information handed alongside each buffer\n     *\n     * @param {T[]} newData The new data that is going to be injected into the buffer. This must be a NEW REFERENCE of data\n     *                      that does NOT match the reference in the bufferItems.currentData. So newData !== bufferItems.currentData\n     *                      in order for the update to occur.\n     * @param {BufferGeometry} bufferItems The buffer related items used to identify how to update the buffer\n     * @param {number} vertexBatch The number of vertices to include per update batch\n     * @param {number} numBatches The number of batches to execute\n     * @param {Function} updateAccessor The accessor for performing the data update to the buffer\n     * @param {boolean} force This bypasses the typical checks that determines if the buffer SHOULD update.\n     *\n     * @return {boolean} True if the buffer was updated with this call\n     */\n    BufferUtil.updateBuffer = function (newData, bufferItems, vertexBatch, numBatches, updateAccessor, force) {\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // If we passed the data check on the first pass, then all future streamed updates\n        // Should pass as well\n        var testPerformed = lastBatchRegister !== 0 && isStreamUpdatingRegister;\n        // We check if there is a reference change in the data indicating a buffer push needs to happen\n        if ((newData !== undefined && newData !== bufferItems.currentData) || testPerformed || force) {\n            // If we aren't streaming updates, then we always start at the beginning\n            if (!isStreamUpdatingRegister) {\n                // Reset out last batch register as this is an entriely new update\n                lastBatchRegister = 0;\n            }\n            // Flag the newly rendered data as our current data\n            bufferItems.currentData = newData;\n            // Get the attributes by name out of the three js buffer\n            var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n            // Get the raw number buffers\n            var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n            // Determine what kind of buffer pointer increments we will need\n            var incrementValues = attributes.map(function (attr) { return (attr.size + 1) * vertexBatch; });\n            // Apply all data needed to any registers we need\n            applyAttributeRegisters(attributeBuffers, incrementValues);\n            // Get the method that will perform the update based on number of attributes\n            var updateMethod = updateBufferLookUp[attributes.length];\n            // Execute the update method\n            updateMethod(numBatches + lastBatchRegister, updateAccessor);\n            // Flag each buffer attribute for needing an update\n            bufferAttributes.forEach(function (attr) {\n                if (attr.updateRange) {\n                    attr.updateRange.offset = 0;\n                    attr.updateRange.count = vertexBatch * numBatches;\n                }\n                attr.needsUpdate = true;\n            });\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n            return true;\n        }\n        else {\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n        }\n        return false;\n    };\n    /**\n     * This makes all of the typical items used in creating and managing a buffer of items rendered to the screen\n     *\n     * @returns {IBufferItems<T>} An empty object of the particular buffer items needed\n     */\n    BufferUtil.makeBufferItems = function () {\n        return {\n            attributes: [],\n            currentData: [],\n            geometry: null,\n            system: null,\n        };\n    };\n    return BufferUtil;\n}());\nexports.BufferUtil = BufferUtil;\nvar _a;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar buffer_util_1 = __webpack_require__(3);\n/**\n * This deinfes the minimal set of methods that should be implemented to create\n * a reusable buffer object that can be initialized and populated.\n */\nvar BaseBuffer = (function () {\n    function BaseBuffer() {\n    }\n    /**\n     * This disposes the resources associated with a buffer.\n     */\n    BaseBuffer.prototype.dispose = function () {\n        if (this.bufferItems) {\n            buffer_util_1.BufferUtil.dispose([this.bufferItems]);\n        }\n    };\n    /**\n     * This initializes the buffer and generates the buffer items object.\n     */\n    BaseBuffer.prototype.init = function (material, unitCount) {\n        // To be implemented by a subclass\n    };\n    /**\n     * This updates the buffer by providing the shape buffer needed to update\n     * the internal buffer items\n     *\n     * @param {T[]} shapeBuffer The shape buffer containing all of the shape data\n     *                          to be placed into the buffer.\n     *\n     * @return {boolean} Retrusn true if this pushed up any updates\n     */\n    BaseBuffer.prototype.update = function (shapeBuffer) {\n        // To be implemented by a subclass\n        return false;\n    };\n    return BaseBuffer;\n}());\nexports.BaseBuffer = BaseBuffer;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n/**\n * Represents a line with a given slope\n */\nvar Line = (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates a new line that passes through the two specified points\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    function Line(p1, p2) {\n        var _this = _super.call(this, 0, 1, 1, 0) || this;\n        _this.setPoints(p1, p2);\n        return _this;\n    }\n    /**\n     * This calculates the distance to a point from the provided line\n     * BUT this ALSO retains the directionality of that distance. So one side of\n     * the line will be positive while the other negative\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.directionTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line, but we won't take the absolute to retain the direction\n        return this.perpendicular.x * vector.x + this.perpendicular.y * vector.y;\n    };\n    /**\n     * This calculates the distance to a point from the provided line\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.distanceTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line\n        return Math.abs(this.perpendicular.x * vector.x +\n            this.perpendicular.y * vector.y);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {Array} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    Line.getClosest = function (lines, p) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(p);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This sets the two endpoints for this line and recalculates the bounds\n     * of the line accordingly\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    Line.prototype.setPoints = function (p1, p2) {\n        this.x = p1.x - 1;\n        this.y = p1.y - 1;\n        this.width = 2;\n        this.height = 2;\n        this.encapsulatePoint(p2);\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        this.slope = dy / dx;\n        this.p1 = p1;\n        this.p2 = p2;\n        this.magnitude = Math.sqrt(dx * dx + dy * dy);\n        this.perpendicular = {\n            x: this.p2.y - this.p1.y,\n            y: -(this.p2.x - this.p1.x),\n        };\n        // Normalize the perpendicular line\n        var mag = Math.sqrt(this.perpendicular.x * this.perpendicular.x +\n            this.perpendicular.y * this.perpendicular.y);\n        this.perpendicular.x /= mag;\n        this.perpendicular.y /= mag;\n    };\n    return Line;\n}(bounds_1.Bounds));\nexports.Line = Line;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} p1 The start of the direction\n     * @param {IPoint} p2 The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.getDirection = function (p1, p2, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.getDirection(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar AtlasTexture = (function () {\n    /**\n     * Generates a new atlas texture that points to a specific image resource.\n     *\n     * @param path The path to the image resource to be loaded into the atlas.\n     */\n    function AtlasTexture(path, label) {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        this.imagePath = path;\n        this.label = label;\n        // Let the label keep track of it's rasterization\n        if (label) {\n            this.label.rasterizedLabel = this;\n        }\n    }\n    return AtlasTexture;\n}());\nexports.AtlasTexture = AtlasTexture;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FrameInfo = (function () {\n    function FrameInfo() {\n    }\n    /** Contains the time the previous frame started */\n    FrameInfo.lastFrameTime = Date.now();\n    /** Contains a theoretical approximation the next frame will start */\n    FrameInfo.nextFrameTime = Date.now();\n    /** Contains how many frames have been played for a given WebGLSurface context */\n    FrameInfo.framesPlayed = new Map();\n    return FrameInfo;\n}());\nexports.FrameInfo = FrameInfo;\n/**\n * This gets an integer time value that can fit within an attribute. Be aware,\n * this only supports up to 7 digits of the millisecond time.\n */\nfunction getAttributeCurrentTime() {\n    var time = FrameInfo.lastFrameTime / 1E7;\n    return Math.floor((time - Math.floor(time)) * 1E7);\n}\nexports.getAttributeCurrentTime = getAttributeCurrentTime;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Does a linear easing of a value\n *\n * @param {number} t The time elapsed: 0 to d\n * @param {number} s The start value\n * @param {number} c The change in value\n * @param {number} d The duration of the change\n *\n * @returns A number linearly progressing from s to s+c depending on the value of\n *          t in relation to d\n */\nfunction linear(t, s, c, d) {\n    return c * t / d + s;\n}\nexports.linear = linear;\nfunction easeInQuad(t, b, c, d) {\n    return c * (t /= d) * t + b;\n}\nexports.easeInQuad = easeInQuad;\nfunction easeOutQuad(t, b, c, d) {\n    return -c * (t /= d) * (t - 2) + b;\n}\nexports.easeOutQuad = easeOutQuad;\nfunction easeInOutQuad(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t + b;\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\n}\nexports.easeInOutQuad = easeInOutQuad;\nfunction easeInCubic(t, b, c, d) {\n    return c * (t /= d) * t * t + b;\n}\nexports.easeInCubic = easeInCubic;\nfunction easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n}\nexports.easeOutCubic = easeOutCubic;\nfunction easeInOutCubic(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n}\nexports.easeInOutCubic = easeInOutCubic;\nfunction easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n}\nexports.easeInQuart = easeInQuart;\nfunction easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n}\nexports.easeOutQuart = easeOutQuart;\nfunction easeInOutQuart(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t + b;\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n}\nexports.easeInOutQuart = easeInOutQuart;\nfunction easeInQuint(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n}\nexports.easeInQuint = easeInQuint;\nfunction easeOutQuint(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n}\nexports.easeOutQuint = easeOutQuint;\nfunction easeInOutQuint(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n}\nexports.easeInOutQuint = easeInOutQuint;\nfunction easeInSine(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n}\nexports.easeInSine = easeInSine;\nfunction easeOutSine(t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n}\nexports.easeOutSine = easeOutSine;\nfunction easeInOutSine(t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n}\nexports.easeInOutSine = easeInOutSine;\nfunction easeInExpo(t, b, c, d) {\n    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nexports.easeInExpo = easeInExpo;\nfunction easeOutExpo(t, b, c, d) {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nexports.easeOutExpo = easeOutExpo;\nfunction easeInOutExpo(t, b, c, d) {\n    if (t === 0)\n        return b;\n    if (t === d)\n        return b + c;\n    if ((t /= d / 2) < 1)\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n}\nexports.easeInOutExpo = easeInOutExpo;\nfunction easeInCirc(t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n}\nexports.easeInCirc = easeInCirc;\nfunction easeOutCirc(t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n}\nexports.easeOutCirc = easeOutCirc;\nfunction easeInOutCirc(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n}\nexports.easeInOutCirc = easeInOutCirc;\nfunction easeInElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n}\nexports.easeInElastic = easeInElastic;\nfunction easeOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n}\nexports.easeOutElastic = easeOutElastic;\nfunction easeInOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return b + c;\n    if (!p)\n        p = d * (.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    if (t < 1)\n        return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n}\nexports.easeInOutElastic = easeInOutElastic;\nfunction easeInBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n}\nexports.easeInBack = easeInBack;\nfunction easeOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n}\nexports.easeOutBack = easeOutBack;\nfunction easeInOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    if ((t /= d / 2) < 1)\n        return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n}\nexports.easeInOutBack = easeInOutBack;\nfunction easeInBounce(t, b, c, d) {\n    return c - easeOutBounce(d - t, 0, c, d) + b;\n}\nexports.easeInBounce = easeInBounce;\nfunction easeOutBounce(t, b, c, d) {\n    if ((t /= d) < (1 / 2.75)) {\n        return c * (7.5625 * t * t) + b;\n    }\n    else if (t < (2 / 2.75)) {\n        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\n    }\n    else if (t < (2.5 / 2.75)) {\n        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\n    }\n    else {\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\n    }\n}\nexports.easeOutBounce = easeOutBounce;\nfunction easeInOutBounce(t, b, c, d) {\n    if (t < d / 2)\n        return easeInBounce(t * 2, 0, c, d) * .5 + b;\n    return easeOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b;\n}\nexports.easeInOutBounce = easeInOutBounce;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar point_1 = __webpack_require__(6);\nvar easing_1 = __webpack_require__(10);\n/**\n * This enum is just a common way to define interpolation types\n */\nvar InterpolationMethod;\n(function (InterpolationMethod) {\n    InterpolationMethod[InterpolationMethod[\"BEZIER2\"] = 0] = \"BEZIER2\";\n    InterpolationMethod[InterpolationMethod[\"BEZIER3\"] = 1] = \"BEZIER3\";\n    InterpolationMethod[InterpolationMethod[\"CIRCULAR\"] = 2] = \"CIRCULAR\";\n})(InterpolationMethod = exports.InterpolationMethod || (exports.InterpolationMethod = {}));\n/**\n * This calculates a quadratic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier2(t, p1, p2, c1) {\n    var t2 = t * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    return {\n        x: p1.x * mt2 + c1.x * 2 * mt * t + p2.x * t2,\n        y: p1.y * mt2 + c1.y * 2 * mt * t + p2.y * t2,\n    };\n}\nexports.bezier2 = bezier2;\n/**\n * This calculates a cubic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The first control point of the curve\n * @param {IPoint} c2 The second control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier3(t, p1, p2, c1, c2) {\n    var t2 = t * t;\n    var t3 = t2 * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    var mt3 = mt2 * mt;\n    return {\n        x: p1.x * mt3 + 3 * c1.x * mt2 * t + 3 * c2.x * mt * t2 + p2.x * t3,\n        y: p1.y * mt3 + 3 * c1.y * mt2 * t + 3 * c2.y * mt * t2 + p2.y * t3,\n    };\n}\nexports.bezier3 = bezier3;\n/**\n * This calculates a point along a path defined as a circular path which is a\n * path moving along the edge of a circle from one point to the next. This will\n * even allow for moving along a circle with a growing radius.\n *\n * @param {number} t The 0 - 1 time interval for the part of the path we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point, or more importantly, the center of the circle\n * @param {EasingMethod} radiusEasing Default easing for the radius growing is linear.\n *                                    Insert a custom easing method to change this.\n *\n * @returns {IPoint}\n */\nfunction circular(t, p1, p2, c1, radiusEasing) {\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(c1, p1);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(c1, p2);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Ensure our theta's are definitely between 0 to Math.PI * 2 after the atan\n    // Calculation\n    if (theta1 < 0)\n        theta1 += Math.PI * 2;\n    if (theta2 < 0)\n        theta2 += Math.PI * 2;\n    var dTheta = theta2 - theta1;\n    // We ALWAYS want our path to be the shortest around the circle\n    if (dTheta > Math.PI) {\n        dTheta = theta1 - theta2;\n    }\n    // We use this to calculate how far we are between the two points in radians\n    // Based on the time parameter provided for the interpolation\n    dTheta *= t;\n    // We must have the radial distance of both points to properly calculate\n    // An easing between the two radii\n    var radius1 = point_1.Point.getDistance(p1, c1);\n    var radius2 = point_1.Point.getDistance(p2, c1);\n    // We control how the radius eases out for the path, which is determined by\n    // The easing method, otherwise, it just linearly radiates out\n    var radius = (radiusEasing || easing_1.linear)(t, radius1, radius2 - radius1, 1.0);\n    return {\n        x: Math.cos(theta1 + dTheta) * radius + c1.x,\n        y: Math.sin(theta1 + dTheta) * radius + c1.y,\n    };\n}\nexports.circular = circular;\nexports.pickInterpolation = (_a = {},\n    _a[InterpolationMethod.BEZIER2] = bezier2,\n    _a[InterpolationMethod.BEZIER3] = bezier3,\n    _a[InterpolationMethod.CIRCULAR] = circular,\n    _a);\nvar _a;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = __webpack_require__(7);\nvar three_1 = __webpack_require__(0);\nvar bounds_1 = __webpack_require__(1);\nvar pack_node_1 = __webpack_require__(14);\nvar label_1 = __webpack_require__(15);\nvar atlas_texture_1 = __webpack_require__(8);\nvar debug = __webpack_require__(2)('webgl-surface:Atlas');\nvar debugLabels = __webpack_require__(2)('webgl-surface:Labels');\nvar ZERO_IMAGE = {\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    label: new label_1.Label({ text: ' ' }),\n    pixelHeight: 0,\n    pixelWidth: 0,\n};\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = (function () {\n    /**\n     * Generates a new manager for atlas'. This will create and destroy atlas' and\n     * ensure they have the correct settings applied. A manager will also aid in\n     * packing images into the atlas indicated.\n     *\n     * @param {number} width The width of all atlas' generated\n     * @param {number} height The height of all atlas' generated\n     */\n    function AtlasManager(width, height) {\n        /** Gives a reference of all of the images loaded for the atlas */\n        this.atlasImages = {};\n        /** Stores the current mapping of the atlas */\n        this.atlasMap = {};\n        /** Stores all of the textures that are our atlases */\n        this.atlasTexture = {};\n        this.textureWidth = width;\n        this.textureHeight = height;\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param atlasName The unique name of the atlas so it can be retrieved/referenced easily\n     * @param images The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (atlasName, images, colors) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlasMap, canvas, _i, images_1, image, image, texture, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        atlasMap = new pack_node_1.PackNode(0, 0, this.textureWidth, this.textureHeight);\n                        // Create the mapping element for the new atlas so we can track insertions / deletions\n                        this.atlasMap[atlasName] = atlasMap;\n                        // Make a listing of images that is within the atlas\n                        this.atlasImages[atlasName] = [];\n                        canvas = document.createElement('canvas').getContext('2d');\n                        // Size the canvas to the atlas size\n                        canvas.canvas.width = this.textureWidth;\n                        canvas.canvas.height = this.textureHeight;\n                        if (!images) return [3 /*break*/, 4];\n                        _i = 0, images_1 = images;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < images_1.length)) return [3 /*break*/, 4];\n                        image = images_1[_i];\n                        return [4 /*yield*/, this.draw(image, atlasName, canvas)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        if (!colors) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.drawColors(colors, atlasName, canvas)];\n                    case 5:\n                        image = _b.sent();\n                        // Add the dummy texture info as an image to our list of images\n                        if (image) {\n                            this.atlasImages[atlasName].push(image);\n                        }\n                        _b.label = 6;\n                    case 6:\n                        texture = new three_1.Texture(canvas.canvas);\n                        texture.premultiplyAlpha = true;\n                        texture.generateMipmaps = true;\n                        // Store the texture as the atlas.\n                        this.atlasTexture[atlasName] = texture;\n                        // Store the images as images within the atlas\n                        if (images) {\n                            (_a = this.atlasImages[atlasName]).push.apply(_a, images);\n                        }\n                        debug('Atlas Created-> texture: %o mapping: %o images: %o', texture, atlasMap, images);\n                        return [2 /*return*/, texture];\n                }\n            });\n        });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        if (this.atlasTexture[atlasName]) {\n            this.atlasTexture[atlasName].dispose();\n            this.atlasTexture[atlasName] = null;\n        }\n        if (this.atlasMap[atlasName]) {\n            this.atlasMap[atlasName].destroy();\n            this.atlasMap[atlasName] = null;\n        }\n        if (this.atlasImages[atlasName]) {\n            var none_1 = { x: 0, y: 0 };\n            this.atlasImages[atlasName].forEach(function (image) {\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                image.pixelHeight = 0;\n                image.atlasBL = none_1;\n                image.atlasBR = none_1;\n                image.atlasTL = none_1;\n                image.atlasTR = none_1;\n            });\n            this.atlasImages[atlasName] = null;\n        }\n    };\n    AtlasManager.prototype.isValidImage = function (image) {\n        var isValid = false;\n        if (image && (image.imagePath || (image.label && image.label.text))) {\n            if (image.pixelWidth && image.pixelHeight) {\n                isValid = true;\n            }\n        }\n        return isValid;\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param image The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (image, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var loadedImage, rect, dimensions, node, insertedNode, ux, uy, uw, uh, atlasDimensions;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Validate the index\n                        if (!this.atlasMap[atlasName]) {\n                            debug('Can not load image, invalid Atlas Name: %o for atlasMaps: %o', atlasName, this.atlasMap);\n                            return [2 /*return*/, false];\n                        }\n                        return [4 /*yield*/, this.loadImage(image)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Make sure at this point the image knows it is not affiliated with an atlas\n                        // If something goes wrong with loading or insertting this image, then a null\n                        // Atlas value will indicate the image can not be used appropriately\n                        image.atlasReferenceID = null;\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && this.isValidImage(image)) {\n                            debug('Image loaded: %o', image.imagePath);\n                            rect = new bounds_1.Bounds(0, image.pixelWidth, image.pixelHeight, 0);\n                            dimensions = {\n                                first: image,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            node = this.atlasMap[atlasName];\n                            insertedNode = node.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                if (image.label) {\n                                    debugLabels('Atlas location determined. PackNode: %o Dimensions: %o', insertedNode, dimensions);\n                                }\n                                // Apply the image to the node\n                                insertedNode.nodeImage = image;\n                                ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                                uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                                uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                                uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                                debugLabels('uy is %o', uy);\n                                atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                                image.atlasReferenceID = atlasName;\n                                image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                                image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                                // Now draw the image to the indicated canvas\n                                canvas.drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit image into atlas \" + image.imagePath);\n                                image = this.setDefaultImage(image, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default image\n                            console.error(\"Could not load image \" + image.imagePath);\n                            image = this.setDefaultImage(image, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders a list of colors to the canvas. This using the same packing\n     * algorithm as any image so the rendering is placed correctly or determines\n     * if enough space is not available.\n     *\n     * @param {AtlasColor[]} colors The list of colors to be rendered to the atlas\n     * @param {string} atlasName The name of the atlas being rendered to\n     * @param {CanvasRenderingContext2D} canvas The canvas of the atlas being rendered to\n     *\n     * @returns {Promise<boolean>} Resolves to true if the operation was successful\n     */\n    AtlasManager.prototype.drawColors = function (colors, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var colorWidth, colorHeight, maxPerRow, rowWidth, rowCount, colCount, renderHeight, dimensions, node, insertedNode, image, ux, uy, uw, uh, atlasDimensions, renderSpace, startX, startY, nextX, nextY, beginX, beginY, col, row, _i, colors_1, color, _a, r, g, b;\n            return __generator(this, function (_b) {\n                debug('Finding space for colors on the atlas: %o', colors);\n                colorWidth = 2;\n                colorHeight = 2;\n                maxPerRow = 1024 / colorWidth;\n                rowWidth = Math.min(this.textureWidth, maxPerRow * colorWidth);\n                rowCount = Math.ceil((colors.length * colorWidth) / rowWidth);\n                colCount = Math.ceil(rowWidth / colorWidth);\n                renderHeight = rowCount * colorHeight;\n                dimensions = {\n                    // Since the algorithm requires something to fill this slot, just make a\n                    // Dummy object\n                    first: new atlas_texture_1.AtlasTexture(null, null),\n                    // Set the dimensions we calculated for the space our colors will take up\n                    // Within the atlas\n                    second: new bounds_1.Bounds(0, rowWidth, renderHeight, 0),\n                };\n                // Auto add a buffer in\n                dimensions.second.width += 1;\n                dimensions.second.height += 1;\n                node = this.atlasMap[atlasName];\n                insertedNode = node.insert(dimensions);\n                // If the result was NULL we did not successfully insert the image into any map\n                if (insertedNode) {\n                    debug('Atlas location determined for colors: %o', insertedNode);\n                    image = insertedNode.nodeImage = dimensions.first;\n                    ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                    uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                    uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                    uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                    atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                    image.atlasReferenceID = atlasName;\n                    image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                    image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                    renderSpace = insertedNode.nodeDimensions;\n                    startX = renderSpace.x;\n                    startY = renderSpace.y;\n                    nextX = colorWidth / this.textureWidth;\n                    nextY = -colorHeight / this.textureHeight;\n                    beginX = (startX / this.textureWidth) + (nextX / 2.0);\n                    beginY = 1.0 - (startY / this.textureHeight) + (nextY / 2.0);\n                    col = 0;\n                    row = 0;\n                    // Loop through each color, establish metrics, draw to the atlas\n                    for (_i = 0, colors_1 = colors; _i < colors_1.length; _i++) {\n                        color = colors_1[_i];\n                        // Staore the info needed to make the color referenceable again\n                        color.atlasReferenceID = atlasName;\n                        color.colorIndex = col + (row * colCount);\n                        color.colorsPerRow = colCount;\n                        // The location of the middle of the first color\n                        color.firstColor = {\n                            x: beginX,\n                            y: beginY,\n                        };\n                        color.nextColor = {\n                            x: nextX,\n                            y: nextY,\n                        };\n                        _a = color.color, r = _a.r, g = _a.g, b = _a.b;\n                        // Draw the color to the canvas\n                        canvas.fillStyle = \"rgba(\" + Math.round(r * 255.0) + \", \" + Math.round(g * 255.0) + \", \" + Math.round(b * 255.0) + \", \" + color.opacity + \")\";\n                        canvas.fillRect(col * colorWidth + startX, row * colorHeight + startY, colorWidth, colorHeight);\n                        col++;\n                        if (col === colCount) {\n                            col = 0;\n                            row++;\n                        }\n                    }\n                    // We have finished inserting\n                    return [2 /*return*/, image];\n                }\n                else {\n                    // Log an error\n                    throw new Error('Could not fit colors into atlas');\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.atlasTexture[atlasName];\n    };\n    /**\n     * This reads the input path and loads the image specified by the path\n     *\n     * @param {AtlasTexture} texture This is an atlas texture with the path set\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (texture) {\n        if (texture.imagePath) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    texture.pixelWidth = image.width;\n                    texture.pixelHeight = image.height;\n                    texture.aspectRatio = image.width / image.height;\n                    resolve(image);\n                };\n                image.onerror = function () {\n                    resolve(null);\n                };\n                image.src = texture.imagePath;\n            });\n        }\n        else if (texture.label) {\n            return new Promise(function (resolve, reject) {\n                var label = texture.label;\n                var labelSize = label.getSize();\n                var canvas = document.createElement('canvas');\n                var ctx = canvas.getContext('2d');\n                // Set the dimensions of the canvas/texture space we will be using to rasterize\n                // The label. Use the label's rasterization controls to aid in rendering the label\n                canvas.width = labelSize.width + texture.label.rasterizationOffset.x;\n                canvas.height = labelSize.height;\n                debug('label X %o', texture.label.rasterizationOffset.x);\n                if (ctx) {\n                    var fontSize = label.fontSize;\n                    var color = d3_color_1.rgb(label.color.base.color.r * 255, label.color.base.color.g * 255, label.color.base.color.b * 255, label.color.base.opacity);\n                    ctx.font = label.makeCSSFont(fontSize);\n                    ctx.textAlign = label.textAlign;\n                    ctx.textBaseline = label.textBaseline;\n                    ctx.fillStyle = color.toString();\n                    // Render the label to the canvas/texture space. This utilizes the label's\n                    // Rasterization metrics to aid in getting a clean render.\n                    ctx.fillText(label.text, texture.label.rasterizationOffset.x, texture.label.rasterizationOffset.y);\n                    var image_1 = new Image();\n                    image_1.onload = function () {\n                        // Here we use the canvas dimensions and NOT the image dimensions\n                        // As the image dimensions are unreliable here when setting the src\n                        // To a data url\n                        texture.pixelWidth = image_1.width;\n                        texture.pixelHeight = image_1.height;\n                        texture.aspectRatio = image_1.width / image_1.height;\n                        debugLabels('Applying size based on rasterization to the Label: w: %o h: %o', image_1.width, image_1.height);\n                        label.setSize({\n                            height: image_1.height,\n                            width: image_1.width,\n                        });\n                        resolve(image_1);\n                    };\n                    image_1.onerror = function () {\n                        resolve(null);\n                    };\n                    image_1.src = canvas.toDataURL('image/png');\n                }\n            });\n        }\n        return Promise.resolve(null);\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds(x, x + width, y, y - height);\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        this.nodeImage = null;\n        if (this.child[0]) {\n            this.child[0].destroy();\n        }\n        if (this.child[1]) {\n            this.child[1].destroy();\n        }\n        this.child[0] = undefined;\n        this.child[1] = undefined;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        if (this.child[0] && !this.child[0].nodeImage) {\n            return !this.child[0].isLeaf;\n        }\n        if (this.child[1] && !this.child[1].nodeImage) {\n            return !this.child[1].isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        if (!this.isLeaf) {\n            // Try inserting into first child\n            var newNode = this.child[0].insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return this.child[1].insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = __webpack_require__(12);\nvar rotateable_quad_1 = __webpack_require__(16);\nvar sprite_1 = __webpack_require__(17);\nvar measurement = new sprite_1.Sprite(200, 200, 1, 1);\nvar Label = (function (_super) {\n    __extends(Label, _super);\n    /**\n     * Creates an instance of Label.\n     *\n     * @param {Partial<Label<T>>} [options={}]\n     */\n    function Label(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, { x: 0, y: 1 }, { width: 1, height: 1 }, 0, rotateable_quad_1.AnchorPosition.TopLeft) || this;\n        _this.depth = 40;\n        _this.direction = 'inherit';\n        _this.font = 'serif';\n        _this.fontSize = 10;\n        _this.fontWeight = 400;\n        _this.maxWidth = undefined;\n        _this.text = '';\n        _this.id = '';\n        _this.textAlign = 'start';\n        _this.textBaseline = 'alphabetic';\n        _this.zoomable = false;\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to offset the rasterization if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationOffset = { x: 20, y: 0 };\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to pad the rasterization space if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationPadding = { width: 0, height: 0 };\n        // Set props\n        Object.assign(_this, options);\n        // Make sure our dimensions are set\n        _this.setFontSize(options.fontSize || 12);\n        return _this;\n    }\n    Object.defineProperty(Label.prototype, \"baseLabel\", {\n        get: function () {\n            return this._baseLabel;\n        },\n        set: function (value) {\n            this._baseLabel = value;\n            this.text = value.text;\n            this.fontSize = value.fontSize;\n            this.font = value.font;\n            this.textAlign = value.textAlign;\n            this.textBaseline = value.textBaseline;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Label.prototype, \"rasterizedLabel\", {\n        /**\n         * This getter ensures the rasterized label retrieved is either this labels own rasterization\n         * or from a base.\n         */\n        get: function () {\n            if (this.baseLabel) {\n                return this.baseLabel.rasterizedLabel;\n            }\n            return this._rasterizedLabel;\n        },\n        set: function (value) {\n            this._rasterizedLabel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies all of the properties of a label and makes this label use them\n     *\n     * @param {Label} label The labels whose properties we wish to copy\n     */\n    Label.prototype.copyLabel = function (label) {\n        // Assign the properties of the other label to this\n        // Specifically, ONLY label properties\n        Object.assign(this, ramda_1.omit(['x', 'y', 'width', 'height'], label));\n        // Use this to set the text to make sure all of the metrics are re-calculated\n        this.setText(label.text);\n    };\n    /**\n     * This gets the actual text this label is capable of rendering\n     */\n    Label.prototype.getText = function () {\n        if (this._baseLabel) {\n            return this._baseLabel.getText();\n        }\n        return this.text;\n    };\n    /**\n     * Takes all of the current settings and makes a CSS font string\n     */\n    Label.prototype.makeCSSFont = function (fontSize) {\n        return this.fontWeight + \" \" + (fontSize || this.fontSize) + \"px \" + this.font;\n    };\n    /**\n     * Change the position this text is rendered to\n     *\n     * @param x X world coordinate\n     * @param y Y world coordinate\n     */\n    Label.prototype.position = function (x, y) {\n        this.x = x;\n        this.y = y;\n    };\n    /**\n     * This sets the font size for the label based on the base text dimensions\n     *\n     * @param {number} fontSize\n     */\n    Label.prototype.setFontSize = function (fontSize) {\n        var lbl = this.getText();\n        var size = this.getSize();\n        var width = size.width;\n        var height = size.height;\n        if (this.baseLabel) {\n            var baseSize = this.baseLabel.getSize();\n            var scale = fontSize / this.baseLabel.fontSize;\n            height = baseSize.height * scale;\n            width = baseSize.width * scale;\n        }\n        else {\n            measurement.context.font = this.makeCSSFont();\n            var size_1 = measurement.context.measureText(lbl);\n            // Set our properties based on the calculated size\n            height = fontSize;\n            width = size_1.width;\n        }\n        this.fontSize = fontSize;\n        this.setSize({ width: width, height: height });\n    };\n    /**\n     * Change the text and the calculated bounding box for this label\n     */\n    Label.prototype.setText = function (lbl) {\n        this.text = lbl;\n        this.setFontSize(this.fontSize);\n    };\n    Label.prototype.update = function () {\n        this.setFontSize(this.fontSize);\n        _super.prototype.update.call(this);\n    };\n    return Label;\n}(rotateable_quad_1.RotateableQuad));\nexports.Label = Label;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar bounds_1 = __webpack_require__(1);\nvar AnchorPosition;\n(function (AnchorPosition) {\n    AnchorPosition[AnchorPosition[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorPosition[AnchorPosition[\"BottomRight\"] = 1] = \"BottomRight\";\n    AnchorPosition[AnchorPosition[\"Custom\"] = 2] = \"Custom\";\n    AnchorPosition[AnchorPosition[\"Middle\"] = 3] = \"Middle\";\n    AnchorPosition[AnchorPosition[\"MiddleBottom\"] = 4] = \"MiddleBottom\";\n    AnchorPosition[AnchorPosition[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorPosition[AnchorPosition[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorPosition[AnchorPosition[\"MiddleTop\"] = 7] = \"MiddleTop\";\n    AnchorPosition[AnchorPosition[\"TopLeft\"] = 8] = \"TopLeft\";\n    AnchorPosition[AnchorPosition[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorPosition = exports.AnchorPosition || (exports.AnchorPosition = {}));\nvar anchorCalculations = (_a = {},\n    _a[AnchorPosition.BottomLeft] = function (quad) { return ({\n        x: 0,\n        y: 0,\n    }); },\n    _a[AnchorPosition.BottomRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: 0,\n    }); },\n    _a[AnchorPosition.Custom] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.Middle] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleBottom] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: 0,\n    }); },\n    _a[AnchorPosition.MiddleLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleTop] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height,\n    }); },\n    _a);\nvar RotateableQuad = (function (_super) {\n    __extends(RotateableQuad, _super);\n    /**\n     * Generates a quad\n     *\n     * @param {IPoint} location The location of the quad (it's anchorpoint will be placed here)\n     * @param {number} width The width of the quad\n     * @param {number} height The height of the quad\n     * @param {AnchorPosition} anchor The anchor location of the quad.\n     *                                Location and rotation will be relative to this.\n     */\n    function RotateableQuad(location, size, rotation, anchor) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        // Apply our properties\n        _this.setSize(size);\n        _this.setAnchor(anchor);\n        _this.setLocation(location);\n        _this.setRotation(rotation);\n        // Update the transform and the corner vertices\n        _this.update();\n        return _this;\n    }\n    /**\n     * @private\n     * Recalculates this anchor position based on the anchor type\n     *\n     * @param {AnchorPosition} anchor\n     */\n    RotateableQuad.prototype.calculateAnchor = function (anchor) {\n        this.anchor = anchorCalculations[anchor](this);\n    };\n    /**\n     * Get the base size of the quad\n     *\n     * @returns {ISize} The base size of this quad\n     */\n    RotateableQuad.prototype.getSize = function () {\n        return this.size;\n    };\n    /**\n     * Sets the specified anchor position on the quad\n     *\n     * @param {AnchorPosition} anchor This specifies an auto calculated position for the anchor\n     * @param {IPoint} custom If specified, will set a custom anchor location rather\n     *                        than the calculated version.\n     */\n    RotateableQuad.prototype.setAnchor = function (anchor, custom) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        this.anchorType = anchor;\n        // Apply the custom position if present\n        if (custom) {\n            this.anchorType = AnchorPosition.Custom;\n            this.anchor = custom;\n            return;\n        }\n        this.calculateAnchor(anchor);\n    };\n    RotateableQuad.prototype.getAnchor = function () {\n        return this.anchor;\n    };\n    RotateableQuad.prototype.getAnchorType = function () {\n        return this.anchorType;\n    };\n    /**\n     * This sets the location of this quad to a given position where the anchor\n     * point will be located on top of the location provided.\n     *\n     * @param {IPoint} location The location to place the quad\n     */\n    RotateableQuad.prototype.setLocation = function (location) {\n        this.location = location;\n    };\n    RotateableQuad.prototype.getLocation = function () {\n        return this.location;\n    };\n    /**\n     * Sets the rotation of this quad, in radians, rotated around the anchor point.\n     *\n     * @param {number} rotation The rotation of the quad\n     */\n    RotateableQuad.prototype.setRotation = function (rotation) {\n        this.rotation = rotation;\n    };\n    /**\n     * get Rotation\n     */\n    RotateableQuad.prototype.getRotation = function () {\n        return this.rotation;\n    };\n    /**\n     * get direction as a point\n     */\n    RotateableQuad.prototype.getDirection = function () {\n        var angle = this.rotation;\n        return {\n            x: Math.cos(angle),\n            y: Math.sin(angle),\n        };\n    };\n    /**\n     * Applies the size to the base\n     *\n     * @param {ISize} size The size of the base quad\n     */\n    RotateableQuad.prototype.setSize = function (size) {\n        this.size = size;\n        this.base = [\n            new three_1.Vector4(0, size.height, 0, 1),\n            new three_1.Vector4(size.width, size.height, 0, 1),\n            new three_1.Vector4(0, 0, 0, 1),\n            new three_1.Vector4(size.width, 0, 0, 1),\n        ];\n        if (this.anchorType) {\n            this.calculateAnchor(this.anchorType);\n        }\n    };\n    /**\n     * This re-calculates the transform for this quad and applies the transform to\n     * the corners.\n     */\n    RotateableQuad.prototype.update = function () {\n        // Calculate the pieces of the transformation\n        var anchorMat = new three_1.Matrix4().makeTranslation(this.anchor.x, -this.anchor.y, 0);\n        var rotationMat = new three_1.Matrix4().makeRotationZ(this.rotation);\n        var locationMat = new three_1.Matrix4().makeTranslation(this.location.x, this.location.y, 0);\n        // Compose the transform based on the pieces and apply them\n        // In the proper compositing order\n        this.transform = new three_1.Matrix4()\n            .multiply(locationMat)\n            .multiply(rotationMat)\n            .multiply(anchorMat);\n        // Apply the transform to all of our base vertices\n        this.TL = this.base[0].clone().applyMatrix4(this.transform);\n        this.TR = this.base[1].clone().applyMatrix4(this.transform);\n        this.BL = this.base[2].clone().applyMatrix4(this.transform);\n        this.BR = this.base[3].clone().applyMatrix4(this.transform);\n        // Update the bounds of this object\n        this.x = this.TL.x;\n        this.y = this.TL.y;\n        this.width = 1;\n        this.height = 1;\n        this.encapsulatePoints([this.TR, this.BL, this.BR]);\n    };\n    return RotateableQuad;\n}(bounds_1.Bounds));\nexports.RotateableQuad = RotateableQuad;\nvar _a;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A canvas element wrapper that aids in tracking a canvas element along with\n * content scaling properties.\n *\n * @class Sprite\n */\nvar Sprite = (function () {\n    //\n    // Ctor at the top below props\n    //\n    /**\n     * Creates an instance of Sprite.\n     *\n     * @param w             The width of the context to create\n     * @param h             The height of the context to create\n     * @param contentScaleX The content scaling of the content\n     * @param contentScaleY The content scaling of the content\n     *\n     * @memberOf Sprite\n     */\n    function Sprite(w, h, contentScaleX, contentScaleY) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n        var canvas = document.createElement('canvas');\n        if (canvas) {\n            this.scaleX = contentScaleX || this.scaleX;\n            this.scaleY = contentScaleY || this.scaleY;\n            canvas.width = w * this.scaleX;\n            canvas.height = h * this.scaleY;\n            this.context = canvas.getContext('2d');\n            this.canvas = canvas;\n        }\n    }\n    /**\n     * Retrieves the content scaling of this object\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentScale = function () {\n        return {\n            x: this.scaleX,\n            y: this.scaleY,\n        };\n    };\n    /**\n     * Retrieves the size of the content ignoring scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentSize = function () {\n        return {\n            height: this.canvas.height,\n            width: this.canvas.width,\n        };\n    };\n    /**\n     * Retrieves the dimensional width of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getWidth = function () {\n        return this.canvas.width / this.scaleX;\n    };\n    /**\n     * Retrieves the dimensional height of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getHeight = function () {\n        return this.canvas.height / this.scaleY;\n    };\n    return Sprite;\n}());\nexports.Sprite = Sprite;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = __webpack_require__(33);\nvar three_1 = __webpack_require__(0);\nvar debug = __webpack_require__(2)('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e.nativeEvent;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || e.nativeEvent.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.bounds = null;\n        this.children = [];\n        this.childrenProps = [];\n        this.depth = 0;\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds(left, right, top, bottom);\n        }\n        else {\n            this.bounds = new bounds_1.Bounds(0, 1, 1, 0);\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        this.children = null;\n        this.bounds = null;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom < minY) {\n                minY = child.bottom;\n            }\n            if (child.y > maxY) {\n                maxY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds(minX, maxX, maxY, minY));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y += 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Collects all props associated with the children. This array of props will\n     * mirror the list retrieved with gatherChildren.\n     *\n     * @param list\n     *\n     * @returns The list specified as the list paramter\n     *\n     * @memberOf Node\n     */\n    Node.prototype.gatherProps = function (list) {\n        var _this = this;\n        this.children.forEach(function (c, index) {\n            list.push(_this.childrenProps[index]);\n        });\n        if (this.nodes) {\n            this.nodes.TL.gatherProps(list);\n            this.nodes.TR.gatherProps(list);\n            this.nodes.BL.gatherProps(list);\n            this.nodes.BR.gatherProps(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        this.childrenProps = [];\n        while (allChildren.length > 0) {\n            this.doAdd(allChildren.pop());\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nvar WebGLStat = (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.printCurrentProgramInfo = function (debug, surface) {\n        if (surface.gl) {\n            var info = getProgramInfo(surface.gl, surface.gl.getParameter(surface.gl.CURRENT_PROGRAM));\n            var table = window.table;\n            if (table) {\n                table(info.uniforms);\n            }\n        }\n        else {\n            debug('Attempted to printProgramInfo but the surface has not established its gl context yet');\n        }\n    };\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    }\n}\ninitStats();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar curved_line_1 = __webpack_require__(22);\nvar line_1 = __webpack_require__(5);\nvar point_1 = __webpack_require__(6);\n/**\n * This defines a drawable curved line shape. It contains the information necessary\n * to efficiently render the line.\n *\n * @export\n * @class CurvedLineShape\n * @extends {CurvedLine<T>}\n * @template T An associated data type that can be linked to this shape to make data retrieval from interacting\n *             with the shape easier.\n */\nvar CurvedLineShape = (function (_super) {\n    __extends(CurvedLineShape, _super);\n    /**\n     * Creates an instance of CurvedLineShape.\n     *\n     * @param {ICurvedLineShapeOptions} options The options for creating this line\n     */\n    function CurvedLineShape(options) {\n        var _this = \n        // We pass our properties to the curve line but we do not let it cache it's version of the line segments\n        // As we will be constructing our own segmentation requiring a new type of cache\n        _super.call(this, options) || this;\n        /** Depeth of draw location */\n        _this.depth = 0;\n        /** How thick the line should be */\n        _this.lineWidth = 1;\n        _this.encapsulatePoints(_this.getTriangleStrip());\n        _this.cachesQuadSegments = options.cacheSegments;\n        _this.depth = options.depth || 0;\n        _this.lineWidth = options.lineWidth || 1;\n        _this.startColor = options.startColor;\n        _this.endColor = options.endColor;\n        return _this;\n    }\n    /**\n     * Returns a new instance of this object that mimicks the properties of this Object\n     *\n     * @returns {CurvedLineShape<T>} The cloned object\n     */\n    CurvedLineShape.prototype.clone = function () {\n        // Perform the clone\n        var clone = new CurvedLineShape({\n            cacheSegments: this.cachesSegments,\n            controlPoints: this.controlPoints,\n            end: this.end,\n            endColor: this.endColor,\n            lineWidth: this.lineWidth,\n            resolution: this.resolution,\n            start: this.start,\n            startColor: this.startColor,\n            type: this.type,\n        });\n        clone.d = this.d;\n        return clone;\n    };\n    /**\n     * @override\n     * See base definition\n     */\n    CurvedLineShape.prototype.distanceTo = function (point) {\n        return Math.max(0, _super.prototype.distanceTo.call(this, point) - (this.lineWidth / 2.0));\n    };\n    /**\n     * This produces a triangle strip that represents the quads that composes this line. If caching is present,\n     * subsequent calls to this method will be much faster unless the cache gets invalidated.\n     *\n     * @return {IPoint[]} The Triangle Strip of points to create the quads that make each segment of the curve\n     */\n    CurvedLineShape.prototype.getTriangleStrip = function () {\n        if (this.cachesSegments && this.cachedQuadSegments) {\n            return this.cachedQuadSegments;\n        }\n        // Make a container to hold our triangle strip info\n        var strip = [];\n        var normal = [];\n        // Start with calculating the line strip so we can use the line segments\n        // To produce the quads we need to render\n        var lineStrip = this.getLineStrip();\n        var lineWidthHalf = this.lineWidth / 2.0;\n        var line = new line_1.Line(point_1.Point.zero(), point_1.Point.zero());\n        // We make a container point for the scaling operation to reduce allocations\n        var scaledPoint = point_1.Point.zero();\n        // If the line strip is empty, then there is nothing to produce and makes\n        // Us unable to reduce the lineStrip, so return empty here\n        if (lineStrip.length < 2) {\n            return [];\n        }\n        // Calculate bisecting normal or each node\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            line.setPoints(lineStrip[i], lineStrip[i + 1]);\n            if (normal.length === 0) {\n                normal.push(line.perpendicular);\n            }\n            else {\n                // Sum of two normals of a point\n                var temp = {\n                    x: normal[i].x + line.perpendicular.x,\n                    y: normal[i].y + line.perpendicular.y,\n                };\n                // Normalize the sum of two normals\n                var sqrt = Math.sqrt(temp.x * temp.x + temp.y * temp.y);\n                temp.x = temp.x / sqrt;\n                temp.y = temp.y / sqrt;\n                normal[i] = temp;\n            }\n            normal.push(line.perpendicular);\n        }\n        // Use the new normals to generate quads\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            var previous = lineStrip[i];\n            var current = lineStrip[i + 1];\n            // TR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], -lineWidthHalf, scaledPoint), current));\n            // BR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], lineWidthHalf, scaledPoint), current));\n            // TL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], -lineWidthHalf, scaledPoint), previous));\n            // BL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], lineWidthHalf, scaledPoint), previous));\n        }\n        return strip;\n    };\n    /**\n     * @override\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     */\n    CurvedLineShape.prototype.setPoints = function (start, end, controlPoints) {\n        _super.prototype.setPoints.call(this, start, end, controlPoints);\n        this.cachedQuadSegments = [];\n    };\n    return CurvedLineShape;\n}(curved_line_1.CurvedLine));\nexports.CurvedLineShape = CurvedLineShape;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar interpolation_1 = __webpack_require__(11);\nvar bounds_1 = __webpack_require__(1);\nvar line_1 = __webpack_require__(5);\nvar point_1 = __webpack_require__(6);\nvar debug = __webpack_require__(2)('bezier');\n/**\n * This enum covers the type of curved lines that can be made. Making a specific curve\n *\n * @export\n * @enum {number}\n */\nvar CurveType;\n(function (CurveType) {\n    /** This will make the curve be generated from interpolating between the end points and provided control points */\n    CurveType[CurveType[\"Bezier\"] = 0] = \"Bezier\";\n    /**\n     * This will draw a curve as though there is a circular arc passing over the two end points. The radius of the\n     * circular arc is determined by how far the control point is from the straight line that can be made from the two\n     * end points.\n     */\n    CurveType[CurveType[\"CircularCCW\"] = 1] = \"CircularCCW\";\n    CurveType[CurveType[\"CircularCW\"] = 2] = \"CircularCW\";\n    /**\n     * This ignores the control points altogether and just created a straight line with a single segment that consists\n     * of the specified endpoints\n     */\n    CurveType[CurveType[\"Straight\"] = 3] = \"Straight\";\n})(CurveType = exports.CurveType || (exports.CurveType = {}));\n// -------[ Distance Calculating Methods ]----------------------------\n/**\n * Calculates the distance to the bezier curve by testing all of the bezier curve's segment lines\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction bezierDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a circle\n * TODO: Using the segment approach for now. Can be sped up by using circle math\n * instead\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction circularDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a straight line\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction straightDistance(line, testPoint) {\n    return new line_1.Line(line.start, line.end).distanceTo(testPoint);\n}\n// -------[ Segment Generating Methods ]----------------------------\n/**\n * Uses quadratic bezier principles to create the segments for a quadratic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier2Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var lineEnd = line.end;\n    var c1 = line.controlPoints[0];\n    for (var i = 0, end = line.resolution; i <= end; ++i) {\n        segments.push(interpolation_1.bezier2(dt * i, start, lineEnd, c1));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Uses cubic bezier principles to create the segments for a cubic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier3Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var lineEnd = line.end;\n    var c1 = line.controlPoints[0];\n    var c2 = line.controlPoints[1];\n    for (var i = 0, end = line.resolution; i <= end; ++i) {\n        segments.push(interpolation_1.bezier3(dt * i, start, lineEnd, c1, c2));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that follows along a circular path on the line.\n * The distance the control point is from the straight line that flows through the two\n * end points of the line determines the radius of the curvature of the line\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeCircularCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    debug('CW');\n    // Generate a line so we can have a perpendicular calculation\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    var circleCenter = line.controlPoints[1];\n    if (!circleCenter) {\n        // We get the midpoint of the line as we want to align the center of the circle with this point\n        var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n        var minRadius = point_1.Point.getDistance(midPoint, line.start);\n        // The shortest the radius can be is the distance from the line to the mid point\n        // Anything shorter will just result in a hemisphere being rendered\n        if (radius < minRadius) {\n            radius = point_1.Point.getDistance(midPoint, line.start);\n        }\n        // Get the perpendicular direction to the line so we can calculate the center of our circle\n        // From the mid point\n        var perpendicular = straightLine.perpendicular;\n        var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n        // Calculate the location of the center of the circle\n        circleCenter = {\n            x: perpendicular.x * distance + midPoint.x,\n            y: perpendicular.y * distance + midPoint.y,\n        };\n        // Store the circle center as an extra control point in case the value is needed\n        // (which it often is)\n        line.controlPoints[1] = circleCenter;\n    }\n    debug(' center of circle is %o  %o', circleCenter.x, circleCenter.y);\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Calculate how much to increment theta in our parametric circular equation\n    if (theta1 < theta2)\n        theta1 += Math.PI * 2;\n    var dTheta = (theta1 - theta2) / line.resolution;\n    debug('theta1 is %o, theta2 is %o', theta1, theta2);\n    // Compute the segments based on the information we have gathered by applying it to a circular\n    // Parametric equation\n    var segments = [];\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 - (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 - (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    // Cache the segments if specified by the curved line\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    debug('Generated Circular Segments: %o dTheta: %o radius: %o', segments, dTheta, radius);\n    return segments;\n}\nfunction makeCircularCCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    var circleCenter = line.controlPoints[1];\n    if (!circleCenter) {\n        var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n        var minRadius = point_1.Point.getDistance(midPoint, line.start);\n        if (radius < minRadius) {\n            radius = point_1.Point.getDistance(midPoint, line.start);\n        }\n        var perpendicular = straightLine.perpendicular;\n        var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n        circleCenter = {\n            x: -perpendicular.x * distance + midPoint.x,\n            y: -perpendicular.y * distance + midPoint.y,\n        };\n        // Store the circle center as an extra control point in case the value is needed\n        // (which it often is)\n        line.controlPoints[1] = circleCenter;\n    }\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    if (theta2 < theta1)\n        theta2 += Math.PI * 2;\n    var dTheta = (theta2 - theta1) / line.resolution;\n    var segments = [];\n    // CCW, from end to start\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 + (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 + (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    if (line.cachedSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that is straight, thus only 1 segments is needed\n * and will be generated.\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeStraightSegments(line) {\n    return [line.start, line.end];\n}\n/** A quick lookup for a proper segment creating method for a curved line  */\nvar pickSegmentMethod = (_a = {},\n    _a[CurveType.Bezier] = [\n        null,\n        makeBezier2Segments,\n        makeBezier3Segments,\n    ],\n    _a[CurveType.CircularCW] = [\n        null,\n        makeCircularCWSegments,\n        makeCircularCWSegments,\n    ],\n    _a[CurveType.CircularCCW] = [\n        null,\n        makeCircularCCWSegments,\n        makeCircularCCWSegments,\n    ],\n    _a[CurveType.Straight] = [\n        makeStraightSegments,\n    ],\n    _a);\n/** A quick lookup for a proper distance calculating method for a curved line  */\nvar pickDistanceMethod = (_b = {},\n    _b[CurveType.Bezier] = bezierDistance,\n    _b[CurveType.CircularCW] = circularDistance,\n    _b[CurveType.CircularCCW] = circularDistance,\n    _b[CurveType.Straight] = straightDistance,\n    _b);\n/**\n * Defines an object which illustrates a curved line. Curved lines can be formed in many\n * ways but most often from two end points and some provided control points.\n *\n * @export\n * @class CurvedLine\n * @extends {Bounds<T>}\n * @template T An associated data type with this object. Use <never> if no data type is ever associated\n */\nvar CurvedLine = (function (_super) {\n    __extends(CurvedLine, _super);\n    /**\n     * Generates a primitive that describes a curved line, which is defined by the lines end points, type, and control points\n     *\n     * @param {ICurvedLineOptions} options The configuration options of this curved line\n     */\n    function CurvedLine(options) {\n        var _this = this;\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        _this = _super.call(this, minX, maxX, maxY, minY) || this;\n        // Apply the relevant properties to the curve\n        _this.cachesSegments = options.cacheSegments || false;\n        _this.type = options.type;\n        _this.resolution = options.resolution || 20;\n        // Set the metrics for this curved line\n        _this.setPoints(options.start, options.end, options.controlPoints);\n        // Set the method that will be used for calculating distance from a point\n        _this.distanceMethod = pickDistanceMethod[options.type];\n        return _this;\n    }\n    Object.defineProperty(CurvedLine.prototype, \"values\", {\n        get: function () {\n            return {\n                controlPoints: this.controlPoints,\n                end: this.end,\n                start: this.start,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the nearest distance from the provided point to this curved line\n     *\n     * @param {IPoint} point The point to test the distance from\n     *\n     * @returns {number} The calculated nearest distance from this curve to the point\n     */\n    CurvedLine.prototype.distanceTo = function (point) {\n        return this.distanceMethod(this, point);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {CurvedLine<any>[]} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    CurvedLine.getClosest = function (lines, point) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(point);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This returns the line strip that represents the curve. A line strip is specifically a group of points\n     * that forms line segments by taking the current point as one end and the previous point as the second end\n     * thus, you would start at index 1 and loop to the end to generate all of the lines composing this single\n     * line.\n     *\n     * @return {IPoint[]} All of the points in the line strip\n     */\n    CurvedLine.prototype.getLineStrip = function () {\n        return this.segmentMethod(this);\n    };\n    /**\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     * @param {boolean} preventRebounding If set, this will prevent the bounds from being recalculated\n     */\n    CurvedLine.prototype.setPoints = function (start, end, controlPoints) {\n        // Apply the points\n        this.start = start;\n        this.end = end;\n        if (controlPoints.length === 0)\n            debug('start: %o, end:%o', start, end);\n        // Get the available segment methods for the given type\n        var segmentMethods = pickSegmentMethod[this.type];\n        // If we adjust the control points we need to re-evaluate the type of segment creation method we use\n        if (controlPoints) {\n            this.controlPoints = controlPoints;\n            // Get the number of control points we want to base the curve off of\n            var numControlPoints = controlPoints.length;\n            // If we have more control points than the methods available, then we use the greatest method available to best\n            // Handle as many control points as possible\n            if (numControlPoints > segmentMethods.length) {\n                numControlPoints = segmentMethods.length - 1;\n            }\n            // Set the method that will be used for generating segments\n            this.segmentMethod = segmentMethods[numControlPoints];\n            // Make sure the input wasn't bad\n            if (!this.segmentMethod) {\n                throw new Error('An Invalid number of control points was provided to a curved line. You must have at LEAST 1 control point. Or 0 for a straight line');\n            }\n            if (this.type === CurveType.Bezier) {\n                this.encapsulatePoints(controlPoints);\n            }\n            else if (this.type === CurveType.CircularCCW || this.type === CurveType.CircularCW) {\n                this.encapsulatePoints(this.getLineStrip());\n            }\n        }\n        this.encapsulatePoint(start);\n        this.encapsulatePoint(end);\n        // Invalidate caches if they exist\n        this.cachedSegments = null;\n    };\n    return CurvedLine;\n}(bounds_1.Bounds));\nexports.CurvedLine = CurvedLine;\nvar _a, _b;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\nvar UID = 0;\nvar Circle = (function (_super) {\n    __extends(Circle, _super);\n    /**\n     * Generate a new Circle object\n     *\n     * @param x The center of the circle\n     * @param y The center of the circle\n     * @param r The radius of the circle\n     * @param d A data object to associate with the circle\n     */\n    function Circle(x, y, r, d) {\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        /** a UID of the circle */\n        _this._id = ++UID;\n        /** Radius of the circle */\n        _this._radius = 0;\n        /** X coord of the center of the circle */\n        _this._centerX = 0;\n        /** Y coord of the center of the circle */\n        _this._centerY = 0;\n        _this._centerX = x;\n        _this._centerY = y;\n        _this._radius = r;\n        _this.d = d;\n        _this.updateBounds();\n        return _this;\n    }\n    Object.defineProperty(Circle.prototype, \"values\", {\n        get: function () {\n            return {\n                radius: this._radius,\n                x: this._centerX,\n                y: this._centerY,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"radius\", {\n        get: function () {\n            return this._radius;\n        },\n        set: function (val) {\n            this._radius = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerX\", {\n        get: function () {\n            return this._centerX;\n        },\n        set: function (val) {\n            this._centerX = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerY\", {\n        get: function () {\n            return this._centerY;\n        },\n        set: function (val) {\n            this._centerY = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Tests if the specified bounds is inside this circle\n     *\n     * @param b The bounds to test against\n     */\n    Circle.prototype.boundsInside = function (b) {\n        var r2 = this._radius * this._radius;\n        var dx = b.x - this._centerX;\n        var dy = b.y - this._centerY;\n        var dy2 = dy * dy;\n        var dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.right - this._centerX;\n        dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dy = b.bottom - this._centerY;\n        dy2 = dy * dy;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.x - this._centerX;\n        dx2 = dx * dx;\n        return (dx2 + dy2) < r2;\n    };\n    /**\n     * Calculates the distance to a provided point\n     *\n     * @param {IPoint} p The point to calculate the distance of the middle of the\n     *                   circle to\n     * @param {boolean} notSquared Flag true to prevent the Math.sqrt operation, leaving\n     *                             the result as distance^2\n     *\n     * @return {number} The distance from mid circle to the point\n     */\n    Circle.prototype.distanceTo = function (p, notSquared) {\n        var dx = this._centerX - p.x;\n        var dy = this._centerY - p.y;\n        if (notSquared) {\n            return dx * dx + dy * dy;\n        }\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n    /**\n     * Retrieves the closest circle to a provided point\n     *\n     * @param {Array} circles The circles to see who is the nearest\n     * @param {IPoint} p The point to compare the circles against for nearness\n     *\n     * @return {Circle} The nearest circle\n     */\n    Circle.getClosest = function (circles, p) {\n        var closestCircle;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        circles.forEach(function (circle) {\n            distance = circle.distanceTo(p, true);\n            if (distance < closestDistance) {\n                closestCircle = circle;\n                closestDistance = distance;\n            }\n        });\n        return closestCircle;\n    };\n    /**\n     * Tests if this circle is colliding with the specified circle\n     *\n     * @param c The circle to test against\n     *\n     * @return {boolean} True if colliding\n     */\n    Circle.prototype.hitCircle = function (c) {\n        var totalDistance = c._radius + this._radius;\n        totalDistance *= totalDistance;\n        return this.distanceTo({ x: c._centerX, y: c._centerY }, true) < totalDistance;\n    };\n    /**\n     * @override\n     * This makes it so the test of a point tests based on a Circle shape\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.hitPoint = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * If there are multiple metrics to update for the circle, this is the most\n     * efficient way to do that as it will update it's bounds only once.\n     *\n     * @param x\n     * @param y\n     * @param r\n     */\n    Circle.prototype.position = function (x, y, r) {\n        this._centerX = x;\n        this._centerY = y;\n        this._radius = r;\n        this.updateBounds();\n    };\n    /**\n     * @override\n     * Tests if a point is inside the circle\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.pointInside = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * When the circle gains different circle metrics, it's Bounds must adjust\n     * accordingly, which is what this method recalculates.\n     */\n    Circle.prototype.updateBounds = function () {\n        var radius = this._radius;\n        this.x = this._centerX - radius;\n        this.y = this._centerY - radius;\n        this.height = radius * 2;\n        this.width = radius * 2;\n    };\n    /**\n     * Pretty print the metrics of this circle\n     */\n    Circle.prototype.toString = function () {\n        return \"[Circle {x: \" + this._centerX + \", y: \" + this._centerY + \", r: \" + this._radius + \"}]\";\n    };\n    return Circle;\n}(bounds_1.Bounds));\nexports.Circle = Circle;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar line_1 = __webpack_require__(5);\n/**\n * Defines a line that can be drawn\n */\nvar LineShape = (function (_super) {\n    __extends(LineShape, _super);\n    /**\n     * Generate a new line that can be drawn\n     */\n    function LineShape(p1, p2, d, r, g, b, a, r2, g2, b2, a2, thickness) {\n        var _this = _super.call(this, p1, p2) || this;\n        // Color 1\n        _this.a = 0;\n        _this.b = 0;\n        _this.g = 0;\n        _this.r = 1;\n        // Color 2 ?\n        _this.a2 = 0;\n        _this.b2 = 0;\n        _this.g2 = 0;\n        _this.r2 = 1;\n        // Other properties\n        _this.cull = true;\n        _this.thickness = 1;\n        Object.assign(_this, {\n            a: a,\n            a2: a2,\n            b: b,\n            b2: b2,\n            d: d,\n            g: g,\n            g2: g2,\n            r: r,\n            r2: r2,\n        });\n        if (thickness !== undefined) {\n            _this.thickness = thickness;\n        }\n        return _this;\n    }\n    /**\n     * Clones this instance of the line shape and creates a new instance of a line shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this line shape\n     */\n    LineShape.prototype.clone = function (newProperties) {\n        return Object.assign(new LineShape(this.p1, this.p2, this.d, this.r, this.g, this.b, this.a, this.r2, this.g2, this.b2, this.a2), this, newProperties);\n    };\n    return LineShape;\n}(line_1.Line));\nexports.LineShape = LineShape;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shape_buffer_cache_1 = __webpack_require__(26);\n/** This is a part of the identifier that is used to retrieve a multibuffer's storage */\nvar multiBufferSelectionPrefix = '__mb__';\n/** This is to ensure each multibuffer gets it's own unique selection identifier */\nvar multiBufferSelectionKeyUID = 0;\nfunction getIDProp(item) {\n    return item.id;\n}\nfunction evenRoundRobinBufferAdd(item, buffers) {\n    var smallest = buffers[0].buffer.length;\n    var found = buffers[0];\n    // Look for the next buffer that has the smallest length\n    // To fill it up\n    buffers.some(function (tracker) {\n        if (tracker.buffer.length < smallest) {\n            found = tracker;\n            return true;\n        }\n        return false;\n    });\n    found.buffer.push(item);\n    return [found];\n}\nfunction noop() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // NO-OP\n}\nfunction echoBuffer(item, buffer, buffers) {\n    return [buffer];\n}\n/**\n * This class helps facilitate breaking up a potentially large shape buffer into multiple buffers.\n */\nvar MultiShapeBufferCache = (function (_super) {\n    __extends(MultiShapeBufferCache, _super);\n    /**\n     * Makes a new multi shape buffer for minimizing changes\n     *\n     * @param numBuffers The number of buffers this multibuffer will manage\n     */\n    function MultiShapeBufferCache(numBuffers, methods) {\n        var _this = _super.call(this) || this;\n        /** The number of buffers this multi buffer manages */\n        _this.numBuffers = 0;\n        /** UID for storing the data for this buffer in the selection */\n        _this.selectionUID = multiBufferSelectionPrefix + (++multiBufferSelectionKeyUID);\n        /**\n         * The method used to add to the buffers. This is changeable so one can implement geometric or\n         * logical adds for invalidation. This returns a list of buffers that will be invalidated from\n         * the operation. The first buffer returned in the invalidation is the strongly associated buffer\n         * to the item injected. This first buffer is the most likely buffer the item is injected into.\n         */\n        _this.addMethod = evenRoundRobinBufferAdd;\n        /**\n         * Gives an implentor opportunity to define the way an is is specified for a given item. It\n         * defaults to searching for an 'id' property on the item.\n         */\n        _this.idMethod = getIDProp;\n        /**\n         * The method that is called right after the initial buffers get constructed. This is changeable\n         * so monitors can.\n         */\n        _this.initMethod = noop;\n        /**\n         * The method that is called right before a shape is removed from a buffer.\n         * This let's the\n         */\n        _this.removeMethod = echoBuffer;\n        /**\n         * The method that is called when an item is updated. This gives a monitor a chance to invalidate\n         * a number of buffers.\n         */\n        _this.updateMethod = echoBuffer;\n        // Store the number of buffers that are created when the buffers are initialized\n        _this.numBuffers = numBuffers;\n        // Set the hook methods if any are specified\n        if (methods) {\n            _this.addMethod = methods.add || _this.addMethod;\n            _this.idMethod = methods.id || _this.idMethod;\n            _this.initMethod = methods.init || _this.initMethod;\n            _this.removeMethod = methods.remove || _this.removeMethod;\n            _this.updateMethod = methods.update || _this.updateMethod;\n        }\n        return _this;\n    }\n    /**\n     * Adds a shape to a buffer and invalidates it\n     *\n     * @param shape The shape to add to a buffer\n     */\n    MultiShapeBufferCache.prototype.addShape = function (shape) {\n        // Perform the custom add opearation\n        var buffers = this.addMethod(shape, this.store.allBuffers);\n        // Stores the shape for lookup via id\n        this.store.idToItem.set(this.idMethod(shape), shape);\n        // Stores the shape for lookup to buffer. We count the\n        // First dirty buffer as the buffer the item is the closest to\n        // Association.\n        this.store.itemToBuffer.set(shape, buffers[0]);\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    /**\n     * Sees if there is a shape associated with this id\n     *\n     * @param id\n     */\n    MultiShapeBufferCache.prototype.containsId = function (id) {\n        return Boolean(this.store.idToItem.get(id));\n    };\n    /**\n     * Sees if this shape has been added to this buffer or not\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.containsShape = function (shape) {\n        // Check if this multibuffer has the shape or no\n        return Boolean(this.store.itemToBuffer.get(shape));\n    };\n    /**\n     * This flags a list of buffers as dirty\n     *\n     * @param buffers\n     */\n    MultiShapeBufferCache.prototype.flagBuffersDirty = function (buffers) {\n        // Flag provided buffers as dirty\n        if (buffers) {\n            // This flags the indicated buffers as dirty\n            buffers.forEach(function (buffer) { return buffer.isDirty = true; });\n        }\n        else {\n            this.store.allBuffers.forEach(function (buffer) { return buffer.isDirty = true; });\n        }\n    };\n    /**\n     * @override\n     * This is called with triggers all of the updates necessary.\n     * We add in our buffer update and invalidation to this process here.\n     *\n     * @param args\n     */\n    MultiShapeBufferCache.prototype.generate = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Make sure the storage is established before trying to create modifications of any sort\n        this.getStorage(selection);\n        // Run the generation which will trigger cache building and modding\n        _super.prototype.generate.apply(this, arguments);\n        // We now invalidate any buffers that have been flagged\n        this.processDirtyBuffers();\n    };\n    /**\n     * @override\n     * This retrieves the multibuffer for this shape buffer\n     */\n    MultiShapeBufferCache.prototype.getBuffer = function () {\n        console.warn('A multishape buffer should have getBuffers called instead');\n        return [];\n    };\n    /**\n     * Get all of the buffers.\n     * WARNING: do NOT modify the output values in any way.\n     *\n     * @return {T[][]} All of the buffers\n     */\n    MultiShapeBufferCache.prototype.getBuffers = function () {\n        if (this.store) {\n            return this.store.allBuffers.map(function (tracker) { return tracker.buffer; });\n        }\n        return [];\n    };\n    /**\n     * Returns the number of buffers this MultiShapeBuffer is managing.\n     */\n    MultiShapeBufferCache.prototype.getNumBuffers = function () {\n        return this.store.allBuffers.length;\n    };\n    /**\n     * Retrieves a shape by the given id. Is undefined if the id is not recognized.\n     *\n     * @param id\n     */\n    MultiShapeBufferCache.prototype.getShapeById = function (id) {\n        return this.store.idToItem.get(id);\n    };\n    /**\n     * This makes all buffers a part of a new array pointer thus making sure\n     * they will be committed to the gpu.\n     */\n    MultiShapeBufferCache.prototype.processDirtyBuffers = function () {\n        this.store.allBuffers.forEach(function (tracker) {\n            if (tracker.isDirty) {\n                tracker.isDirty = false;\n                tracker.buffer = [].concat(tracker.buffer);\n            }\n        });\n    };\n    /**\n     * This retrieves the storage inside the selection. If it doesn't exist,\n     * then the storage is created.\n     *\n     * @param selection\n     */\n    MultiShapeBufferCache.prototype.getStorage = function (selection) {\n        // Get the storage from the selection\n        var storage = (selection.getSelection(this.selectionUID) || [])[0];\n        // If the storage is not stored in the selection, then we create a storage and update the selection with that storage\n        if (!storage) {\n            storage = {\n                allBuffers: [],\n                idToItem: new Map(),\n                itemToBuffer: new Map(),\n            };\n            // Generate the buffers indicated\n            for (var i = 0; i < this.numBuffers; ++i) {\n                storage.allBuffers.push({\n                    buffer: [],\n                    isDirty: false,\n                });\n            }\n            // Initialize anything that may be monitoring the buffers\n            this.initMethod(storage.allBuffers);\n            // Add the storage to the selection\n            selection.select(this.selectionUID, storage);\n        }\n        // Make sure our internal pointer to the storage is set correctly\n        return (this.store = storage);\n    };\n    /**\n     * Removes a shape from the buffer it is a part of.\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.removeShape = function (shape) {\n        // This is the buffer associated with the shape\n        var buffer = this.store.itemToBuffer.get(shape);\n        // Get the buffers invalidated by the remove\n        var buffers = this.removeMethod(shape, buffer, this.store.allBuffers);\n        // Clear the shape out from the buffer\n        buffer.buffer.splice(buffer.buffer.indexOf(shape), 1);\n        // Delete the item from the id lookup\n        this.store.idToItem.delete(this.idMethod(shape));\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    /**\n     * This is called to indicate an update to an item has occurred.\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.updateShape = function (shape) {\n        // Flag each element that needs updating\n        var buffers = this.updateMethod(shape, this.store.itemToBuffer.get(shape), this.store.allBuffers);\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    return MultiShapeBufferCache;\n}(shape_buffer_cache_1.ShapeBufferCache));\nexports.MultiShapeBufferCache = MultiShapeBufferCache;\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar ShapeBufferCache = (function () {\n    function ShapeBufferCache() {\n        this.buffer = [];\n        this.bustCache = true;\n    }\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    ShapeBufferCache.prototype.generate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this.bustCache) {\n            this.buildCache.apply(this, args);\n            this.bustCache = false;\n        }\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    ShapeBufferCache.prototype.buildCache = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Get the buffer the cache has generated\n     */\n    ShapeBufferCache.prototype.getBuffer = function () {\n        return this.buffer;\n    };\n    return ShapeBufferCache;\n}());\nexports.ShapeBufferCache = ShapeBufferCache;\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(28));\n__export(__webpack_require__(34));\n__export(__webpack_require__(41));\n__export(__webpack_require__(49));\n__export(__webpack_require__(50));\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = __webpack_require__(12);\nvar React = __webpack_require__(29);\nvar three_1 = __webpack_require__(0);\nvar atlas_manager_1 = __webpack_require__(13);\nvar atlas_texture_1 = __webpack_require__(8);\nvar bounds_1 = __webpack_require__(1);\nvar frame_info_1 = __webpack_require__(9);\nvar mouse_1 = __webpack_require__(18);\nvar quad_tree_1 = __webpack_require__(19);\nvar webgl_stat_1 = __webpack_require__(20);\nvar debug = __webpack_require__(2)('webgl-surface:GPU');\nvar debugCam = __webpack_require__(2)('webgl-surface:Camera');\nvar debugLabels = __webpack_require__(2)('webgl-surface:Labels');\nvar debugColors = __webpack_require__(2)('webgl-surface:Colors');\n/**\n * This enum names the base methods that are passed into the applyPropsMethods\n * method. This allows subclasses to easily pick the property setting methods they need\n * from the base\n */\nvar BaseApplyPropsMethods;\n(function (BaseApplyPropsMethods) {\n    /** Initializes any context that needs to be set up before the props are set */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"INITIALIZE\"] = 0] = \"INITIALIZE\";\n    /** Moment when any buffer changes should be applied */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"BUFFERCHANGES\"] = 1] = \"BUFFERCHANGES\";\n    /** Initializes camera properties to facilitate smoothe start up */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"CAMERA\"] = 2] = \"CAMERA\";\n    /** Generates the labels as images within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"LABELS\"] = 3] = \"LABELS\";\n    /** Generates the colors within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"COLORS\"] = 4] = \"COLORS\";\n})(BaseApplyPropsMethods = exports.BaseApplyPropsMethods || (exports.BaseApplyPropsMethods = {}));\n/**\n * This enum names the base methods that are passed into the animatedMethods\n * method. This allows subsclasses to easily pick the animated methods they need\n * from the base\n */\nvar BaseAnimatedMethods;\n(function (BaseAnimatedMethods) {\n    /** Sets up the base context needed to execute most methods */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"CONTEXT\"] = 0] = \"CONTEXT\";\n    /** Sets up the inertia method for inertial panning */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"INERTIA\"] = 1] = \"INERTIA\";\n    /** Animates the postion of the camera to a destination */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"POSITION\"] = 2] = \"POSITION\";\n    /** Zooms the camera based on a point of focus */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"ZOOM\"] = 3] = \"ZOOM\";\n})(BaseAnimatedMethods = exports.BaseAnimatedMethods || (exports.BaseAnimatedMethods = {}));\nfunction isAnimatedWithOptions(value) {\n    if (value.options) {\n        return true;\n    }\n    return false;\n}\nfunction isAnimated(value) {\n    if (!value.options) {\n        return true;\n    }\n    return false;\n}\n/** This is the smallest increment the zoom can make. Anything less and nothing will happen */\nvar MIN_ZOOM_INCREMENT = 0.001;\nvar BYTE_MAX = 0xFF;\nvar BACKGROUND_COLOR = new three_1.Color().setRGB(38 / BYTE_MAX, 50 / BYTE_MAX, 78 / BYTE_MAX);\n// --[ CONSTANTS ]-------------------------------------------\n// Make a container vector for performing operations within\nvar vector = new three_1.Vector3();\n// --[ SHADERS ]-------------------------------------------\n/**\n * Equivalent of Math.sign, but faster, and works in all browsers\n *\n * @param {number} value The number to determine the sign\n *\n * @return {number} Returns zero if a sign can not be determined, -1 for a negative, 1 for a positive\n */\nfunction sign(value) {\n    if (!value) {\n        return 0;\n    }\n    if (value > 0) {\n        return 1;\n    }\n    if (value < 0) {\n        return -1;\n    }\n    return 0;\n}\n/**\n * The base component for the communications view\n */\nvar WebGLSurface = (function (_super) {\n    __extends(WebGLSurface, _super);\n    function WebGLSurface() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** This is the atlas manager for managing images and labels rendered as textures */\n        _this.atlasManager = new atlas_manager_1.AtlasManager(2048, 2048);\n        /** Tracks the names of the atlas' generated */\n        _this.atlasNames = {\n            colors: 'colors',\n            labels: 'labels',\n        };\n        /**\n         * List of methods that execute within the animation loop. Makes adding and removing these methods\n         * simpler to manage, as well as gives a clear and optimized way of overriding existing methods\n         * or reordering their execution\n         */\n        _this.animatedMethodList = [];\n        /**\n         * If this is set to true during an animated method's lifecycle, then all subsequent animated methods\n         * will not be executed for the current frame. Upon reaching the end of the frame, the break will reset\n         * and the animated methods will attempt executing again\n         */\n        _this.animatedMethodBreak = false;\n        /**\n         * The camera that 'looks' at our world and gives us the ability to convert\n         * screen coordinates to world coordinates, and vice versa\n         */\n        _this.camera = null;\n        /**\n         * While this number is positive it will be decremented every frame.\n         * While positive, mouse interactions will not occur. This utilizes frame ticks\n         * as SOME values and numbers settle per frame, not necessarily within timelapses.\n         * More often than not, there will only be a need for 1-2 frames of mouse disable to\n         * allow the camera to be positioned in a correct location before screen to world projections\n         * start taking place.\n         */\n        _this.disableMouseInteraction = 0;\n        /** Used to aid in mouse interactions */\n        _this.distance = 0;\n        _this.sizeCamera = null;\n        /** Keep track of the current zoom so it can be set in requestAnimationFrame */\n        _this.currentZoom = 1;\n        /** Horizontal destination the camera will pan to */\n        _this.destinationX = 0;\n        /** Vertical position the camera will pan to */\n        _this.destinationY = 0;\n        /** The destination zoom level the camera used during panning */\n        _this.destinationZoom = 1;\n        /** Is the camera currently in a panning state */\n        _this.isPanning = false;\n        /** Last known screen position of the mouse */\n        _this.lastMousePosition = { x: 0, y: 0 };\n        /** List of methods to execute when applying props */\n        _this.propsMethodList = [];\n        /** Inertial values for drag panning */\n        _this.inertia = null;\n        _this.inertiaBuild = 1.5;\n        _this.inertiaDecay = .9;\n        _this.inertiaMax = 100;\n        /**\n         * All data is put into this quad tree so we can query spatial regions for\n         * items\n         */\n        _this.quadTree = null;\n        /**\n         * True if the shift key is currently being held\n         *\n         * Panning is affected by whether or not the shift key is being held down, but\n         * I don't know how yet.\n         */\n        _this.shiftIsDown = false;\n        _this.stop = false;\n        /** The current rendered position and zoom */\n        _this.currentX = 0;\n        _this.currentY = 0;\n        _this.targetZoom = 1;\n        /** The (world) position the focus will zoom in and out of */\n        _this.previousZoomToFit = 0;\n        _this.zoomTargetX = 0;\n        _this.zoomTargetY = 0;\n        /** When this is set, the draw loop continues to run. Used by the draw loop to complete animations */\n        _this.animating = false;\n        _this.labels = [];\n        _this.labelsReady = false;\n        /**\n         * This is the latest labels loading identifier, used to determine if the labels\n         * last loaded matches the labels currently needing to be rendered.\n         */\n        _this.labelsCurrentLoadedId = 0;\n        _this.labelsLoadId = 0;\n        /** When this is set to true, the atlas with the colors is now ready to be referenced */\n        _this.colors = [];\n        _this.colorsReady = false;\n        /** Holds the items currently hovered over */\n        _this.currentHoverItems = [];\n        /** Mouse in stage or not */\n        _this.dragOver = true;\n        /** Flag for detecting whether or not webgl is supported at all */\n        /**\n         * This is the update loop that operates at the requestAnimationFrame speed.\n         * This updates the cameras current position and causes changes over time for\n         * any property that has a start and a destination.\n         */\n        _this.animate = function () {\n            if (_this.stop) {\n                return;\n            }\n            frame_info_1.FrameInfo.lastFrameTime = Date.now();\n            frame_info_1.FrameInfo.framesPlayed.set(_this, (frame_info_1.FrameInfo.framesPlayed.get(_this) || 0) + 1);\n            requestAnimationFrame(function () { return _this.animate(); });\n            var response;\n            var doDraw = false;\n            var didBreak = _this.animatedMethodList.some(function (method) {\n                if (isAnimatedWithOptions(method)) {\n                    if (method.options.labelsReady && method.options.colorsReady) {\n                        if (_this.labelsReady && _this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.labelsReady) {\n                        if (_this.labelsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.colorsReady) {\n                        if (_this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                }\n                else if (isAnimated(method)) {\n                    response = method();\n                }\n                // Update our draw status based on response\n                if (!doDraw) {\n                    doDraw = response.doDraw;\n                }\n                // Stop the system if needed\n                if (response.stop) {\n                    _this.stop = true;\n                }\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            // We prevent any animation loop execution if we did break\n            if (didBreak) {\n                return;\n            }\n            // Make sure all camera related uniforms are up to date\n            _this.updateCameraUniforms();\n            // Handle the deactivation period of mouse interactions by decrementing it\n            // If it's positive\n            if (_this.disableMouseInteraction > 0) {\n                _this.disableMouseInteraction--;\n            }\n            if (doDraw || _this.forceDraw) {\n                _this.forceDraw = false;\n                _this.emitViewport();\n                _this.draw();\n            }\n        };\n        /**\n         * Applies new props injected into this component.\n         *\n         * Applying new props does not entail that a re-render will happen so we\n         * handle application of props as a separate concept. Here we:\n         *\n         * set up zoom targetting and apply quested zoom levels\n         *\n         * Create our quad tree and associate properties to objects if a new dataset\n         * is provided\n         *\n         * Analyze our dataset for interesting and useful metrics such as max and mins\n         * to aid in visualization normalization\n         *\n         * @param {T} props The new properties for this component\n         */\n        _this.applyProps = function (props) {\n            debug('Applying props');\n            var response;\n            _this.propsMethodList.some(function (method) {\n                response = method(props);\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            debugCam('current cam', _this.currentX, _this.currentY, _this.destinationX, _this.destinationY);\n            debugCam('Zoom Target: [%o, %o]', _this.zoomTargetX, _this.zoomTargetY);\n            debugCam('Last Mouse: [%o, %o]', _this.lastMousePosition.x, _this.lastMousePosition.y);\n        };\n        /**\n         * This is the draw method executed from the animation loop. Everytime, this is\n         * called, the webgl surface will be redrawn.\n         */\n        _this.draw = function () {\n            // Draw the 3D scene\n            _this.renderer.render(_this.scene, _this.camera);\n        };\n        /**\n         * This initializes the surface and calls for sub class classes to initialize\n         * their buffers\n         *\n         * @param {HTMLElement} el The DOM element this component is contained in\n         * @param {number} w The width of the rendering\n         * @param {number} h The height of the rendering\n         */\n        _this.init = function (el, w, h) {\n            if (!el || _this.scene) {\n                return;\n            }\n            _this.renderEl = el;\n            if (w === 0 || h === 0) {\n                return;\n            }\n            debug('Initializing GPU objects el: %o width: %o height: %o', el, w, h);\n            // Set up a ctx for our render space\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2.0,\n                width: w,\n                widthHalf: w / 2.0,\n            };\n            // Set up the camera now that the ctx is set up\n            _this.initCamera();\n            // Create a scene so we can add our buffer objects to it\n            // We also add the scene to the window to make threejs tools available\n            window.scene = _this.scene = new three_1.Scene();\n            // Fire our hook for starting up our specific buffer implementation\n            _this.initBuffers();\n            // FINALIZE SET UP\n            // Generate the renderer along with it's properties\n            _this.renderer = new three_1.WebGLRenderer({\n                alpha: _this.props.backgroundColor && (_this.props.backgroundColor.opacity < 1.0),\n                antialias: true,\n                preserveDrawingBuffer: true,\n            });\n            // This sets the pixel ratio to handle differing pixel densities in screens\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            // Applies the background color and establishes whether or not the context supports\n            // Alpha or not\n            if (_this.props.backgroundColor) {\n                _this.renderer.setClearColor(new three_1.Color(_this.props.backgroundColor.r, _this.props.backgroundColor.g, _this.props.backgroundColor.b), _this.props.backgroundColor.opacity);\n            }\n            else {\n                _this.renderer.setClearColor(BACKGROUND_COLOR);\n            }\n            // We render shapes. We care not for culling.\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            // Set up DOM interaction with the renderer\n            var container = el;\n            container.appendChild(_this.renderer.domElement);\n            // Get the gl context for queries and advanced operations\n            _this.gl = _this.renderer.domElement.getContext('webgl');\n            _this.makeDraggable(document.getElementById('div'), _this);\n        };\n        /**\n         * Initializes the camera and any contexts associated with it\n         */\n        _this.initCamera = function () {\n            debug('Initializing Camera');\n            // INITIALIZE THE CAMERA\n            var h = _this.ctx.height;\n            var viewSize = h;\n            var w = _this.ctx.width;\n            var aspectRatio = w / h;\n            var viewport = {\n                aspectRatio: aspectRatio,\n                bottom: -viewSize / 2,\n                far: 10000000,\n                left: (-aspectRatio * viewSize) / 2,\n                near: -100,\n                right: (aspectRatio * viewSize) / 2,\n                top: viewSize / 2,\n                viewSize: viewSize,\n            };\n            _this.camera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.sizeCamera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.camera.position.z = 300;\n            _this.sizeCamera.position.set(0, 0, 300);\n        };\n        /**\n         * This is executed when our rendering surface (the canvas) changes in size in any\n         * way. It will make sure our renderer matches the context to prevent scaling\n         * and other deformations.\n         */\n        _this.resizeContext = function () {\n            var w = _this.props.width;\n            var h = _this.props.height;\n            // See if a renderer even exists yet\n            if (!_this.renderer) {\n                return false;\n            }\n            var renderSize = _this.renderer.getSize();\n            // Check if the resize is needed\n            if (renderSize.width === w && renderSize.height === h) {\n                return false;\n            }\n            debug('RENDERER RESIZE');\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2,\n                width: w,\n                widthHalf: w / 2,\n            };\n            var zoom = _this.camera.zoom;\n            var position = _this.camera.position.clone();\n            _this.initCamera();\n            _this.camera.zoom = zoom;\n            _this.camera.position.set(position.x, position.y, position.z);\n            _this.camera.updateProjectionMatrix();\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            if (_this.props.backgroundColor) {\n                var color = _this.props.backgroundColor;\n                _this.renderer.setClearColor(new three_1.Color(color.r, color.g, color.b), color.opacity < 1.0 ? color.opacity : undefined);\n            }\n            else {\n                _this.renderer.setClearColor(BACKGROUND_COLOR);\n            }\n            return true;\n        };\n        /**\n         * This method handles emitting the viewport and the current visible elements\n         * to the subclass that needs detailed information regarding the viewport.\n         */\n        _this.emitViewport = function () {\n            var tl = _this.screenToWorld(0, 0);\n            var br = _this.screenToWorld(_this.ctx.width, _this.ctx.height);\n            _this.camera.updateMatrixWorld(true);\n            var visible = _this.quadTree.query(new bounds_1.Bounds(tl.x, br.x, tl.y, br.y));\n            _this.onViewport(visible, _this.projection, _this.ctx);\n        };\n        /**\n         * Handles mouse interactions when the mouse is pressed on the canvas. This\n         * engages panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseDown = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = true;\n            _this.distance = 0;\n            _this.onMouseDown();\n        };\n        /**\n         * Handles mouse interactions when the mouse is release or left the canvas. This\n         * stops panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseOut = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            _this.distance = 0;\n            _this.onMouseOut();\n        };\n        /**\n         * Handles mouse interactions when the mouse is released on the canvas. This\n         * stops panning and engages click events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseUp = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            // Handle mouse interaction\n            if (_this.distance < 5) {\n                var hitInside = [];\n                // Circle Interaction\n                var hitItems = _this.quadTree.query(world);\n                for (var _i = 0, hitItems_1 = hitItems; _i < hitItems_1.length; _i++) {\n                    var item = hitItems_1[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                    }\n                }\n                // Tell the listener that the user clicked on some items\n                if (hitInside.length) {\n                    _this.onMouseUp(e, hitInside, mouse, world, _this.projection);\n                }\n                else {\n                    _this.onMouseUp(e, null, mouse, world, _this.projection);\n                }\n            }\n        };\n        /**\n         * Handles mouse interactions when the mouse is moving on the canvas. This\n         * causes panning and hover events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseMove = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            var onMouse = _this.props.onMouse;\n            var zoom = _this.props.zoom;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            _this.distance++;\n            debug('mouse X %o Y %o', mouse.x, mouse.y);\n            // Handle panning\n            if (_this.isPanning) {\n                debug('down and moving ~~');\n                var xDistance = (mouse.x - _this.lastMousePosition.x) / _this.targetZoom;\n                var yDistance = -(mouse.y - _this.lastMousePosition.y) / _this.targetZoom;\n                // Execute the hook to allow subclasses\n                var pan = _this.willPan(xDistance, yDistance);\n                xDistance = pan.x;\n                yDistance = pan.y;\n                _this.destinationX -= xDistance;\n                _this.destinationY -= yDistance;\n                _this.inertia = _this.inertia || { x: 0, y: 0 };\n                if (sign(xDistance) !== sign(_this.inertia.x)) {\n                    _this.inertia.x = 0;\n                }\n                if (sign(yDistance) !== sign(_this.inertia.y)) {\n                    _this.inertia.y = 0;\n                }\n                _this.inertia.x = xDistance * _this.inertiaBuild;\n                _this.inertia.y = yDistance * _this.inertiaBuild;\n                var maxInertia = _this.inertiaMax / zoom;\n                var mag = Math.sqrt(_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y);\n                // Make sure the magnitude of the inertia is less than our max allowed\n                if (mag > maxInertia) {\n                    // Since it's greater, let's confine the inertia's magnitude to the max magnitude\n                    // By normalizing the intertia vector and multilying it by the max\n                    _this.inertia.x = (_this.inertia.x / mag) * maxInertia;\n                    _this.inertia.y = (_this.inertia.y / mag) * maxInertia;\n                }\n            }\n            if (_this.quadTree && !_this.isPanning) {\n                // Empty the last hovered items to populate a new list\n                var currentHoverItems = [];\n                // Handle mouse interaction with items\n                // Interaction with circles\n                var hitItems = _this.quadTree.query(world);\n                var hitInside = [];\n                for (var _i = 0, hitItems_2 = hitItems; _i < hitItems_2.length; _i++) {\n                    var item = hitItems_2[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                        currentHoverItems.push(item);\n                    }\n                }\n                // Inform of all items hit or hovered\n                _this.onMouseHover(hitInside, mouse, world, _this.projection);\n                // Diff the currently hovered items with the old ones to see what is\n                // No longer hit\n                var left = [];\n                for (var _a = 0, _b = _this.currentHoverItems; _a < _b.length; _a++) {\n                    var item = _b[_a];\n                    if (currentHoverItems.indexOf(item) < 0) {\n                        left.push(item);\n                    }\n                }\n                // Inform of all items no longer hovered\n                _this.onMouseLeave(left, mouse, world, _this.projection);\n                _this.currentHoverItems = currentHoverItems;\n            }\n            if (onMouse) {\n                _this.onMouse(mouse, world, _this.isPanning);\n            }\n            _this.lastMousePosition = mouse;\n        };\n        /**\n         * We make the ref application be a declared function so react does not find the need to execute the\n         * application numerous times for a detected changed method\n         *\n         * @param {HTMLElement} n This is the canvas element from the dom\n         */\n        _this.applyRef = function (n) {\n            _this.init(n, _this.props.width, _this.props.height);\n            _this.applyProps(_this.props);\n        };\n        return _this;\n    }\n    /**\n     * This is a hook so subclasses can contribute animated methods to the animation loop and organize the base methods\n     * as desired.\n     *\n     * @param {AnimatedMethodLookup} baseAnimatedMethods The base animated methods referenceable by name\n     * @param {AnimatedMethod[]} orderedBaseAnimatedMethods The base animated methods in their default order for ease of use\n     *\n     * @return {AnimatedMethods[]} The list of animated methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.animatedMethods = function (baseAnimatedMethods, orderedBaseAnimatedMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBaseAnimatedMethods;\n    };\n    /**\n     * This generates the base animated methods lookup.\n     * We do not make these methods a part of the class as this is the base class\n     * We want the start up methods to be inconsequential to sub classes, thus allowing\n     * us to override, sort, or replace the initial methods and have the method get garbage\n     * collected and no longer a part of the object. It is recommended to make the sub classes\n     * actually point to class methods for better clarity\n     *\n     * @return {ANimatedMethodLookup} The base animated methods in a lookup\n     */\n    WebGLSurface.prototype.animatedMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            // Context changes and early checks\n            _a[BaseAnimatedMethods.CONTEXT] = function () {\n                var response = {\n                    break: false,\n                    doDraw: false,\n                };\n                if (_this.resizeContext()) {\n                    response.doDraw = true;\n                }\n                // Quadtree MUST be present to do proper computations\n                if (!_this.quadTree) {\n                    response.break = true;\n                }\n                return response;\n            },\n            // Apply inertia\n            _a[BaseAnimatedMethods.INERTIA] = function () {\n                if (!_this.isPanning) {\n                    if (_this.inertia) {\n                        // Disabled inertia for now\n                        // This.destinationX -= this.inertia.x\n                        // This.destinationY -= this.inertia.y\n                        _this.inertia.x *= _this.inertiaDecay;\n                        _this.inertia.y *= _this.inertiaDecay;\n                        if (_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y < 1) {\n                            _this.inertia = null;\n                        }\n                    }\n                }\n                // A non response\n                return {\n                    doDraw: false,\n                };\n            },\n            // Apply position\n            _a[BaseAnimatedMethods.POSITION] = function () {\n                // If values are transitioned rather than immediately applied, this is\n                // The value you would want the minimum change to be before cutting off\n                // The transition\n                // Const minAdjust = 1 / this.props.zoom\n                // If there is change in X apply the new position to the old\n                // This is where animated values were originally placed and can be placed\n                // Again if a transition is desired\n                var response = {\n                    doDraw: (_this.currentX !== _this.destinationX) || (_this.currentY !== _this.destinationY),\n                };\n                _this.currentX = _this.destinationX;\n                _this.currentY = _this.destinationY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            // Apply zooming\n            _a[BaseAnimatedMethods.ZOOM] = function () {\n                var response = {\n                    doDraw: false,\n                };\n                // Apply Zoom\n                // Const zoomToFitH = this.ctx.width / Math.max(this.quadTree.bounds.width, this.props.viewport.width);\n                // Const zoomToFitV = this.ctx.height / Math.max(this.quadTree.bounds.height, this.props.viewport.height);\n                // Const zoomToFit = Math.min(zoomToFitH, zoomToFitV);\n                var zoomToFit = 1;\n                var destZoom = _this.destinationZoom * zoomToFit;\n                var dZoom = Math.abs(destZoom - _this.targetZoom);\n                var minDZoom = MIN_ZOOM_INCREMENT;\n                var zoomRate = 3;\n                if (dZoom > minDZoom) {\n                    _this.targetZoom = _this.targetZoom + ((destZoom - _this.targetZoom) / zoomRate);\n                    response.doDraw = true;\n                }\n                else if (dZoom !== 0) {\n                    _this.targetZoom = destZoom;\n                    response.doDraw = true;\n                }\n                // Get the zoom target metrics before zooming\n                var zoomTargetX = _this.zoomTargetX;\n                var zoomTargetY = _this.zoomTargetY;\n                var screenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Update the camera zoom level\n                _this.zoomCamera(_this.targetZoom);\n                // After we have zoomed we see how much our target location moved on screen\n                var newScreenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Now we move our screen by the moved delta to keep it exactly where it was before hand\n                var zoomDX = -(newScreenZoomTarget.x - screenZoomTarget.x) / _this.targetZoom;\n                var zoomDY = (newScreenZoomTarget.y - screenZoomTarget.y) / _this.targetZoom;\n                _this.currentX -= zoomDX;\n                _this.currentY -= zoomDY;\n                _this.destinationX -= zoomDX;\n                _this.destinationY -= zoomDY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for subclasses to be able to apply buffer changes that rely\n     * on colors rendered into the atlas after the system has prepped the colors for render.\n     */\n    WebGLSurface.prototype.applyColorBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * This is a hook for subclasses to be able to apply label buffer changes after the system has\n     * prepped the labels for render.\n     */\n    WebGLSurface.prototype.applyLabelBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * @override\n     * This is a hook so subclasses can contribute property application methods to the applyProps process and organize the base methods\n     * as desired.\n     *\n     * @param {ApplyPropsMethodLookup<T>} basePropsMethods The base props methods referenceable by name\n     * @param {ApplyPropsMethod<T>[]} orderedBasePropsMethods The base animated methods in their default order for ease of use\n     *\n     * @return {ApplyPropsMethod<T>[]} The list of property application methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.applyPropsMethods = function (basePropsMethods, orderedBasePropsMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBasePropsMethods;\n    };\n    /**\n     * This is a hook so subclasses can contribute methods to the applying props procedure and organize the base methods\n     * as desired.\n     *\n     * @return {ApplyPropsMethodLookup<T>} The base apply props method that are indexed for ease of reference\n     */\n    WebGLSurface.prototype.applyPropsMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            _a[BaseApplyPropsMethods.INITIALIZE] = function (props) {\n                var backgroundColor = props.backgroundColor, height = props.height, width = props.width;\n                _this.init(_this.renderEl, width, height);\n                if (!_this.renderEl || width === 0 || height === 0) {\n                    return {\n                        break: true,\n                    };\n                }\n                // Get the target for zooming\n                if (_this.camera) {\n                    var world = _this.screenToWorld(_this.lastMousePosition.x, _this.lastMousePosition.y);\n                    _this.zoomTargetX = world.x;\n                    _this.zoomTargetY = world.y;\n                }\n                if (_this.renderer && backgroundColor) {\n                    var oldColor = _this.props.backgroundColor || {\n                        b: BACKGROUND_COLOR.b,\n                        g: BACKGROUND_COLOR.g,\n                        opacity: 1.0,\n                        r: BACKGROUND_COLOR.r,\n                    };\n                    var same = oldColor.r === backgroundColor.r &&\n                        oldColor.g === backgroundColor.g &&\n                        oldColor.b === backgroundColor.b &&\n                        oldColor.opacity === backgroundColor.opacity;\n                    if (!same) {\n                        _this.renderer.setClearColor(new three_1.Color(backgroundColor.r, backgroundColor.g, backgroundColor.b), \n                        // Only if a transparent background is specified should we\n                        // Allow the parameter. We avoid the parameter to ensure\n                        // Transparent mode it not activated unless absolutely necessary\n                        backgroundColor.opacity < 1 ? backgroundColor.opacity : undefined);\n                    }\n                }\n                debug('props', props);\n                return {};\n            },\n            _a[BaseApplyPropsMethods.LABELS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.labels && props.labels !== _this.labels) {\n                    debugLabels('Labels are being comitted to an Atlas %o', props.labels);\n                    // Flag the labels as incapable of rendering\n                    _this.labelsReady = false;\n                    _this.labelsLoadId++;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.labels = props.labels;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.labels)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.labels);\n                    }\n                    var textures = props.labels.map(function (label) { return new atlas_texture_1.AtlasTexture(null, label); });\n                    debugLabels('Creating the atlas for labels based on these textures %o', textures);\n                    _this.atlasManager.createAtlas(_this.atlasNames.labels, textures)\n                        .then(function () {\n                        debugLabels('Labels rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.labels));\n                        _this.forceDraw = true;\n                        _this.labelsCurrentLoadedId++;\n                        // If we are done loading AND we match up with the current load id, then labels\n                        // For the latest labels update are indeed ready for display\n                        if (_this.labelsCurrentLoadedId === _this.labelsLoadId) {\n                            _this.labelsReady = true;\n                        }\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.COLORS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.colors && props.colors !== _this.colors) {\n                    debugColors('Colors are being comitted to an Atlas %o', props.colors);\n                    // Flag the labels as incapable of rendering\n                    _this.colorsReady = false;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.colors = props.colors;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.colors)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.colors);\n                    }\n                    debugColors('Creating the atlas for colors based on these colors %o', _this.colors);\n                    _this.atlasManager.createAtlas(_this.atlasNames.colors, null, _this.colors)\n                        .then(function () {\n                        debugColors('Colors rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.colors));\n                        _this.forceDraw = true;\n                        _this.colorsReady = true;\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.BUFFERCHANGES] = function (props) {\n                // Call the hook to allow sub componentry to have a place to update it's buffers\n                _this.applyBufferChanges(props);\n                // We call the label buffering when the labels are ready to render.\n                // Labels now utilize the color atlas as well, thus requiring colors\n                // To be loaded\n                if (_this.labelsReady && _this.colorsReady) {\n                    debugLabels('labels changed %o', props);\n                    _this.applyLabelBufferChanges(props);\n                }\n                // For resources that only need the color atlas to be ready\n                if (_this.colorsReady) {\n                    _this.applyColorBufferChanges(props);\n                }\n                if (_this.onRender && _this.colorsReady && _this.labelsReady) {\n                    var imageData = _this.renderer.domElement.toDataURL();\n                    _this.onRender(imageData);\n                }\n                return {};\n            },\n            _a[BaseApplyPropsMethods.CAMERA] = function (props) {\n                _this.destinationZoom = props.zoom;\n                // On initialization this should start with some base camera metrics\n                if (props.viewport && props.viewport !== _this.appliedViewport && _this.quadTree) {\n                    debugCam('Applying viewport to camera: %o World Space Bounds: %o Screen context: %o', props.viewport, _this.quadTree.bounds, { width: props.width, height: props.height });\n                    // Position the camera over the mid of the specified viewport\n                    var mid = props.viewport.mid;\n                    _this.currentX = _this.destinationX = mid.x;\n                    _this.currentY = _this.destinationY = mid.y;\n                    // Calculate the zoom level when the input zoom is at 1\n                    var zoomAtOne = 1;\n                    // Calculate the zoom needed for the viewport\n                    var zoomToFitViewH = props.width / props.viewport.width;\n                    var zoomToFitViewV = props.height / props.viewport.height;\n                    var zoomToFit = Math.min(zoomToFitViewH, zoomToFitViewV);\n                    // This adjusts the destination zxoom by a tiny amount so the view will redraw\n                    var microAdjustment = 1.001;\n                    // Make our destination zoom a zoom that will fit the dimensions of the viewport\n                    // Relative to the zoom at one level\n                    _this.destinationZoom = zoomToFit / zoomAtOne;\n                    _this.targetZoom = (_this.destinationZoom * zoomAtOne) * microAdjustment;\n                    // Make sure any zooming that happens occurs over the middle of the initial viewport\n                    _this.zoomTargetX = mid.x;\n                    _this.zoomTargetY = mid.y;\n                    // Make sure mouse position doesn't mess with the zooming focus either\n                    _this.lastMousePosition.x = props.width / 2.0;\n                    _this.lastMousePosition.y = props.height / 2.0;\n                    // Apply the values immediately to the camera\n                    _this.positionCamera(_this.currentX, _this.currentY);\n                    _this.zoomCamera(_this.targetZoom);\n                    _this.updateCameraUniforms();\n                    // We request the calculated zoom level so adjustments on the input can be made\n                    if (props.onZoomRequest) {\n                        props.onZoomRequest(_this.destinationZoom);\n                        debugCam('Requesting zoom level', _this.destinationZoom);\n                    }\n                    // Let's disable mouse interactions for a little bit until the camera has settled into place\n                    var framesToDisable = 10;\n                    _this.disableMouseInteraction = framesToDisable;\n                    _this.appliedViewport = props.viewport;\n                    debugCam('init cam', _this.currentX, _this.currentY);\n                }\n                // Ensure we have our quad tree available even if it is empty\n                if (!_this.quadTree) {\n                    _this.quadTree = new quad_tree_1.QuadTree(0, 1, 1, 0);\n                }\n                return {};\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for sub components to have a location to update their buffers\n     *\n     * @param {T} props This is the next set of props that are going to be applied to this component\n     */\n    WebGLSurface.prototype.applyBufferChanges = function (props) {\n        // NOTE: This will be implemented by base classes\n    };\n    /**\n     * @override\n     * Start the update loop and register any interesting listeners\n     */\n    WebGLSurface.prototype.componentDidMount = function () {\n        this.animate();\n    };\n    /**\n     * @override\n     * This will set up any unchanging context as well as establish the set of methods\n     * that are to be used within constructed method loops.\n     */\n    WebGLSurface.prototype.componentWillMount = function () {\n        /** Create our context bound projection methods for handing to processes that may need them */\n        this.projection = {\n            screenSizeToWorld: this.screenSizeToWorld.bind(this),\n            screenToWorld: this.screenToWorld.bind(this),\n            worldSizeToScreen: this.worldSizeToScreen.bind(this),\n            worldToScreen: this.worldToScreen.bind(this),\n        };\n        /** Generate our applying props methods to execute within our applyProps process */\n        var basePropsMethods = this.applyPropsMethodsBase();\n        this.propsMethodList = this.applyPropsMethods(basePropsMethods, [\n            basePropsMethods[BaseApplyPropsMethods.INITIALIZE],\n            basePropsMethods[BaseApplyPropsMethods.LABELS],\n            basePropsMethods[BaseApplyPropsMethods.COLORS],\n            basePropsMethods[BaseApplyPropsMethods.BUFFERCHANGES],\n            basePropsMethods[BaseApplyPropsMethods.CAMERA],\n        ]);\n        /** Generate our animated methods to execute within our animation loop */\n        var baseAnimatedMethods = this.animatedMethodsBase();\n        this.animatedMethodList = this.animatedMethods(baseAnimatedMethods, [\n            baseAnimatedMethods[BaseAnimatedMethods.CONTEXT],\n            baseAnimatedMethods[BaseAnimatedMethods.INERTIA],\n            baseAnimatedMethods[BaseAnimatedMethods.POSITION],\n            baseAnimatedMethods[BaseAnimatedMethods.ZOOM],\n        ]);\n    };\n    /**\n     * @override\n     * Simply applies the new injected props\n     *\n     * @param {T} props The new properties to be applied to this component\n     */\n    WebGLSurface.prototype.componentWillReceiveProps = function (props) {\n        this.applyProps(props);\n    };\n    /**\n     * @override\n     * Release listeners and stop update loop\n     */\n    WebGLSurface.prototype.componentWillUnmount = function () {\n        this.stop = true;\n        if (this.quadTree) {\n            this.quadTree.destroy();\n        }\n        this.quadTree = null;\n        this.camera = null;\n        this.sizeCamera = null;\n        this.ctx = null;\n        this.renderEl = null;\n        this.renderer = null;\n        this.scene = null;\n        this.atlasManager.destroyAtlas(this.atlasNames.colors);\n        this.atlasManager.destroyAtlas(this.atlasNames.labels);\n        frame_info_1.FrameInfo.framesPlayed.delete(this);\n    };\n    /**\n     * This is a hook allowing sub classes to have a place to initialize their buffers\n     * and materials etc.\n     */\n    WebGLSurface.prototype.initBuffers = function () {\n        // NOTE: This is to be implemented by subclasses\n    };\n    WebGLSurface.prototype.onRender = function (image) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to when the mouse moves. Provides some information\n     * about mouse location and interaction.\n     *\n     * @param {IPoint} mouse Position of the mouse relative to the canvas\n     * @param {IPoint} world Position of the mouse relative to the world space\n     * @param {boolean} isPanning The panning state of the mouse\n     */\n    WebGLSurface.prototype.onMouse = function (mouse, world, isPanning) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse down events\n     */\n    WebGLSurface.prototype.onMouseDown = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse out events\n     */\n    WebGLSurface.prototype.onMouseOut = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse up events and the items that were interacted with in the process\n     *\n     * @param {React.MouseEvent} e The react synthetic event associated with the action\n     * @param {Bounds[]} hitInside The items the mouse interacted with\n     * @param {IPoint} mouse The location of the mouse on the screen\n     * @param {IPoint} world The location of the mouse projected into the world\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseUp = function (e, hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse hovering over an item included in the quadtree\n     *\n     * @param {Bounds[]} hitInside The items hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseHover = function (hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse leaving an item included in the quadtree\n     *\n     * @param {Bounds[]} left The items no longer hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseLeave = function (left, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to changes in the viewport and currently visible items\n     *\n     * @param {Bounds[]} visible\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     * @param {IScreenContext} ctx\n     */\n    WebGLSurface.prototype.onViewport = function (visible, projection, ctx) {\n        // NOTE: For subclasses\n    };\n    WebGLSurface.prototype.makeDraggable = function (element, stage) {\n        element.onmousedown = function (event) {\n            debug('DRAG~');\n            stage.dragOver = false;\n            document.onmousemove = function (event) {\n                debug('Move');\n                var mouseX = event.clientX;\n                var mouseY = event.clientY + window.scrollY;\n                var distanceX = (mouseX - stage.lastMousePosition.x) / stage.targetZoom;\n                var distanceY = (mouseY - stage.lastMousePosition.y) / stage.targetZoom;\n                stage.destinationX -= distanceX;\n                stage.destinationY += distanceY;\n                stage.lastMousePosition.x = mouseX;\n                stage.lastMousePosition.y = mouseY;\n            };\n            document.onmouseup = function () {\n                debug('Up');\n                document.onmousemove = null;\n                stage.isPanning = false;\n                stage.dragOver = true;\n            };\n            document.onmouseover = function () {\n                debug('Over');\n                if (stage.dragOver === false)\n                    stage.isPanning = true;\n            };\n            element.onmouseup = function () {\n                stage.dragOver = true;\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () { return false; };\n        };\n    };\n    /**\n     * Places the camera at a given location in world space\n     *\n     * @param {number} x The x-coordinate for the camera in world space\n     * @param {number} y The x-coordinate for the camera in world space\n     */\n    WebGLSurface.prototype.positionCamera = function (x, y) {\n        if (this.camera) {\n            this.camera.position.set(Math.floor(x), Math.floor(y), this.camera.position.z);\n        }\n    };\n    /**\n     * Projects a screen coordinate to a world coordinate\n     *\n     * @param {number} x The x coord within the screen to project into the world\n     * @param {number} y The y coord within the screen to project into the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenToWorld = function (x, y, obj) {\n        // Get the coordinates in normalized screen space\n        vector.set((x / this.ctx.width) * 2 - 1, -(y / this.ctx.height) * 2 + 1, 0.0);\n        // Unproject the normalized space to the world. It will project\n        // The vector to a REALLY far away z coordinate, but it does not matter\n        // Since we are utilizing an orthographic camera (no perspective distortion)\n        vector.unproject(this.camera);\n        obj = obj || { x: 0, y: 0 };\n        obj.x = vector.x;\n        obj.y = vector.y;\n        return obj;\n    };\n    /**\n     * Projects a size on the screen to the size represented in the world\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenSizeToWorld = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        obj.height = h / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        return obj;\n    };\n    /**\n     * Projects a world coordinate to the screen\n     *\n     * @param {number} x The x coord in the world to project to the screen\n     * @param {number} y The y coord in the world to project to the screen\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {IPoint} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldToScreen = function (x, y, obj) {\n        // This projects to NORMALIZED screen space (-1, 1) range for x and y\n        vector.set(x, y, 0);\n        vector.project(this.camera);\n        // Use the window dimensions to denormalize the vector\n        obj = ramda_1.merge(obj || {}, {\n            x: (vector.x * this.ctx.widthHalf) + this.ctx.widthHalf,\n            y: -(vector.y * this.ctx.heightHalf) + this.ctx.heightHalf,\n        });\n        return obj;\n    };\n    /**\n     * Projects a size within the world to how it would appear on the screen\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldSizeToScreen = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w * this.sizeCamera.zoom;\n        obj.height = h * this.sizeCamera.zoom;\n        return obj;\n    };\n    /**\n     * Sets the zoom level the camera will view the world with\n     *\n     * @param {number} zoom The zoom level. Must be > 0\n     */\n    WebGLSurface.prototype.zoomCamera = function (zoom) {\n        this.camera.zoom = zoom;\n        this.sizeCamera.zoom = zoom;\n        this.camera.updateProjectionMatrix();\n        this.sizeCamera.updateProjectionMatrix();\n    };\n    /**\n     * This is a hook allowing a sub class to update uniforms when the camera is changed in\n     * any way\n     */\n    WebGLSurface.prototype.updateCameraUniforms = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * @override\n     * Only re-render if the dimensions of the component have changed. All other\n     * internal render updates are handled internally\n     *\n     * @param {T} nextProps The next properties injected\n     */\n    WebGLSurface.prototype.shouldComponentUpdate = function (nextProps) {\n        return this.props.width !== nextProps.width || this.props.height !== nextProps.height;\n    };\n    /**\n     * Hook to allow subclasses some control over panning distances\n     *\n     * @param {number} distanceX The distance to pan in the x direction\n     * @param {number} distanceY The distance to pan in the y direction\n     *\n     * @return {Vector3} The vector indicating the direction to pan\n     */\n    WebGLSurface.prototype.willPan = function (distanceX, distanceY) {\n        return new three_1.Vector3(distanceX, distanceY, 0.0);\n    };\n    // -----[ Render ]---------------------------------------------\n    //\n    // In a React app, it's nice to put the render function at the bottom of the\n    // File\n    /**\n     * This should only attempt rendering when the canvas DOM element needs to be resized.\n     * You will note shouldComponentUpdate helps facilitate this.\n     */\n    WebGLSurface.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, width = _a.width, height = _a.height;\n        if (!webgl_stat_1.WebGLStat.WEBGL_SUPPORTED) {\n            return React.createElement(\"div\", null, this.props.children || 'Web GL not supported');\n        }\n        return (React.createElement(\"div\", { id: \"div\", onMouseDown: this.handleMouseDown, onMouseOut: this.handleMouseOut, onMouseUp: this.handleMouseUp, onMouseLeave: this.handleMouseOut, onMouseMove: this.handleMouseMove, onDoubleClick: function (e) {\n                if (_this.props.onDoubleClick) {\n                    _this.props.onDoubleClick(e);\n                }\n            }, style: { position: 'relative', width: width, height: height } },\n            React.createElement(\"div\", { ref: this.applyRef })));\n    };\n    return WebGLSurface;\n}(React.Component));\nexports.WebGLSurface = WebGLSurface;\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_29__;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(32);\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_33__;\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(35));\n__export(__webpack_require__(36));\n__export(__webpack_require__(4));\n__export(__webpack_require__(37));\n__export(__webpack_require__(38));\n__export(__webpack_require__(39));\n__export(__webpack_require__(40));\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBufferAnts = (function (_super) {\n    __extends(SharedControlCurvedLineBufferAnts, _super);\n    function SharedControlCurvedLineBufferAnts() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBufferAnts.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'marching',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBufferAnts.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var marchingAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        var antLength;\n        var antGap;\n        var antSpeed;\n        var controlPoint;\n        var controlRef;\n        // We can not accurately send very large numbers via float point into the attributes\n        // So we trim down our time sent to the attribute down to a number that is less than\n        // 16,777,217 which means we can only reliably grab the last 7 digits of the date's time\n        var antStartTime = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            // We will not render the curved line with this buffer if the marching ants are not provided\n            if (!curvedLine.marchingAnts) {\n                console.error('Attempted to render a curved line shape with a marching ant buffer but provided no marching ant metrics. This curved line shape will be skipped', curvedLine);\n                return \"continue\";\n            }\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            antGap = curvedLine.marchingAnts.gapLength;\n            antSpeed = curvedLine.marchingAnts.speed;\n            antLength = curvedLine.marchingAnts.strokeLength + curvedLine.marchingAnts.gapLength;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos, marching, mpos, controlPick, cpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[cpos] = controlRef;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                marching[mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++cpos] = controlRef;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBufferAnts;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBufferAnts = SharedControlCurvedLineBufferAnts;\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineColorsBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineColorsBuffer, _super);\n    function SharedControlCurvedLineColorsBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'colorPicks',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'timing',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var uniforms;\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var timingAttributeSize = 2;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorStartStop;\n        var colorEnd;\n        var colorEndStop;\n        var alpha;\n        var startTime;\n        var duration;\n        var controlRef;\n        var controlPoint;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorEnd = curvedLine.endColor.base.colorIndex;\n            colorEndStop = curvedLine.endColorStop.base.colorIndex;\n            colorStart = curvedLine.startColor.base.colorIndex;\n            colorStartStop = curvedLine.startColorStop.base.colorIndex;\n            duration = curvedLine.duration;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.currentStart;\n            p2 = curvedLine.currentEnd;\n            startTime = curvedLine.startTime;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colorPicks, cpos, controlPick, ctpos, timing, tpos, normals, npos, endPoints, epos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                controlPick[ctpos] = controlRef;\n                cpos += colorAttributeSize;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[wpos] = halfWidthSize;\n                normals[npos] = 1;\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                tpos += timingAttributeSize;\n                // TR\n                colorPicks[cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[tpos] = startTime;\n                timing[++tpos] = duration;\n                // BR\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // TL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // BL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++ctpos] = controlRef;\n            }, \n            // We force updates for this buffer since it has animated properties\n            // Such as currentStartStop and currentEndStop which calculates\n            // Animations on the CPU side.\n            true);\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineColorsBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineColorsBuffer = SharedControlCurvedLineColorsBuffer;\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineBuffer, _super);\n    function SharedControlCurvedLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBuffer.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        var controlPoint;\n        var controlRef;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos, controlPick, cpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[cpos] = controlRef;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++cpos] = controlRef;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBuffer = SharedControlCurvedLineBuffer;\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This ONLY supports a single color\n */\nvar SimpleStaticBezierLineBuffer = (function (_super) {\n    __extends(SimpleStaticBezierLineBuffer, _super);\n    function SimpleStaticBezierLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticBezierLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0, 0],\n                name: 'controlPoint',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticBezierLineBuffer.prototype.update = function (shapeBuffer) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var color;\n        var alpha;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            color = curvedLine.startColor.base.color;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colors, cpos, normals, npos, endPoints, epos, controlPoints, copos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                cpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticBezierLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticBezierLineBuffer = SimpleStaticBezierLineBuffer;\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\nvar SimpleStaticLabelBuffer = (function (_super) {\n    __extends(SimpleStaticLabelBuffer, _super);\n    function SimpleStaticLabelBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLabelBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 1],\n                name: 'texCoord',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'size',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0, 0],\n                name: 'anchor',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLabelBuffer.prototype.update = function (shapeBuffer, atlasManager, startFade, endFade, labelMaxSize) {\n        // Make some constants and props for our buffer update loop\n        var numVerticesPerQuad = 6;\n        var label;\n        var texture;\n        var color;\n        var alpha;\n        var anchor;\n        var labelSize;\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].color;\n            var colorBase = colorRef.base;\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            atlas.needsUpdate = true;\n            if (startFade || endFade || labelMaxSize) {\n                material = this.bufferItems.system.material;\n                uniforms = material.uniforms;\n                if (startFade)\n                    uniforms.startFade.value = startFade;\n                if (endFade)\n                    uniforms.endFade.value = endFade;\n                if (labelMaxSize)\n                    uniforms.maxLabelSize.value = labelMaxSize;\n            }\n        }\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        var updated = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this.bufferItems, numVerticesPerQuad, shapeBuffer.length, function (i, positions, ppos, colors, cpos, texCoords, tpos, sizes, spos, anchors, apos) {\n            label = shapeBuffer[i];\n            texture = label.rasterizedLabel;\n            color = label.color.base;\n            alpha = label.color.base.opacity;\n            anchor = {\n                x: label.getLocation().x + label.getSize().width * Math.cos(label.getRotation()),\n                y: label.getLocation().y + label.getSize().width * Math.sin(label.getRotation()),\n            };\n            labelSize = label.getSize();\n            // Make sure the label is updated with it's latest metrics\n            label.update();\n            // Copy first vertex twice for intro degenerate tri\n            positions[ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            texCoords[tpos] = texture.atlasTR.x;\n            texCoords[++tpos] = texture.atlasTR.y;\n            texCoords[++tpos] = alpha;\n            colors[cpos] = color.colorIndex;\n            sizes[spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // TR\n            positions[++ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasTR.x;\n            texCoords[++tpos] = texture.atlasTR.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BR\n            positions[++ppos] = label.BR.x;\n            positions[++ppos] = label.BR.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBR.x;\n            texCoords[++tpos] = texture.atlasBR.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // TL\n            positions[++ppos] = label.TL.x;\n            positions[++ppos] = label.TL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasTL.x;\n            texCoords[++tpos] = texture.atlasTL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BL\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBL.x;\n            texCoords[++tpos] = texture.atlasBL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // Copy last vertex again for degenerate tri\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBL.x;\n            texCoords[++tpos] = texture.atlasBL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n        });\n        this.bufferItems.geometry.setDrawRange(0, numVerticesPerQuad * shapeBuffer.length);\n        return updated;\n    };\n    return SimpleStaticLabelBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLabelBuffer = SimpleStaticLabelBuffer;\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\nvar SimpleStaticLineBuffer = (function (_super) {\n    __extends(SimpleStaticLineBuffer, _super);\n    function SimpleStaticLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLineBuffer.prototype.update = function (shapeBuffer) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        var needsUpdate = false;\n        var numVerticesPerSegment = 6;\n        var colorAttributeSize = 4;\n        var stripPos = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var TR;\n        var BR;\n        var TL;\n        var BL;\n        var color;\n        var alpha;\n        var _loop_1 = function (curvedLine) {\n            var strip = curvedLine.getTriangleStrip();\n            color = curvedLine.startColor.base.color;\n            alpha = curvedLine.startColor.base.opacity;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, strip.length / 4, function (i, positions, ppos, colors, cpos) {\n                stripPos = i * 4;\n                TR = strip[stripPos];\n                BR = strip[stripPos + 1];\n                TL = strip[stripPos + 2];\n                BL = strip[stripPos + 3];\n                // 1\n                positions[ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n                // 2\n                positions[++ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 3\n                positions[++ppos] = BR.x;\n                positions[++ppos] = BR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 4\n                positions[++ppos] = TL.x;\n                positions[++ppos] = TL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 5\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 6\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n            });\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLineBuffer = SimpleStaticLineBuffer;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(42));\n__export(__webpack_require__(43));\n__export(__webpack_require__(44));\n__export(__webpack_require__(21));\n__export(__webpack_require__(45));\n__export(__webpack_require__(46));\n__export(__webpack_require__(15));\n__export(__webpack_require__(24));\n__export(__webpack_require__(47));\n__export(__webpack_require__(48));\n__export(__webpack_require__(13));\n__export(__webpack_require__(8));\n__export(__webpack_require__(17));\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines a reference to a color that has been rendered to a texture\n * (See AtlasColor). This exposes the only properties that MAY be utilized\n * in a shader to modify the existing values without altering what is rendered\n * on the texture.\n */\nvar ReferenceColor = (function () {\n    /**\n     * Creates an instance of ReferenceColor.\n     *\n     * @param {AtlasColor} base The color to be based off of\n     */\n    function ReferenceColor(base) {\n        this.base = base;\n    }\n    return ReferenceColor;\n}());\nexports.ReferenceColor = ReferenceColor;\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar easing_1 = __webpack_require__(10);\nvar frame_info_1 = __webpack_require__(9);\nvar interpolation_1 = __webpack_require__(11);\nvar curved_line_shape_1 = __webpack_require__(21);\n/**\n * This represents curved lines and what it would take to animate various properties.\n * While this provides helpers to aid in animating the properties, it is up to\n * buffers, shaders and materials to render those changes appropriately.\n */\nvar AnimatedCurvedLineShape = (function (_super) {\n    __extends(AnimatedCurvedLineShape, _super);\n    function AnimatedCurvedLineShape(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This defines the suggested easing for the animation for any of\n         * the values.\n         */\n        _this.easing = easing_1.linear;\n        _this._startColorChange = new three_1.Color(0, 0, 0);\n        _this._endColorChange = new three_1.Color(0, 0, 0);\n        /** The starting end point's destination */\n        _this.startStop = { x: 0, y: 0 };\n        _this.endStop = { x: 0, y: 0 };\n        /**\n         * This calculates the current start color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentStartColor = new three_1.Color(0, 0, 0);\n        /**\n         * This calculates the current end color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentEndColor = new three_1.Color(0, 0, 0);\n        if (options) {\n            _this.startStop = options.startStop || { x: 0, y: 0 };\n            _this.endStop = options.endStop || { x: 0, y: 0 };\n            if (options.startColorStop) {\n                _this.startColorStop = options.startColorStop;\n            }\n            if (options.endColorStop) {\n                _this.endColorStop = options.endColorStop;\n            }\n        }\n        return _this;\n    }\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"startColorStop\", {\n        get: function () {\n            return this._startColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._startColorStop = value;\n            this._startColorChange.r = newBase.r - startBase.r;\n            this._startColorChange.g = newBase.g - startBase.g;\n            this._startColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"endColorStop\", {\n        get: function () {\n            return this._endColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._endColorStop = value;\n            this._endColorChange.r = newBase.r - startBase.r;\n            this._endColorChange.g = newBase.g - startBase.g;\n            this._endColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStartColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var startBase = this.startColor.base.color;\n            this._currentStartColor.r = this.easing(time, startBase.r, this._startColorChange.r, this.duration);\n            this._currentStartColor.g = this.easing(time, startBase.g, this._startColorChange.g, this.duration);\n            this._currentStartColor.b = this.easing(time, startBase.b, this._startColorChange.b, this.duration);\n            return this._currentStartColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEndColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var endBase = this.endColor.base.color;\n            this._currentEndColor.r = this.easing(time, endBase.r, this._endColorChange.r, this.duration);\n            this._currentEndColor.g = this.easing(time, endBase.g, this._endColorChange.g, this.duration);\n            this._currentEndColor.b = this.easing(time, endBase.b, this._endColorChange.b, this.duration);\n            return this._currentEndColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStart\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            var newStart = interpolation_1.circular(easedTime, this.start, this.startStop, this.controlPoints[1]);\n            return newStart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEnd\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            // Apply the circular interpolation to the points\n            return interpolation_1.circular(easedTime, this.end, this.endStop, this.controlPoints[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimatedCurvedLineShape;\n}(curved_line_shape_1.CurvedLineShape));\nexports.AnimatedCurvedLineShape = AnimatedCurvedLineShape;\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = __webpack_require__(7);\nvar circle_1 = __webpack_require__(23);\n/**\n * Defines a circular shape that can be drawn\n */\nvar CircleShape = (function (_super) {\n    __extends(CircleShape, _super);\n    /**\n     * Sets the properties of the shape to be drawn\n     *\n     * @param x Center of the circle\n     * @param y Center of the circle\n     * @param r The radius of the circle\n     * @param color The color of the circle\n     * @param color The color within the inner radius of the circle\n     * @param innerR The inner radius of the circle\n     * @param d A data object to associate with this circle\n     */\n    function CircleShape(x, y, r, color, innerColor, innerR, d) {\n        var _this = _super.call(this, x, y, r, d) || this;\n        // Color\n        _this.r = 0;\n        _this.g = 0;\n        _this.b = 0;\n        _this.a = 0;\n        // Inner radius color\n        _this.r2 = 0;\n        _this.g2 = 0;\n        _this.b2 = 0;\n        _this.a2 = 0;\n        // Other properties\n        _this.alpha = 0;\n        _this.innerRadius = 0;\n        _this.ringWidth = 0;\n        _this.ringPad = 0;\n        _this.outline = false;\n        if (color) {\n            // FIXME: This is solving a bizarre potential race condition (or other voodoo) where the numbers are not being\n            // Applied correctly to this object when applying the d3 color object properties to this.\n            var r_1 = color.r, g = color.g, b = color.b, opacity = color.opacity;\n            _this.setOuterColor({ r: r_1, g: g, b: b, opacity: opacity });\n        }\n        if (innerR === undefined) {\n            innerR = 0;\n        }\n        _this.innerRadius = innerR;\n        if (innerColor) {\n            _this.setInnerColor(innerColor);\n        }\n        return _this;\n    }\n    /**\n     * Sets the color of the outer drawn radius\n     *\n     * @param color\n     */\n    CircleShape.prototype.setOuterColor = function (color) {\n        var r = color.r, g = color.g, b = color.b, opacity = color.opacity;\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = opacity;\n    };\n    /**\n     * Sets the color of the inner drawn radius\n     *\n     * @param color\n     */\n    CircleShape.prototype.setInnerColor = function (color) {\n        this.r2 = color.r;\n        this.g2 = color.g;\n        this.b2 = color.b;\n        this.a2 = color.opacity;\n    };\n    /**\n     * Clones this instance of the circle shape and creates a new instance of a circle shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this circleshape\n     */\n    CircleShape.prototype.clone = function (newProperties) {\n        return Object.assign(new CircleShape(this._centerX, this._centerY, this._radius, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.innerRadius, this.d), this, newProperties);\n    };\n    /**\n     * Clones this instance of the circle shape and creates a new instance of a circle shape that\n     * is identical to this one. This will perform the clone but will change the data type\n     * associated with the circle in the cloned instance\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this circleshape\n     */\n    CircleShape.prototype.cloneWithData = function (newProperties) {\n        return Object.assign(new CircleShape(this._centerX, this._centerY, this._radius, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.innerRadius), this, newProperties);\n    };\n    return CircleShape;\n}(circle_1.Circle));\nexports.CircleShape = CircleShape;\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = __webpack_require__(7);\nvar line_1 = __webpack_require__(5);\nvar line_shape_1 = __webpack_require__(24);\n/**\n * This defines an edge that can be drawn.\n * This type of edge is a quad with distorted ends. The quad will represent a\n * line with each end having potentially different sizes thus giving a four sided\n * polygon rather than a parallelogram.\n *\n * The edge shape also doubles up as a simple line shape should it be desired to\n * render differently.\n */\nvar EdgeShape = (function (_super) {\n    __extends(EdgeShape, _super);\n    /**\n     * Constructor with basic parameters to declare an edge\n     *\n     * @param p1 The point the edge begins at\n     * @param p2 The point the edge terminates at\n     * @param d The data associated with the edge\n     * @param p1Col The color at the start point\n     * @param p2Col The color at the end point\n     * @param p1Width The width at the start point. Example: if you specify 4, then\n     *                the start part of the edge will fan out 2 on either side of the\n     *                start point\n     * @param p2Width The width at the end point. Example: if you specify 4, then\n     *                the end part of the edge will fan out 2 on either side of the\n     *                end point\n     */\n    function EdgeShape(p1, p2, d, p1Col, p2Col, p1Width, p2Width) {\n        var _this = \n        // Set up all of our line shape based metrics\n        _super.call(this, p1, p2, d, p1Col.r, p1Col.g, p1Col.b, p1Col.opacity, p2Col.r, p2Col.g, p2Col.b, p2Col.opacity, p1Width) || this;\n        /** Top left of the quad to generate this edge */\n        _this.tl = { x: 0, y: 0 };\n        /** Bottom left of the quad to generate this edge */\n        _this.bl = { x: 0, y: 0 };\n        /** Top right of the quad to generate this edge */\n        _this.tr = { x: 0, y: 0 };\n        /** Bottom Right of the quad to generate this edge */\n        _this.br = { x: 0, y: 0 };\n        /** The width of the edge at the termination point */\n        _this.endWidth = 1;\n        _this.endWidth = p2Width;\n        _this.setPoints(p1, p2);\n        return _this;\n    }\n    /**\n     * Clones this instance of the edge shape and creates a new instance of an edge shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {EdgeShape} A newly cloned instance of this edgeshape\n     */\n    EdgeShape.prototype.clone = function (newProperties) {\n        return Object.assign(new EdgeShape(this.p1, this.p2, this.d, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.thickness, this.endWidth), this, newProperties);\n    };\n    /**\n     * Algorithm provided by\n     * https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n     * Adapted to Javascript by Chris @ VoidRay co\n     *\n     * Remember the point must be in the same\n     * coordinate system that the edge is using\n     *\n     * @param {number} point The point to test\n     *\n     * @return {boolean} True if the point is inside the edge\n     */\n    EdgeShape.prototype.pointInside = function (point) {\n        var testx = point.x;\n        var testy = point.y;\n        // This is an algortihm to handle any number of points for a polygon. In this\n        // Case our polygon is simply the points that make this fat edge. Note:\n        // The points MUST be in CW order\n        var points = [this.tl, this.tr, this.br, this.bl];\n        var numberVertices = points.length;\n        var isClockwise = false;\n        for (var i = 0, j = numberVertices - 1; i < numberVertices; j = i++) {\n            if (((points[i].y > testy) !== (points[j].y > testy)) &&\n                (testx < (points[j].x - points[i].x) * (testy - points[i].y) /\n                    (points[j].y - points[i].y) + points[i].x)) {\n                isClockwise = !isClockwise;\n            }\n        }\n        return isClockwise;\n    };\n    /**\n     * @override\n     * This sets the two endpoints for this edge and recalculates the bounds\n     * of the edge accordingly.\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    EdgeShape.prototype.setPoints = function (p1, p2) {\n        _super.prototype.setPoints.call(this, p1, p2);\n        if (this.tl) {\n            // Get the distance from the points we will go based on specified widths\n            var p1Dx = this.thickness / 2;\n            var p2Dx = this.endWidth / 2;\n            // Calculate the deltas to get from point to quad edge\n            var p1DeltaX = this.perpendicular.x * p1Dx;\n            var p1DeltaY = this.perpendicular.y * p1Dx;\n            var p2DeltaX = this.perpendicular.x * p2Dx;\n            var p2DeltaY = this.perpendicular.y * p2Dx;\n            // Apply the metrics to our quad points\n            // Start side of the edge\n            this.tl.x = this.p1.x + p1DeltaX;\n            this.tl.y = this.p1.y + p1DeltaY;\n            this.bl.x = this.p1.x - p1DeltaX;\n            this.bl.y = this.p1.y - p1DeltaY;\n            // End side of the edge\n            this.tr.x = this.p2.x + p2DeltaX;\n            this.tr.y = this.p2.y + p2DeltaY;\n            this.br.x = this.p2.x - p2DeltaX;\n            this.br.y = this.p2.y - p2DeltaY;\n            // Create lines for the edges for computations and faster hit detections\n            this.topEdge = new line_1.Line(this.tl, this.tr);\n            this.bottomEdge = new line_1.Line(this.bl, this.br);\n            // Make sure our bounds reflects the entirety of the fat edge\n            this.encapsulatePoints([this.tl, this.tr, this.bl, this.br]);\n        }\n    };\n    return EdgeShape;\n}(line_shape_1.LineShape));\nexports.EdgeShape = EdgeShape;\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n/**\n * Defines an image that can be rendered by the gpu. This is an axis oriented\n * image only (no rotations)\n */\nvar ImageShape = (function (_super) {\n    __extends(ImageShape, _super);\n    /**\n     * Generates a new ImageShape that can be rendered\n     *\n     * @param {AtlasTexture} image The AtlasTexture to use when rendering this image\n     * @param {number} size This is the size of the longest edge of the image while\n     *                      retaining aspect ratio.\n     */\n    function ImageShape(image, size) {\n        var _this = _super.call(this, 0, 0, size, size) || this;\n        /** This is the level of opacity the image will be rendered with */\n        _this.opacity = 1.0;\n        _this.texture = image;\n        _this.size = size;\n        return _this;\n    }\n    Object.defineProperty(ImageShape.prototype, \"size\", {\n        /**\n         * Returns the largest edge of the image\n         */\n        get: function () {\n            return Math.max(this.width, this.height);\n        },\n        /**\n         * This is the size the image will be rendered within World Space. The size\n         * correlates to the largest edge of the image\n         */\n        set: function (val) {\n            if (this.texture.aspectRatio > 1) {\n                this.width = val;\n                this.height = val / this.texture.aspectRatio;\n            }\n            else {\n                this.width = val * this.texture.aspectRatio;\n                this.height = val;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Centers this image on a provided location\n     *\n     * @param {number} x The x coordinate in world space\n     * @param {number} y The y coordinate in world space\n     */\n    ImageShape.prototype.centerOn = function (x, y) {\n        this.x = x - (this.width / 2.0);\n        this.y = y - (this.height / 2.0);\n    };\n    return ImageShape;\n}(bounds_1.Bounds));\nexports.ImageShape = ImageShape;\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\nvar QuadShape = (function (_super) {\n    __extends(QuadShape, _super);\n    function QuadShape(bounds, color) {\n        var _this = _super.call(this, bounds.x, bounds.right, bounds.y, bounds.bottom) || this;\n        _this.r = 1.0;\n        _this.g = 0.0;\n        _this.b = 0.0;\n        _this.a = 1.0;\n        return _this;\n    }\n    return QuadShape;\n}(bounds_1.Bounds));\nexports.QuadShape = QuadShape;\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\n/**\n * Defines a color that is located on an atlas\n */\nvar AtlasColor = (function () {\n    /**\n     * Constructor implementation\n     */\n    function AtlasColor(color, g, b, a) {\n        if (a === void 0) { a = 1.0; }\n        // Value between 1 - 0 for the opacity of the color\n        this.opacity = 1.0;\n        // The pixel width and height of the color rendered onto the atlas\n        // This will always be a 2x2 so the color can be sampled in the middle\n        // For a guaranteed pure color regardless of gl sampling states\n        this.pixelWidth = 2;\n        this.pixelHeight = 2;\n        if (color instanceof three_1.Color) {\n            this.color = color.clone();\n            this.opacity = g === undefined ? 1.0 : g;\n        }\n        else {\n            this.color = new three_1.Color(color, g, b);\n            this.opacity = a;\n        }\n    }\n    return AtlasColor;\n}());\nexports.AtlasColor = AtlasColor;\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(1));\n__export(__webpack_require__(23));\n__export(__webpack_require__(22));\n__export(__webpack_require__(5));\n__export(__webpack_require__(6));\n__export(__webpack_require__(16));\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(51));\n__export(__webpack_require__(52));\n__export(__webpack_require__(3));\n__export(__webpack_require__(53));\n__export(__webpack_require__(10));\n__export(__webpack_require__(9));\n__export(__webpack_require__(54));\n__export(__webpack_require__(11));\n__export(__webpack_require__(18));\n__export(__webpack_require__(25));\n__export(__webpack_require__(14));\n__export(__webpack_require__(19));\n__export(__webpack_require__(26));\n__export(__webpack_require__(20));\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PlayState;\n(function (PlayState) {\n    PlayState[PlayState[\"PLAY\"] = 0] = \"PLAY\";\n    PlayState[PlayState[\"STOP\"] = 1] = \"STOP\";\n})(PlayState || (PlayState = {}));\nvar Animate = (function () {\n    function Animate() {\n    }\n    Animate.animate = function () {\n        if (Animate.playState === PlayState.PLAY) {\n            requestAnimationFrame(Animate.animate);\n        }\n        this.animating.forEach(function (propToItem) {\n            propToItem.forEach(function (animate) {\n                // TODO\n            });\n        });\n    };\n    Animate.cancel = function (container, prop) {\n        // TODO\n    };\n    Animate.value = function (container, prop, start, end, duration, ease) {\n        // TODO\n    };\n    Animate.point = function (container) {\n        // TODO\n    };\n    Animate.start = function () {\n        // TODO\n    };\n    Animate.stop = function () {\n        // TODO\n    };\n    Animate.playState = PlayState.PLAY;\n    Animate.animating = new Map();\n    return Animate;\n}());\nexports.Animate = Animate;\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar multi_shape_buffer_cache_1 = __webpack_require__(25);\nvar PlayState;\n(function (PlayState) {\n    PlayState[PlayState[\"INIT\"] = 0] = \"INIT\";\n    PlayState[PlayState[\"PLAY\"] = 1] = \"PLAY\";\n    PlayState[PlayState[\"STOP\"] = 2] = \"STOP\";\n})(PlayState = exports.PlayState || (exports.PlayState = {}));\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar AnimatedShapeBufferCache = (function (_super) {\n    __extends(AnimatedShapeBufferCache, _super);\n    function AnimatedShapeBufferCache() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.playState = PlayState.INIT;\n        _this.buffer = [];\n        _this.bustCache = true;\n        /**\n         * This is the internal control for managing execution of the animate method\n         */\n        _this.doAnimate = function () {\n            if (_this.playState === PlayState.PLAY) {\n                requestAnimationFrame(_this.doAnimate);\n            }\n            _this.animate();\n        };\n        return _this;\n    }\n    /**\n     * This is the method that will execute with the frame rate. Subclasses can\n     * override this to implement animated changes\n     */\n    AnimatedShapeBufferCache.prototype.animate = function () {\n        // Implemented by subclasses\n    };\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    AnimatedShapeBufferCache.prototype.generate = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Make sure the storage is established before trying to create modifications of any sort\n        this.getStorage(selection);\n        if (this.bustCache) {\n            this.buildCache.apply(this, arguments);\n            this.bustCache = false;\n            if (this.playState === PlayState.INIT) {\n                this.start();\n                requestAnimationFrame(this.doAnimate);\n            }\n        }\n        // We always invalidate and commit all of our buffers for animations\n        this.flagBuffersDirty();\n        // Make sure our buffers are updated so they will commit to vertex buffers\n        this.processDirtyBuffers();\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    AnimatedShapeBufferCache.prototype.buildCache = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Begins executing the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.start = function () {\n        this.playState = PlayState.PLAY;\n    };\n    /**\n     * Ceases the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.stop = function () {\n        this.playState = PlayState.STOP;\n    };\n    return AnimatedShapeBufferCache;\n}(multi_shape_buffer_cache_1.MultiShapeBufferCache));\nexports.AnimatedShapeBufferCache = AnimatedShapeBufferCache;\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Takes a map of the form <T, boolean> and returns an array of the keys,\n * excluding entries who's mapped value is false.\n *\n * @param map The map to convert to a list\n *\n * @return T[] A list of the keys, exluding false mappings\n */\nfunction boolMapToArray(map) {\n    return Array\n        .from(map)\n        .filter(function (item) { return item[1]; })\n        .map(function (item) { return item[0]; });\n}\nexports.boolMapToArray = boolMapToArray;\n/**\n * Defines a selection control for custom types and categories\n */\nvar CustomSelection = (function () {\n    function CustomSelection() {\n        /** This caches the list generation of a selection */\n        this.cachedSelection = new Map();\n        /** Map of the custom categories to the selection state */\n        this.selections = new Map();\n        /** Keeps flags indicating if a selection for a given category has changed or not */\n        this._didSelectionChange = new Map();\n    }\n    /**\n     * Clears out all custom selections for every category\n     */\n    CustomSelection.prototype.clearAllSelections = function () {\n        for (var _i = 0, _a = Array.from(this.selections.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.clearSelection(key);\n        }\n    };\n    /**\n     * Clears the selection for the category specified\n     *\n     * @param {string} category Name of the category of selection\n     */\n    CustomSelection.prototype.clearSelection = function (category) {\n        // We must have selected items to clear the selection\n        if (this.getSelection(category).length) {\n            this.selections.set(category, null);\n            this.cachedSelection.set(category, null);\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Makes an item no longer flaged as selected within the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to remove from being selected\n     */\n    CustomSelection.prototype.deselect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        // See if the item is selected already, if it is, clear the selection and bust caches\n        if (selectionMap && selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, false);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Checks if a selection from a category has been modified\n     *\n     * @param {string} category The selection category to check\n     */\n    CustomSelection.prototype.didSelectionCategoryChange = function (category) {\n        return this._didSelectionChange.get(category);\n    };\n    /**\n     * Checks if ANY selection has changed\n     *\n     * @return {boolean} True if any selection has changed\n     */\n    CustomSelection.prototype.didSelectionChange = function () {\n        return boolMapToArray(this._didSelectionChange).length > 0;\n    };\n    /**\n     * This indicates that updates have taken place to account for selection\n     * changes.\n     */\n    CustomSelection.prototype.finalizeUpdate = function () {\n        for (var _i = 0, _a = Array.from(this._didSelectionChange.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this._didSelectionChange.set(key, false);\n        }\n    };\n    /**\n     * This retrieves a list of the items that are selected\n     *\n     * @param category The selection category to check on\n     *\n     * @return {T} Returns a list of items that are currently selected\n     */\n    CustomSelection.prototype.getSelection = function (category) {\n        if (!this.cachedSelection.get(category)) {\n            var theSelection = this.selections.get(category);\n            if (theSelection) {\n                this.cachedSelection.set(category, boolMapToArray(theSelection));\n            }\n            else {\n                this.cachedSelection.set(category, []);\n            }\n        }\n        return this.cachedSelection.get(category);\n    };\n    /**\n     * Specifies an item to flag as selected for the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.select = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        if (!selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, true);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Specifies an item to toggle it's selection status for the provided category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.toggleSelect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        // Clear the cache for the selection list\n        this.cachedSelection.set(category, null);\n        // Toggle the selection off if already selected\n        if (selectionMap.get(item)) {\n            this.deselect(category, item);\n        }\n        else {\n            this.select(category, item);\n        }\n        // Flag the category of selections as changed\n        this._didSelectionChange.set(category, true);\n    };\n    return CustomSelection;\n}());\nexports.CustomSelection = CustomSelection;\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getFontMetrics(props) {\n    var ctx = props.ctx;\n    var text = props.text;\n    var bboxHeight = props.bboxHeight;\n    var canvasHeight = props.ctx.canvas.height;\n    var baseline = props.baseline || 'alphabetic';\n    var flip = props.flip || false;\n    var drawBaseline = props.drawBaseline || false;\n    var fontFamily = 'Arial, san-serif';\n    var fontSize = 14;\n    if (props.fontFamily) {\n        fontFamily = props.fontFamily;\n    }\n    if (props.fontSize) {\n        fontSize = props.fontSize;\n    }\n    // Setting up the canvas\n    ctx.save(); // Create canvas to use as buffer\n    ctx.font = fontSize + \"px \" + fontFamily;\n    var textWidth = ctx.measureText(text).width;\n    // This keeps font in-screen, measureText().width doesn't\n    // Quite do it in some cases. For instance \"j\", or the letter \"f\"\n    // In the font \"Zapfino\".\n    var offsetx = fontSize * 2;\n    var offsety = fontSize * 2;\n    var cwidth = ctx.canvas.width = Math.round(textWidth + offsetx * 2);\n    var cheight = ctx.canvas.height = canvasHeight ? canvasHeight : Math.round(offsety * 2);\n    if (typeof (baseline) === 'string') {\n        offsety = 0; // Using <canvas> baseline\n        ctx.textBaseline = baseline;\n    }\n    // Ctx.font has to be called twice because resetting the size resets the state\n    if (flip) {\n        ctx.scale(1, -1);\n    }\n    ctx.font = fontSize + \"px \" + fontFamily;\n    ctx.fillText(text, offsetx, (typeof (bboxHeight) === 'number' ? bboxHeight : offsety));\n    // Drawing baseline\n    if (drawBaseline) {\n        ctx.fillRect(0, canvasHeight / 2, ctx.canvas.width, 1);\n    }\n    // Grabbing image data\n    var imageData = ctx.getImageData(0, 0, cwidth, cheight);\n    var data = imageData.data;\n    // Calculating top\n    var top = 0;\n    var pos = data.length;\n    var bottom = 0;\n    var realBottom = 0;\n    var left = 0;\n    var right = 0;\n    while (pos > 0) {\n        if (data[pos + 3]) {\n            pos -= pos % (cwidth * 4); // Back to beginning of the line top = (pos / 4) / cwidth; // calculate pixel position top -= offsety - fontSize; pos = data.length; // exit loop } pos += 4; } // calculating bottom var bottom = 0; var pos = data.length; while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                bottom = (pos / 4) / cwidth;\n                bottom -= offsety - fontSize;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Calculating left\n        left = 0;\n        var col = 0;\n        var row = 0; // Left bounds\n        while (row < cheight && col < cwidth) {\n            var px = data[(row * cwidth * 4) + (col * 4) + 3];\n            if (px) {\n                left = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col++;\n            }\n        }\n        // Calculating right\n        right = 0;\n        col = cwidth;\n        row = 0; // Right bounds\n        while (row < cheight && col > 0) {\n            if (data[(row * cwidth * 4) + (col * 4) + 3]) {\n                right = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col--;\n            }\n        }\n        // Calculating real-bottom\n        realBottom = 0;\n        pos = data.length;\n        while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                realBottom = (pos / 4) / cwidth;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Restoring state\n        ctx.restore();\n    }\n    // Returning raw-metrics\n    return {\n        bottom: realBottom,\n        height: (bottom - top),\n        left: (-left),\n        top: (fontSize - top),\n        width: (right - left),\n    };\n}\nexports.getFontMetrics = getFontMetrics;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 809f95396e7d34890ecd","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"three\"\n// module id = 0\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(left, right, top, bottom) {\n        this.height = 0;\n        this.width = 0;\n        this.x = 0;\n        this.y = 0;\n        if (arguments.length === 4) {\n            this.x = left;\n            this.width = right - left;\n            this.y = top;\n            this.height = top - bottom;\n        }\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        /** The total rectangular surface area of this instance */\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        /** The bottom coordinate for this instance (y + height) */\n        get: function () {\n            return this.y - this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        /** An x, y coordinate pair representing the center of this object */\n        get: function () {\n            return {\n                x: this.x + (this.width / 2),\n                y: this.y - (this.height / 2),\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Check to see if a given point lies within the bounds of this instance\n     *\n     * @param point The point to check\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        if (point.x < this.x) {\n            return false;\n        }\n        if (point.y > this.y) {\n            return false;\n        }\n        if (point.x > this.right) {\n            return false;\n        }\n        if (point.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Copies the properties of the bounds specified\n     *\n     * @param b The bounds whose dimensions we wish to copy\n     */\n    Bounds.prototype.copyBounds = function (b) {\n        this.height = b.height;\n        this.width = b.width;\n        this.x = b.x;\n        this.y = b.y;\n    };\n    /**\n     * Ensure that this object contains the smaller bounds\n     *\n     * This method will not shrink this class, but only grow it as necessary to\n     * fit the destination object\n     *\n     * @param bounds The bounds to encapsulate\n     */\n    Bounds.prototype.encapsulate = function (bounds) {\n        if (bounds.x < this.x) {\n            this.width += this.x - bounds.x;\n            this.x = bounds.x;\n        }\n        if (bounds.y > this.y) {\n            this.height += bounds.y - this.y;\n            this.y = bounds.y;\n        }\n        if (bounds.right > this.right) {\n            this.width = bounds.right - this.x;\n        }\n        if (bounds.bottom < this.bottom) {\n            this.height = this.y - bounds.bottom;\n        }\n    };\n    /**\n     * Ensure that this object contains the provided list of bounds\n     *\n     * This will never shrink or modify the original area covered by this bounds\n     * but will instead stay the same or include the original area plus the specified\n     * list of bounds.\n     *\n     * @param {Bounds<any>[]} bounds The list of bounds objects to encapsulate\n     * @param {boolean} sizeToFirst If this is set, the procedure will start by making this bounds\n     *                              be a clone of the first bounds object in the list\n     */\n    Bounds.prototype.encapsulateBounds = function (bounds, sizeToFirst) {\n        if (sizeToFirst && bounds.length) {\n            this.copyBounds(bounds[0]);\n        }\n        if (bounds.length === 0) {\n            return;\n        }\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        bounds.forEach(function (p) {\n            if (p.x < minX) {\n                minX = p.x;\n            }\n            if (p.right > maxX) {\n                maxX = p.right;\n            }\n            if (p.bottom < minY) {\n                minY = p.bottom;\n            }\n            if (p.y > maxY) {\n                maxY = p.y;\n            }\n        });\n        // Make bounds that encompasses the bounds list, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Grow this class to contain the specified point\n     *\n     * This method will not shrink this instance. It will only grow it as\n     * necessary.\n     *\n     * @param point The point to encapsulate\n     */\n    Bounds.prototype.encapsulatePoint = function (point) {\n        if (point.x < this.x) {\n            this.width += this.x - point.x;\n            this.x = point.x;\n        }\n        if (point.y > this.y) {\n            this.height += point.y - this.y;\n            this.y = point.y;\n        }\n        if (point.x > this.right) {\n            this.width = point.x - this.x;\n        }\n        if (point.y < this.bottom) {\n            this.height = this.y - point.y;\n        }\n    };\n    /**\n     * Efficiently encapsulates a set of points by growing the current dimensions\n     * of the bounds until the points are enclosed. This will perform faster than\n     * running encapsulatePoint for a list of points.\n     *\n     * @param points An array of points that Can be of format {x, y} or [x, y]\n     *\n     * @memberOf Bounds\n     */\n    Bounds.prototype.encapsulatePoints = function (points) {\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        if (points[0] !== undefined && points[0].x) {\n            points.forEach(function (p) {\n                if (p.x < minX) {\n                    minX = p.x;\n                }\n                else if (p.x > maxX) {\n                    maxX = p.x;\n                }\n                if (p.y < minY) {\n                    minY = p.y;\n                }\n                else if (p.y > maxY) {\n                    maxY = p.y;\n                }\n            });\n        }\n        else {\n            points.forEach(function (p) {\n                if (p[0] < minX) {\n                    minX = p[0];\n                }\n                else if (p[0] > maxX) {\n                    maxX = p[0];\n                }\n                if (p[1] < minY) {\n                    minY = p[1];\n                }\n                else if (p[1] > maxY) {\n                    maxY = p[1];\n                }\n            });\n        }\n        // Make bounds that encompasses the points, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Checks to see if another bounds fits in itself.\n     *\n     * @param {Bounds} inner The bounds to test against\n     *\n     * @return {number} int 1 is an exact fit, 2 it fits with space, 0 it doesn't fit\n     */\n    Bounds.prototype.fits = function (inner) {\n        if (this.width === inner.width) {\n            if (this.height === inner.height) {\n                return 1;\n            }\n        }\n        if (this.width >= inner.width) {\n            if (this.height >= inner.height) {\n                return 2;\n            }\n        }\n        return 0;\n    };\n    /**\n     * Check to see if the provided bounds intersects with this instance\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if the other object intersects with this instance\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        if (bounds.right < this.x) {\n            return false;\n        }\n        if (bounds.x > this.right) {\n            return false;\n        }\n        if (bounds.bottom > this.y) {\n            return false;\n        }\n        if (bounds.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Tests if a point is inside this bounds\n     *\n     * @param p The point to test\n     *\n     * @return boolean The point to test\n     */\n    Bounds.prototype.pointInside = function (p) {\n        if (p.x < this.x) {\n            return false;\n        }\n        if (p.y > this.y) {\n            return false;\n        }\n        if (p.x > this.right) {\n            return false;\n        }\n        if (p.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Test function to type check the provided value\n     *\n     * @return True if value is a bounds object\n     */\n    Bounds.isBounds = function (value) {\n        // Falsy values aren't bounds objects\n        if (!value) {\n            return false;\n        }\n        // Direct test for bounds objects\n        if (value instanceof this) {\n            return true;\n        }\n        // Duck-typing check\n        return value &&\n            'containsPoint' in value &&\n            'encapsulate' in value &&\n            'hitTest' in value;\n    };\n    /**\n     * Check if this instance is completely inside the provided bounds\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if this instance is inside the provided bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return (bounds.x <= this.x &&\n            bounds.right >= this.right &&\n            bounds.y >= this.y &&\n            bounds.bottom <= this.bottom);\n    };\n    /**\n     * Generates a Bounds object covering max extents\n     *\n     * @return {Bounds} bounds covering as wide of a range as possible\n     */\n    Bounds.maxBounds = function () {\n        return new Bounds(Number.MIN_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MAX_VALUE);\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/bounds.ts\n// module id = 1\n// module chunks = 0","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/debug/src/browser.js\n// module id = 2\n// module chunks = 0","\"use strict\";\n/**\n * This class and set of methods is provided to attempt to create as efficient as possible\n * methods for updating large vertex buffers with values. The first portion of the file is\n * a list of methods and registers. This is to prevent any instantiation needed for the methods\n * and registers to exist. Also, the methods have no useable parent scope to ensure nothing like\n * a 'this' is used. These methods utilize the registers and their own simple loops to pound\n * through large amounts of information while providing capabilities to edit vertices in batches.\n *\n * You will also notice there are many many similar methods with just a single extra parameter\n * here and there. This is to prevent ANY calculations on trying to determine a proper parameter set\n * while also making method calls directly without any .call or .apply.\n *\n * The number of update methods is how many differing attributes are supported. If you need more supported\n * attributes add an updateBufferN method and provide the required attributes. Insert the logic in the EXACT\n * pattern seen in the other methods. DO NOT attempt to add additional logic lest the performance be something\n * terrible.\n *\n * The BufferUtil class makes use of these methods and registers. It also provides some very handy methods\n * for working with your large buffers.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar debugGenerator = require('debug');\nvar debug = require('debug')('WebGLSurface:BufferUtil');\nvar TriangleOrientation;\n(function (TriangleOrientation) {\n    // The triangles points are clockwise\n    TriangleOrientation[TriangleOrientation[\"CW\"] = 0] = \"CW\";\n    // The triangles points are Counter clockwise\n    TriangleOrientation[TriangleOrientation[\"CCW\"] = 1] = \"CCW\";\n    // The triangles points are linear, thus degenerate\n    TriangleOrientation[TriangleOrientation[\"DEGENERATE\"] = 2] = \"DEGENERATE\";\n})(TriangleOrientation = exports.TriangleOrientation || (exports.TriangleOrientation = {}));\nvar AttributeSize;\n(function (AttributeSize) {\n    AttributeSize[AttributeSize[\"ONE\"] = 0] = \"ONE\";\n    AttributeSize[AttributeSize[\"TWO\"] = 1] = \"TWO\";\n    AttributeSize[AttributeSize[\"THREE\"] = 2] = \"THREE\";\n    AttributeSize[AttributeSize[\"FOUR\"] = 3] = \"FOUR\";\n})(AttributeSize = exports.AttributeSize || (exports.AttributeSize = {}));\n/**\n * These are for fast look ups of the default values provided\n * Doing this fashion avoids array look ups in the defaults values\n */\nvar defaultsHolder0 = 0;\nvar defaultsHolder1 = 0;\nvar defaultsHolder2 = 0;\nvar defaultsHolder3 = 0;\n/**\n * These are for fast look ups of attribute buffers that are going\n * through the update process. We do everything to mitigate array look ups\n * when and where we can\n */\nvar attrRegister0 = [];\nvar attrRegister1 = [];\nvar attrRegister2 = [];\nvar attrRegister3 = [];\nvar attrRegister4 = [];\nvar attrRegister5 = [];\nvar attrRegister6 = [];\nvar attrRegister7 = [];\nvar attrRegister8 = [];\nvar attrRegister9 = [];\nvar attrRegister10 = [];\nvar attrIndex0 = 0;\nvar attrIndex1 = 0;\nvar attrIndex2 = 0;\nvar attrIndex3 = 0;\nvar attrIndex4 = 0;\nvar attrIndex5 = 0;\nvar attrIndex6 = 0;\nvar attrIndex7 = 0;\nvar attrIndex8 = 0;\nvar attrIndex9 = 0;\nvar attrIndex10 = 0;\nvar attrIndexIncr0 = 0;\nvar attrIndexIncr1 = 0;\nvar attrIndexIncr2 = 0;\nvar attrIndexIncr3 = 0;\nvar attrIndexIncr4 = 0;\nvar attrIndexIncr5 = 0;\nvar attrIndexIncr6 = 0;\nvar attrIndexIncr7 = 0;\nvar attrIndexIncr8 = 0;\nvar attrIndexIncr9 = 0;\nvar attrIndexIncr10 = 0;\n/** This is used to define a starting batch location to aid in continuing batch updates */\nvar lastBatchRegister = 0;\nvar isStreamUpdatingRegister = false;\n/**\n * This takes our list of attribute buffers and applies them to the registers for rapid lookups\n *\n * @param {number[][]} attributeBuffers The buffers for each attribute to be updated\n * @param {number[]} incrementValues How much each batch increments it's lookup index\n */\nfunction applyAttributeRegisters(attributeBuffers, incrementValues) {\n    attrRegister0 = attributeBuffers[0];\n    attrRegister1 = attributeBuffers[1];\n    attrRegister2 = attributeBuffers[2];\n    attrRegister3 = attributeBuffers[3];\n    attrRegister4 = attributeBuffers[4];\n    attrRegister5 = attributeBuffers[5];\n    attrRegister6 = attributeBuffers[6];\n    attrRegister7 = attributeBuffers[7];\n    attrRegister8 = attributeBuffers[8];\n    attrRegister9 = attributeBuffers[9];\n    attrRegister10 = attributeBuffers[10];\n    attrIndexIncr0 = incrementValues[0];\n    attrIndexIncr1 = incrementValues[1];\n    attrIndexIncr2 = incrementValues[2];\n    attrIndexIncr3 = incrementValues[3];\n    attrIndexIncr4 = incrementValues[4];\n    attrIndexIncr5 = incrementValues[5];\n    attrIndexIncr6 = incrementValues[6];\n    attrIndexIncr7 = incrementValues[7];\n    attrIndexIncr8 = incrementValues[8];\n    attrIndexIncr9 = incrementValues[9];\n    attrIndexIncr10 = incrementValues[10];\n}\n/**\n * The following methods are targetted at executing the update accessor with varying number\n * of parameters while mitigating array look ups.\n *\n * @param {number} numBatches The number of batches to execute\n * @param {Function} updateAccessor The accessor function that will update the buffer values\n */\nfunction updateBuffer1(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0);\n    }\n}\nfunction updateBuffer2(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1);\n    }\n}\nfunction updateBuffer3(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2);\n    }\n}\nfunction updateBuffer4(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3);\n    }\n}\nfunction updateBuffer5(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4);\n    }\n}\nfunction updateBuffer6(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5);\n    }\n}\nfunction updateBuffer7(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6);\n    }\n}\nfunction updateBuffer8(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7);\n    }\n}\nfunction updateBuffer9(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8);\n    }\n}\nfunction updateBuffer10(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        attrIndex9 = i * attrIndexIncr9;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8, attrRegister9, attrIndex9);\n    }\n}\nfunction updateBuffer11(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        attrIndex9 = i * attrIndexIncr9;\n        attrIndex10 = i * attrIndexIncr10;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8, attrRegister9, attrIndex9, attrRegister10, attrIndex10);\n    }\n}\n/**\n * This takes the defaults array provided and loads them into our default\n * lookup values\n *\n * @param {number[]} defaults The array with the default values in them for our buffer attribute\n */\nfunction applyDefaultsHolders(defaults) {\n    defaultsHolder0 = defaults[0] || 0;\n    defaultsHolder1 = defaults[1] || 0;\n    defaultsHolder2 = defaults[2] || 0;\n    defaultsHolder3 = defaults[3] || 0;\n}\n/**\n * The following methods are rapid ways of populating the buffer without\n * setting up a generic loop. This saves on performance by not creating a loop\n * nor allocating the variables necessary for the generic loop.\n *\n * @param {Float32Array} buffer The buffer to populate\n * @param {number} start The index the data should be populated into\n */\nfunction fillSize1(buffer, start) {\n    buffer[start] = defaultsHolder0;\n}\nfunction fillSize2(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n}\nfunction fillSize3(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n}\nfunction fillSize4(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n    buffer[++start] = defaultsHolder3;\n}\n/**\n * This is a quick lookup to find the correct filler method for the given attribute size\n */\nvar fillMethodLookUp = (_a = {},\n    _a[AttributeSize.ONE] = fillSize1,\n    _a[AttributeSize.TWO] = fillSize2,\n    _a[AttributeSize.THREE] = fillSize3,\n    _a[AttributeSize.FOUR] = fillSize4,\n    _a);\nvar updateBufferLookUp = {\n    1: updateBuffer1,\n    2: updateBuffer2,\n    3: updateBuffer3,\n    4: updateBuffer4,\n    5: updateBuffer5,\n    6: updateBuffer6,\n    7: updateBuffer7,\n    8: updateBuffer8,\n    9: updateBuffer9,\n    10: updateBuffer10,\n    11: updateBuffer11,\n};\n/**\n * This provides methods for handling common buffer tasks such as construction\n * and population.\n */\nvar BufferUtil = (function () {\n    function BufferUtil() {\n    }\n    /**\n     * This places our updateBuffer into a mode where the updates start at index 0 of the\n     * buffer. Subsequent calls will start where the previous call left off. This lets\n     * you stream in updates to the buffer rather than just update the entire buffer\n     * all at once.\n     */\n    BufferUtil.beginUpdates = function () {\n        isStreamUpdatingRegister = true;\n        lastBatchRegister = 0;\n    };\n    /**\n     * This takes the buffer items and cleans up their use within memory as best as possible.\n     *\n     * @param bufferItems\n     */\n    BufferUtil.dispose = function (buffers) {\n        if (buffers) {\n            buffers.forEach(function (bufferItems) {\n                bufferItems.attributes = null;\n                bufferItems.currentData = null;\n                bufferItems.geometry.dispose();\n                bufferItems.geometry = null;\n                bufferItems.system = null;\n            });\n        }\n    };\n    /**\n     * This stops updates streaming into the buffers and makes it where an update\n     * will always just start at the beginning of the buffer.\n     */\n    BufferUtil.endUpdates = function () {\n        var totalBatches = lastBatchRegister;\n        isStreamUpdatingRegister = false;\n        lastBatchRegister = 0;\n        return totalBatches;\n    };\n    /**\n     * It is often needed to examine a given buffer and see how the triangles are packed in.\n     * This is a common debugging need and will speed up debugging significantly.\n     *\n     * @param {IBufferItems<T, U>} bufferItems This is the buffer whose structure we want\n     *                                         to examine.\n     */\n    BufferUtil.examineBuffer = function (bufferItems, message, debugNamespace) {\n        // Get the appropriate debug namespace\n        var debugBuffer = debugGenerator(debugNamespace);\n        // Quick quit if the debugger is not enabled\n        if (!debugBuffer.enabled) {\n            return;\n        }\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // Get the attributes by name out of the three js buffer\n        var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n        // Get the raw number buffers\n        var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n        // This will store all of the examined triangles for easy viewing\n        var triangles = [];\n        if (bufferItems.system.drawMode === three_1.TrianglesDrawMode) {\n            var currentVertex_1 = 0;\n            var attrSize_1 = 0;\n            var currentIndex_1 = 0;\n            var length_1 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_1 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_2 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_1 = attr.size + 1;\n                        currentIndex_1 = currentVertex_1 * attrSize_1;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_1, currentIndex_1 + attrSize_1);\n                    });\n                    // Move to the next vertex\n                    currentVertex_1++;\n                };\n                // Each new triangle is a culmination of three vertices which are packed in\n                // The buffer with no vertex sharing\n                for (var i = 0; i < 3; ++i) {\n                    _loop_2(i);\n                }\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_1 < length_1) {\n                _loop_1();\n            }\n        }\n        else if (bufferItems.system.drawMode === three_1.TriangleStripDrawMode) {\n            var currentVertex_2 = 0;\n            var attrSize_2 = 0;\n            var currentIndex_2 = 0;\n            var length_2 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_3 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_4 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_2 = attr.size + 1;\n                        currentIndex_2 = currentVertex_2 * attrSize_2;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_2, currentIndex_2 + attrSize_2);\n                    });\n                    // Move to the next vertex\n                    currentVertex_2++;\n                };\n                // Each new triangle is three vertices, where the first two are shared with\n                // The previous triangle's last two vertices\n                for (var i = 0; i < 3; ++i) {\n                    _loop_4(i);\n                }\n                // Go back two vertices as the next tri will use them + the next vertex to\n                // Make the next triangle\n                currentVertex_2 -= 2;\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_2 < length_2) {\n                _loop_3();\n            }\n        }\n        // Log the debug info to the console using the debug utility\n        debugBuffer(message, {\n            drawRange: buffer.drawRange,\n            triangles: triangles,\n        }, bufferItems.system.material.uniforms);\n    };\n    /**\n     * Aids in taking in multiple multibuffers and flattening it to a single list\n     *\n     * @param multiShapeBuffers\n     */\n    BufferUtil.flattenMultiBuffers = function (multiShapeBuffers) {\n        var all = [];\n        multiShapeBuffers.forEach(function (multiBuffer) {\n            multiBuffer.getBuffers().forEach(function (buffer) { return all = all.concat(buffer); });\n        });\n        return all;\n    };\n    /**\n     * @static\n     * This helps aid in updating a complex multi buffer. It will establish when a new\n     * buffer needs to be created and initialized and it will automatically call a BaseBuffer's\n     * update when an update is detected as a need for the buffer.\n     *\n     * @param multiShapeBuffer\n     * @param buffers\n     * @param init\n     *\n     * @return {boolean} True if a buffer was updated\n     */\n    BufferUtil.updateMultiBuffer = function (multiShapeBuffer, buffers, init, update, forceUpdates) {\n        // This flag indicates whether an update occurred or not\n        var didUpdate = false;\n        // Get the shape buffers we need rendered into vertex buffers\n        var shapeBuffers = multiShapeBuffer.getBuffers();\n        // Make a lookup to identify the buffers that already exists for the given multi shape buffers\n        var bufferLookup = new Map();\n        buffers.forEach(function (buffer) { return bufferLookup.set(buffer.bufferItems.currentData, buffer); });\n        // This will store all of the shape buffers that needs to be rendered into a vertex buffer\n        var needsBuffer = [];\n        // If we're forcing updates then we should be ensuring all shapeBuffers needs a buffer\n        // And leave all of the bufferLookup so they will all be updated with the provided needed shape buffer updates\n        if (forceUpdates) {\n            needsBuffer = [].concat(shapeBuffers);\n        }\n        else {\n            shapeBuffers.forEach(function (shapes) {\n                if (bufferLookup.get(shapes)) {\n                    bufferLookup.delete(shapes);\n                }\n                else {\n                    needsBuffer.push(shapes);\n                }\n            });\n        }\n        // All buffers remaining in the buffer lookup are available for re-rendering the\n        // Shape buffers that still needs updates\n        // If the shape buffers needing updates is greater than the vertex buffers available\n        // Then we update with what we have and initialize any additional vertex buffers needed\n        if (needsBuffer.length >= bufferLookup.size) {\n            // Take any buffer that is not found with an existing shape buffer and update it\n            // With a buffer that needs an update\n            bufferLookup.forEach(function (value) {\n                didUpdate = update(value, needsBuffer.shift()) || didUpdate;\n            });\n            // Any remaining buffers that need updates will have to initialize a buffer\n            // To cram it in\n            needsBuffer.forEach(function (shapeBuffer) {\n                var vertexBuffer = init();\n                buffers.push(vertexBuffer);\n                didUpdate = update(vertexBuffer, shapeBuffer) || didUpdate;\n            });\n        }\n        else {\n            var vertexBuffers_1 = Array.from(bufferLookup.values());\n            needsBuffer.forEach(function (shapeBuffer) {\n                var vertexBuffer = vertexBuffers_1.shift();\n                didUpdate = update(vertexBuffer, shapeBuffer) || didUpdate;\n            });\n            vertexBuffers_1.forEach(function (buffer) {\n                buffer.bufferItems.geometry.setDrawRange(0, 0);\n            });\n        }\n        return didUpdate;\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with constructing a new buffer\n     * such as applying the name, generating the buffer, and populating default values to\n     * that buffer.\n     *\n     * @param {number} numVertices The number of vertices this buffer will have\n     * @param {IAttributeInfo[]} attributes A description of each attribute in the buffer\n     *\n     * @returns {BufferGeometry} The newly made buffer\n     */\n    BufferUtil.makeBuffer = function (numVertices, attributes) {\n        var iMax = attributes.length;\n        var geometry = new three_1.BufferGeometry();\n        var totalAttributeSize = 0;\n        for (var i = 0; i < iMax; ++i) {\n            var attribute = attributes[i];\n            var attributeSize = attribute.size + 1;\n            totalAttributeSize += attributeSize;\n            var buffer = new Float32Array(attributeSize * numVertices);\n            var fillMethod = fillMethodLookUp[attribute.size];\n            var name_1 = attribute.name;\n            // We set up our default value registers before executing the fill method\n            applyDefaultsHolders(attribute.defaults);\n            // Fill our buffer with the indicated default values\n            for (var k = 0; k < numVertices; ++k) {\n                fillMethod(buffer, k * attributeSize);\n            }\n            // Apply the buffer to our geometry buffer\n            geometry.addAttribute(name_1, new three_1.BufferAttribute(buffer, attributeSize));\n            debug('Made Buffer Attribute:', name_1, attributeSize);\n        }\n        if (totalAttributeSize > 16) {\n            console.warn('A Buffer has specified more attributes than available. The max is 16 and the buffer provided:', totalAttributeSize);\n        }\n        return geometry;\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with updating a buffer. You specify how many vertices\n     * to update in a batch and you specify how many batches are present.\n     *\n     * Batches are used to represent your full shape object that is being loaded from the cpu:\n     *\n     * IE- you have a rectangle object you wish to update in your buffer. This takes around 6 vertices typically\n     * so you make your vertexBatch 6 and the numBatches the number of quads you need to update in the buffer.\n     *\n     * You then provide an accessor which aids in pointing to the buffer items that need updating. The accessor has\n     * variable arguments depending on the attributes you inject in.\n     *\n     * If you have attributes like:\n     * [\n     *  {name: position, size: AttributeSize.Three},\n     *  {name: color, size: AttributeSize.Four},\n     * ]\n     *\n     * Then your accessor will be delievered arguments in this form:\n     *\n     * function(batchIndex: number, positionBuffer: number[], positionIndex: number, colorBuffer: number[], colorIndex: number)\n     *\n     * NOTE: The params handed in ARE ORDERED BY the attributes injected in\n     *\n     * You then can update the buffers based on the index information handed alongside each buffer\n     *\n     * @param {T[]} newData The new data that is going to be injected into the buffer. This must be a NEW REFERENCE of data\n     *                      that does NOT match the reference in the bufferItems.currentData. So newData !== bufferItems.currentData\n     *                      in order for the update to occur.\n     * @param {BufferGeometry} bufferItems The buffer related items used to identify how to update the buffer\n     * @param {number} vertexBatch The number of vertices to include per update batch\n     * @param {number} numBatches The number of batches to execute\n     * @param {Function} updateAccessor The accessor for performing the data update to the buffer\n     * @param {boolean} force This bypasses the typical checks that determines if the buffer SHOULD update.\n     *\n     * @return {boolean} True if the buffer was updated with this call\n     */\n    BufferUtil.updateBuffer = function (newData, bufferItems, vertexBatch, numBatches, updateAccessor, force) {\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // If we passed the data check on the first pass, then all future streamed updates\n        // Should pass as well\n        var testPerformed = lastBatchRegister !== 0 && isStreamUpdatingRegister;\n        // We check if there is a reference change in the data indicating a buffer push needs to happen\n        if ((newData !== undefined && newData !== bufferItems.currentData) || testPerformed || force) {\n            // If we aren't streaming updates, then we always start at the beginning\n            if (!isStreamUpdatingRegister) {\n                // Reset out last batch register as this is an entriely new update\n                lastBatchRegister = 0;\n            }\n            // Flag the newly rendered data as our current data\n            bufferItems.currentData = newData;\n            // Get the attributes by name out of the three js buffer\n            var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n            // Get the raw number buffers\n            var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n            // Determine what kind of buffer pointer increments we will need\n            var incrementValues = attributes.map(function (attr) { return (attr.size + 1) * vertexBatch; });\n            // Apply all data needed to any registers we need\n            applyAttributeRegisters(attributeBuffers, incrementValues);\n            // Get the method that will perform the update based on number of attributes\n            var updateMethod = updateBufferLookUp[attributes.length];\n            // Execute the update method\n            updateMethod(numBatches + lastBatchRegister, updateAccessor);\n            // Flag each buffer attribute for needing an update\n            bufferAttributes.forEach(function (attr) {\n                if (attr.updateRange) {\n                    attr.updateRange.offset = 0;\n                    attr.updateRange.count = vertexBatch * numBatches;\n                }\n                attr.needsUpdate = true;\n            });\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n            return true;\n        }\n        else {\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n        }\n        return false;\n    };\n    /**\n     * This makes all of the typical items used in creating and managing a buffer of items rendered to the screen\n     *\n     * @returns {IBufferItems<T>} An empty object of the particular buffer items needed\n     */\n    BufferUtil.makeBufferItems = function () {\n        return {\n            attributes: [],\n            currentData: [],\n            geometry: null,\n            system: null,\n        };\n    };\n    return BufferUtil;\n}());\nexports.BufferUtil = BufferUtil;\nvar _a;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/buffer-util.ts\n// module id = 3\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar buffer_util_1 = require(\"../util/buffer-util\");\n/**\n * This deinfes the minimal set of methods that should be implemented to create\n * a reusable buffer object that can be initialized and populated.\n */\nvar BaseBuffer = (function () {\n    function BaseBuffer() {\n    }\n    /**\n     * This disposes the resources associated with a buffer.\n     */\n    BaseBuffer.prototype.dispose = function () {\n        if (this.bufferItems) {\n            buffer_util_1.BufferUtil.dispose([this.bufferItems]);\n        }\n    };\n    /**\n     * This initializes the buffer and generates the buffer items object.\n     */\n    BaseBuffer.prototype.init = function (material, unitCount) {\n        // To be implemented by a subclass\n    };\n    /**\n     * This updates the buffer by providing the shape buffer needed to update\n     * the internal buffer items\n     *\n     * @param {T[]} shapeBuffer The shape buffer containing all of the shape data\n     *                          to be placed into the buffer.\n     *\n     * @return {boolean} Retrusn true if this pushed up any updates\n     */\n    BaseBuffer.prototype.update = function (shapeBuffer) {\n        // To be implemented by a subclass\n        return false;\n    };\n    return BaseBuffer;\n}());\nexports.BaseBuffer = BaseBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/base-buffer.ts\n// module id = 4\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"./bounds\");\n/**\n * Represents a line with a given slope\n */\nvar Line = (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates a new line that passes through the two specified points\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    function Line(p1, p2) {\n        var _this = _super.call(this, 0, 1, 1, 0) || this;\n        _this.setPoints(p1, p2);\n        return _this;\n    }\n    /**\n     * This calculates the distance to a point from the provided line\n     * BUT this ALSO retains the directionality of that distance. So one side of\n     * the line will be positive while the other negative\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.directionTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line, but we won't take the absolute to retain the direction\n        return this.perpendicular.x * vector.x + this.perpendicular.y * vector.y;\n    };\n    /**\n     * This calculates the distance to a point from the provided line\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.distanceTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line\n        return Math.abs(this.perpendicular.x * vector.x +\n            this.perpendicular.y * vector.y);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {Array} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    Line.getClosest = function (lines, p) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(p);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This sets the two endpoints for this line and recalculates the bounds\n     * of the line accordingly\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    Line.prototype.setPoints = function (p1, p2) {\n        this.x = p1.x - 1;\n        this.y = p1.y - 1;\n        this.width = 2;\n        this.height = 2;\n        this.encapsulatePoint(p2);\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        this.slope = dy / dx;\n        this.p1 = p1;\n        this.p2 = p2;\n        this.magnitude = Math.sqrt(dx * dx + dy * dy);\n        this.perpendicular = {\n            x: this.p2.y - this.p1.y,\n            y: -(this.p2.x - this.p1.x),\n        };\n        // Normalize the perpendicular line\n        var mag = Math.sqrt(this.perpendicular.x * this.perpendicular.x +\n            this.perpendicular.y * this.perpendicular.y);\n        this.perpendicular.x /= mag;\n        this.perpendicular.y /= mag;\n    };\n    return Line;\n}(bounds_1.Bounds));\nexports.Line = Line;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/line.ts\n// module id = 5\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} p1 The start of the direction\n     * @param {IPoint} p2 The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.getDirection = function (p1, p2, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.getDirection(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/point.ts\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"d3-color\"\n// module id = 7\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar AtlasTexture = (function () {\n    /**\n     * Generates a new atlas texture that points to a specific image resource.\n     *\n     * @param path The path to the image resource to be loaded into the atlas.\n     */\n    function AtlasTexture(path, label) {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        this.imagePath = path;\n        this.label = label;\n        // Let the label keep track of it's rasterization\n        if (label) {\n            this.label.rasterizedLabel = this;\n        }\n    }\n    return AtlasTexture;\n}());\nexports.AtlasTexture = AtlasTexture;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/atlas-texture.ts\n// module id = 8\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FrameInfo = (function () {\n    function FrameInfo() {\n    }\n    /** Contains the time the previous frame started */\n    FrameInfo.lastFrameTime = Date.now();\n    /** Contains a theoretical approximation the next frame will start */\n    FrameInfo.nextFrameTime = Date.now();\n    /** Contains how many frames have been played for a given WebGLSurface context */\n    FrameInfo.framesPlayed = new Map();\n    return FrameInfo;\n}());\nexports.FrameInfo = FrameInfo;\n/**\n * This gets an integer time value that can fit within an attribute. Be aware,\n * this only supports up to 7 digits of the millisecond time.\n */\nfunction getAttributeCurrentTime() {\n    var time = FrameInfo.lastFrameTime / 1E7;\n    return Math.floor((time - Math.floor(time)) * 1E7);\n}\nexports.getAttributeCurrentTime = getAttributeCurrentTime;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/frame-info.ts\n// module id = 9\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Does a linear easing of a value\n *\n * @param {number} t The time elapsed: 0 to d\n * @param {number} s The start value\n * @param {number} c The change in value\n * @param {number} d The duration of the change\n *\n * @returns A number linearly progressing from s to s+c depending on the value of\n *          t in relation to d\n */\nfunction linear(t, s, c, d) {\n    return c * t / d + s;\n}\nexports.linear = linear;\nfunction easeInQuad(t, b, c, d) {\n    return c * (t /= d) * t + b;\n}\nexports.easeInQuad = easeInQuad;\nfunction easeOutQuad(t, b, c, d) {\n    return -c * (t /= d) * (t - 2) + b;\n}\nexports.easeOutQuad = easeOutQuad;\nfunction easeInOutQuad(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t + b;\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\n}\nexports.easeInOutQuad = easeInOutQuad;\nfunction easeInCubic(t, b, c, d) {\n    return c * (t /= d) * t * t + b;\n}\nexports.easeInCubic = easeInCubic;\nfunction easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n}\nexports.easeOutCubic = easeOutCubic;\nfunction easeInOutCubic(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n}\nexports.easeInOutCubic = easeInOutCubic;\nfunction easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n}\nexports.easeInQuart = easeInQuart;\nfunction easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n}\nexports.easeOutQuart = easeOutQuart;\nfunction easeInOutQuart(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t + b;\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n}\nexports.easeInOutQuart = easeInOutQuart;\nfunction easeInQuint(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n}\nexports.easeInQuint = easeInQuint;\nfunction easeOutQuint(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n}\nexports.easeOutQuint = easeOutQuint;\nfunction easeInOutQuint(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n}\nexports.easeInOutQuint = easeInOutQuint;\nfunction easeInSine(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n}\nexports.easeInSine = easeInSine;\nfunction easeOutSine(t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n}\nexports.easeOutSine = easeOutSine;\nfunction easeInOutSine(t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n}\nexports.easeInOutSine = easeInOutSine;\nfunction easeInExpo(t, b, c, d) {\n    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nexports.easeInExpo = easeInExpo;\nfunction easeOutExpo(t, b, c, d) {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nexports.easeOutExpo = easeOutExpo;\nfunction easeInOutExpo(t, b, c, d) {\n    if (t === 0)\n        return b;\n    if (t === d)\n        return b + c;\n    if ((t /= d / 2) < 1)\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n}\nexports.easeInOutExpo = easeInOutExpo;\nfunction easeInCirc(t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n}\nexports.easeInCirc = easeInCirc;\nfunction easeOutCirc(t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n}\nexports.easeOutCirc = easeOutCirc;\nfunction easeInOutCirc(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n}\nexports.easeInOutCirc = easeInOutCirc;\nfunction easeInElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n}\nexports.easeInElastic = easeInElastic;\nfunction easeOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n}\nexports.easeOutElastic = easeOutElastic;\nfunction easeInOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return b + c;\n    if (!p)\n        p = d * (.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    if (t < 1)\n        return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n}\nexports.easeInOutElastic = easeInOutElastic;\nfunction easeInBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n}\nexports.easeInBack = easeInBack;\nfunction easeOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n}\nexports.easeOutBack = easeOutBack;\nfunction easeInOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    if ((t /= d / 2) < 1)\n        return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n}\nexports.easeInOutBack = easeInOutBack;\nfunction easeInBounce(t, b, c, d) {\n    return c - easeOutBounce(d - t, 0, c, d) + b;\n}\nexports.easeInBounce = easeInBounce;\nfunction easeOutBounce(t, b, c, d) {\n    if ((t /= d) < (1 / 2.75)) {\n        return c * (7.5625 * t * t) + b;\n    }\n    else if (t < (2 / 2.75)) {\n        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\n    }\n    else if (t < (2.5 / 2.75)) {\n        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\n    }\n    else {\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\n    }\n}\nexports.easeOutBounce = easeOutBounce;\nfunction easeInOutBounce(t, b, c, d) {\n    if (t < d / 2)\n        return easeInBounce(t * 2, 0, c, d) * .5 + b;\n    return easeOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b;\n}\nexports.easeInOutBounce = easeInOutBounce;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/easing.ts\n// module id = 10\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar point_1 = require(\"../primitives/point\");\nvar easing_1 = require(\"./easing\");\n/**\n * This enum is just a common way to define interpolation types\n */\nvar InterpolationMethod;\n(function (InterpolationMethod) {\n    InterpolationMethod[InterpolationMethod[\"BEZIER2\"] = 0] = \"BEZIER2\";\n    InterpolationMethod[InterpolationMethod[\"BEZIER3\"] = 1] = \"BEZIER3\";\n    InterpolationMethod[InterpolationMethod[\"CIRCULAR\"] = 2] = \"CIRCULAR\";\n})(InterpolationMethod = exports.InterpolationMethod || (exports.InterpolationMethod = {}));\n/**\n * This calculates a quadratic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier2(t, p1, p2, c1) {\n    var t2 = t * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    return {\n        x: p1.x * mt2 + c1.x * 2 * mt * t + p2.x * t2,\n        y: p1.y * mt2 + c1.y * 2 * mt * t + p2.y * t2,\n    };\n}\nexports.bezier2 = bezier2;\n/**\n * This calculates a cubic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The first control point of the curve\n * @param {IPoint} c2 The second control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier3(t, p1, p2, c1, c2) {\n    var t2 = t * t;\n    var t3 = t2 * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    var mt3 = mt2 * mt;\n    return {\n        x: p1.x * mt3 + 3 * c1.x * mt2 * t + 3 * c2.x * mt * t2 + p2.x * t3,\n        y: p1.y * mt3 + 3 * c1.y * mt2 * t + 3 * c2.y * mt * t2 + p2.y * t3,\n    };\n}\nexports.bezier3 = bezier3;\n/**\n * This calculates a point along a path defined as a circular path which is a\n * path moving along the edge of a circle from one point to the next. This will\n * even allow for moving along a circle with a growing radius.\n *\n * @param {number} t The 0 - 1 time interval for the part of the path we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point, or more importantly, the center of the circle\n * @param {EasingMethod} radiusEasing Default easing for the radius growing is linear.\n *                                    Insert a custom easing method to change this.\n *\n * @returns {IPoint}\n */\nfunction circular(t, p1, p2, c1, radiusEasing) {\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(c1, p1);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(c1, p2);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Ensure our theta's are definitely between 0 to Math.PI * 2 after the atan\n    // Calculation\n    if (theta1 < 0)\n        theta1 += Math.PI * 2;\n    if (theta2 < 0)\n        theta2 += Math.PI * 2;\n    var dTheta = theta2 - theta1;\n    // We ALWAYS want our path to be the shortest around the circle\n    if (dTheta > Math.PI) {\n        dTheta = theta1 - theta2;\n    }\n    // We use this to calculate how far we are between the two points in radians\n    // Based on the time parameter provided for the interpolation\n    dTheta *= t;\n    // We must have the radial distance of both points to properly calculate\n    // An easing between the two radii\n    var radius1 = point_1.Point.getDistance(p1, c1);\n    var radius2 = point_1.Point.getDistance(p2, c1);\n    // We control how the radius eases out for the path, which is determined by\n    // The easing method, otherwise, it just linearly radiates out\n    var radius = (radiusEasing || easing_1.linear)(t, radius1, radius2 - radius1, 1.0);\n    return {\n        x: Math.cos(theta1 + dTheta) * radius + c1.x,\n        y: Math.sin(theta1 + dTheta) * radius + c1.y,\n    };\n}\nexports.circular = circular;\nexports.pickInterpolation = (_a = {},\n    _a[InterpolationMethod.BEZIER2] = bezier2,\n    _a[InterpolationMethod.BEZIER3] = bezier3,\n    _a[InterpolationMethod.CIRCULAR] = circular,\n    _a);\nvar _a;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/interpolation.ts\n// module id = 11\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ramda\"\n// module id = 12\n// module chunks = 0","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = require(\"d3-color\");\nvar three_1 = require(\"three\");\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar pack_node_1 = require(\"../../util/pack-node\");\nvar label_1 = require(\"../shape/label\");\nvar atlas_texture_1 = require(\"./atlas-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar debugLabels = require('debug')('webgl-surface:Labels');\nvar ZERO_IMAGE = {\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    label: new label_1.Label({ text: ' ' }),\n    pixelHeight: 0,\n    pixelWidth: 0,\n};\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = (function () {\n    /**\n     * Generates a new manager for atlas'. This will create and destroy atlas' and\n     * ensure they have the correct settings applied. A manager will also aid in\n     * packing images into the atlas indicated.\n     *\n     * @param {number} width The width of all atlas' generated\n     * @param {number} height The height of all atlas' generated\n     */\n    function AtlasManager(width, height) {\n        /** Gives a reference of all of the images loaded for the atlas */\n        this.atlasImages = {};\n        /** Stores the current mapping of the atlas */\n        this.atlasMap = {};\n        /** Stores all of the textures that are our atlases */\n        this.atlasTexture = {};\n        this.textureWidth = width;\n        this.textureHeight = height;\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param atlasName The unique name of the atlas so it can be retrieved/referenced easily\n     * @param images The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (atlasName, images, colors) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlasMap, canvas, _i, images_1, image, image, texture, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        atlasMap = new pack_node_1.PackNode(0, 0, this.textureWidth, this.textureHeight);\n                        // Create the mapping element for the new atlas so we can track insertions / deletions\n                        this.atlasMap[atlasName] = atlasMap;\n                        // Make a listing of images that is within the atlas\n                        this.atlasImages[atlasName] = [];\n                        canvas = document.createElement('canvas').getContext('2d');\n                        // Size the canvas to the atlas size\n                        canvas.canvas.width = this.textureWidth;\n                        canvas.canvas.height = this.textureHeight;\n                        if (!images) return [3 /*break*/, 4];\n                        _i = 0, images_1 = images;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < images_1.length)) return [3 /*break*/, 4];\n                        image = images_1[_i];\n                        return [4 /*yield*/, this.draw(image, atlasName, canvas)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        if (!colors) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.drawColors(colors, atlasName, canvas)];\n                    case 5:\n                        image = _b.sent();\n                        // Add the dummy texture info as an image to our list of images\n                        if (image) {\n                            this.atlasImages[atlasName].push(image);\n                        }\n                        _b.label = 6;\n                    case 6:\n                        texture = new three_1.Texture(canvas.canvas);\n                        texture.premultiplyAlpha = true;\n                        texture.generateMipmaps = true;\n                        // Store the texture as the atlas.\n                        this.atlasTexture[atlasName] = texture;\n                        // Store the images as images within the atlas\n                        if (images) {\n                            (_a = this.atlasImages[atlasName]).push.apply(_a, images);\n                        }\n                        debug('Atlas Created-> texture: %o mapping: %o images: %o', texture, atlasMap, images);\n                        return [2 /*return*/, texture];\n                }\n            });\n        });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        if (this.atlasTexture[atlasName]) {\n            this.atlasTexture[atlasName].dispose();\n            this.atlasTexture[atlasName] = null;\n        }\n        if (this.atlasMap[atlasName]) {\n            this.atlasMap[atlasName].destroy();\n            this.atlasMap[atlasName] = null;\n        }\n        if (this.atlasImages[atlasName]) {\n            var none_1 = { x: 0, y: 0 };\n            this.atlasImages[atlasName].forEach(function (image) {\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                image.pixelHeight = 0;\n                image.atlasBL = none_1;\n                image.atlasBR = none_1;\n                image.atlasTL = none_1;\n                image.atlasTR = none_1;\n            });\n            this.atlasImages[atlasName] = null;\n        }\n    };\n    AtlasManager.prototype.isValidImage = function (image) {\n        var isValid = false;\n        if (image && (image.imagePath || (image.label && image.label.text))) {\n            if (image.pixelWidth && image.pixelHeight) {\n                isValid = true;\n            }\n        }\n        return isValid;\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param image The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (image, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var loadedImage, rect, dimensions, node, insertedNode, ux, uy, uw, uh, atlasDimensions;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Validate the index\n                        if (!this.atlasMap[atlasName]) {\n                            debug('Can not load image, invalid Atlas Name: %o for atlasMaps: %o', atlasName, this.atlasMap);\n                            return [2 /*return*/, false];\n                        }\n                        return [4 /*yield*/, this.loadImage(image)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Make sure at this point the image knows it is not affiliated with an atlas\n                        // If something goes wrong with loading or insertting this image, then a null\n                        // Atlas value will indicate the image can not be used appropriately\n                        image.atlasReferenceID = null;\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && this.isValidImage(image)) {\n                            debug('Image loaded: %o', image.imagePath);\n                            rect = new bounds_1.Bounds(0, image.pixelWidth, image.pixelHeight, 0);\n                            dimensions = {\n                                first: image,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            node = this.atlasMap[atlasName];\n                            insertedNode = node.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                if (image.label) {\n                                    debugLabels('Atlas location determined. PackNode: %o Dimensions: %o', insertedNode, dimensions);\n                                }\n                                // Apply the image to the node\n                                insertedNode.nodeImage = image;\n                                ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                                uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                                uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                                uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                                debugLabels('uy is %o', uy);\n                                atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                                image.atlasReferenceID = atlasName;\n                                image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                                image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                                // Now draw the image to the indicated canvas\n                                canvas.drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit image into atlas \" + image.imagePath);\n                                image = this.setDefaultImage(image, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default image\n                            console.error(\"Could not load image \" + image.imagePath);\n                            image = this.setDefaultImage(image, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders a list of colors to the canvas. This using the same packing\n     * algorithm as any image so the rendering is placed correctly or determines\n     * if enough space is not available.\n     *\n     * @param {AtlasColor[]} colors The list of colors to be rendered to the atlas\n     * @param {string} atlasName The name of the atlas being rendered to\n     * @param {CanvasRenderingContext2D} canvas The canvas of the atlas being rendered to\n     *\n     * @returns {Promise<boolean>} Resolves to true if the operation was successful\n     */\n    AtlasManager.prototype.drawColors = function (colors, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var colorWidth, colorHeight, maxPerRow, rowWidth, rowCount, colCount, renderHeight, dimensions, node, insertedNode, image, ux, uy, uw, uh, atlasDimensions, renderSpace, startX, startY, nextX, nextY, beginX, beginY, col, row, _i, colors_1, color, _a, r, g, b;\n            return __generator(this, function (_b) {\n                debug('Finding space for colors on the atlas: %o', colors);\n                colorWidth = 2;\n                colorHeight = 2;\n                maxPerRow = 1024 / colorWidth;\n                rowWidth = Math.min(this.textureWidth, maxPerRow * colorWidth);\n                rowCount = Math.ceil((colors.length * colorWidth) / rowWidth);\n                colCount = Math.ceil(rowWidth / colorWidth);\n                renderHeight = rowCount * colorHeight;\n                dimensions = {\n                    // Since the algorithm requires something to fill this slot, just make a\n                    // Dummy object\n                    first: new atlas_texture_1.AtlasTexture(null, null),\n                    // Set the dimensions we calculated for the space our colors will take up\n                    // Within the atlas\n                    second: new bounds_1.Bounds(0, rowWidth, renderHeight, 0),\n                };\n                // Auto add a buffer in\n                dimensions.second.width += 1;\n                dimensions.second.height += 1;\n                node = this.atlasMap[atlasName];\n                insertedNode = node.insert(dimensions);\n                // If the result was NULL we did not successfully insert the image into any map\n                if (insertedNode) {\n                    debug('Atlas location determined for colors: %o', insertedNode);\n                    image = insertedNode.nodeImage = dimensions.first;\n                    ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                    uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                    uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                    uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                    atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                    image.atlasReferenceID = atlasName;\n                    image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                    image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                    renderSpace = insertedNode.nodeDimensions;\n                    startX = renderSpace.x;\n                    startY = renderSpace.y;\n                    nextX = colorWidth / this.textureWidth;\n                    nextY = -colorHeight / this.textureHeight;\n                    beginX = (startX / this.textureWidth) + (nextX / 2.0);\n                    beginY = 1.0 - (startY / this.textureHeight) + (nextY / 2.0);\n                    col = 0;\n                    row = 0;\n                    // Loop through each color, establish metrics, draw to the atlas\n                    for (_i = 0, colors_1 = colors; _i < colors_1.length; _i++) {\n                        color = colors_1[_i];\n                        // Staore the info needed to make the color referenceable again\n                        color.atlasReferenceID = atlasName;\n                        color.colorIndex = col + (row * colCount);\n                        color.colorsPerRow = colCount;\n                        // The location of the middle of the first color\n                        color.firstColor = {\n                            x: beginX,\n                            y: beginY,\n                        };\n                        color.nextColor = {\n                            x: nextX,\n                            y: nextY,\n                        };\n                        _a = color.color, r = _a.r, g = _a.g, b = _a.b;\n                        // Draw the color to the canvas\n                        canvas.fillStyle = \"rgba(\" + Math.round(r * 255.0) + \", \" + Math.round(g * 255.0) + \", \" + Math.round(b * 255.0) + \", \" + color.opacity + \")\";\n                        canvas.fillRect(col * colorWidth + startX, row * colorHeight + startY, colorWidth, colorHeight);\n                        col++;\n                        if (col === colCount) {\n                            col = 0;\n                            row++;\n                        }\n                    }\n                    // We have finished inserting\n                    return [2 /*return*/, image];\n                }\n                else {\n                    // Log an error\n                    throw new Error('Could not fit colors into atlas');\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.atlasTexture[atlasName];\n    };\n    /**\n     * This reads the input path and loads the image specified by the path\n     *\n     * @param {AtlasTexture} texture This is an atlas texture with the path set\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (texture) {\n        if (texture.imagePath) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    texture.pixelWidth = image.width;\n                    texture.pixelHeight = image.height;\n                    texture.aspectRatio = image.width / image.height;\n                    resolve(image);\n                };\n                image.onerror = function () {\n                    resolve(null);\n                };\n                image.src = texture.imagePath;\n            });\n        }\n        else if (texture.label) {\n            return new Promise(function (resolve, reject) {\n                var label = texture.label;\n                var labelSize = label.getSize();\n                var canvas = document.createElement('canvas');\n                var ctx = canvas.getContext('2d');\n                // Set the dimensions of the canvas/texture space we will be using to rasterize\n                // The label. Use the label's rasterization controls to aid in rendering the label\n                canvas.width = labelSize.width + texture.label.rasterizationOffset.x;\n                canvas.height = labelSize.height;\n                debug('label X %o', texture.label.rasterizationOffset.x);\n                if (ctx) {\n                    var fontSize = label.fontSize;\n                    var color = d3_color_1.rgb(label.color.base.color.r * 255, label.color.base.color.g * 255, label.color.base.color.b * 255, label.color.base.opacity);\n                    ctx.font = label.makeCSSFont(fontSize);\n                    ctx.textAlign = label.textAlign;\n                    ctx.textBaseline = label.textBaseline;\n                    ctx.fillStyle = color.toString();\n                    // Render the label to the canvas/texture space. This utilizes the label's\n                    // Rasterization metrics to aid in getting a clean render.\n                    ctx.fillText(label.text, texture.label.rasterizationOffset.x, texture.label.rasterizationOffset.y);\n                    var image_1 = new Image();\n                    image_1.onload = function () {\n                        // Here we use the canvas dimensions and NOT the image dimensions\n                        // As the image dimensions are unreliable here when setting the src\n                        // To a data url\n                        texture.pixelWidth = image_1.width;\n                        texture.pixelHeight = image_1.height;\n                        texture.aspectRatio = image_1.width / image_1.height;\n                        debugLabels('Applying size based on rasterization to the Label: w: %o h: %o', image_1.width, image_1.height);\n                        label.setSize({\n                            height: image_1.height,\n                            width: image_1.width,\n                        });\n                        resolve(image_1);\n                    };\n                    image_1.onerror = function () {\n                        resolve(null);\n                    };\n                    image_1.src = canvas.toDataURL('image/png');\n                }\n            });\n        }\n        return Promise.resolve(null);\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/atlas-manager.ts\n// module id = 13\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds(x, x + width, y, y - height);\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        this.nodeImage = null;\n        if (this.child[0]) {\n            this.child[0].destroy();\n        }\n        if (this.child[1]) {\n            this.child[1].destroy();\n        }\n        this.child[0] = undefined;\n        this.child[1] = undefined;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        if (this.child[0] && !this.child[0].nodeImage) {\n            return !this.child[0].isLeaf;\n        }\n        if (this.child[1] && !this.child[1].nodeImage) {\n            return !this.child[1].isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        if (!this.isLeaf) {\n            // Try inserting into first child\n            var newNode = this.child[0].insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return this.child[1].insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/pack-node.ts\n// module id = 14\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = require(\"ramda\");\nvar rotateable_quad_1 = require(\"../../primitives/rotateable-quad\");\nvar sprite_1 = require(\"../texture/sprite\");\nvar measurement = new sprite_1.Sprite(200, 200, 1, 1);\nvar Label = (function (_super) {\n    __extends(Label, _super);\n    /**\n     * Creates an instance of Label.\n     *\n     * @param {Partial<Label<T>>} [options={}]\n     */\n    function Label(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, { x: 0, y: 1 }, { width: 1, height: 1 }, 0, rotateable_quad_1.AnchorPosition.TopLeft) || this;\n        _this.depth = 40;\n        _this.direction = 'inherit';\n        _this.font = 'serif';\n        _this.fontSize = 10;\n        _this.fontWeight = 400;\n        _this.maxWidth = undefined;\n        _this.text = '';\n        _this.id = '';\n        _this.textAlign = 'start';\n        _this.textBaseline = 'alphabetic';\n        _this.zoomable = false;\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to offset the rasterization if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationOffset = { x: 20, y: 0 };\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to pad the rasterization space if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationPadding = { width: 0, height: 0 };\n        // Set props\n        Object.assign(_this, options);\n        // Make sure our dimensions are set\n        _this.setFontSize(options.fontSize || 12);\n        return _this;\n    }\n    Object.defineProperty(Label.prototype, \"baseLabel\", {\n        get: function () {\n            return this._baseLabel;\n        },\n        set: function (value) {\n            this._baseLabel = value;\n            this.text = value.text;\n            this.fontSize = value.fontSize;\n            this.font = value.font;\n            this.textAlign = value.textAlign;\n            this.textBaseline = value.textBaseline;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Label.prototype, \"rasterizedLabel\", {\n        /**\n         * This getter ensures the rasterized label retrieved is either this labels own rasterization\n         * or from a base.\n         */\n        get: function () {\n            if (this.baseLabel) {\n                return this.baseLabel.rasterizedLabel;\n            }\n            return this._rasterizedLabel;\n        },\n        set: function (value) {\n            this._rasterizedLabel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies all of the properties of a label and makes this label use them\n     *\n     * @param {Label} label The labels whose properties we wish to copy\n     */\n    Label.prototype.copyLabel = function (label) {\n        // Assign the properties of the other label to this\n        // Specifically, ONLY label properties\n        Object.assign(this, ramda_1.omit(['x', 'y', 'width', 'height'], label));\n        // Use this to set the text to make sure all of the metrics are re-calculated\n        this.setText(label.text);\n    };\n    /**\n     * This gets the actual text this label is capable of rendering\n     */\n    Label.prototype.getText = function () {\n        if (this._baseLabel) {\n            return this._baseLabel.getText();\n        }\n        return this.text;\n    };\n    /**\n     * Takes all of the current settings and makes a CSS font string\n     */\n    Label.prototype.makeCSSFont = function (fontSize) {\n        return this.fontWeight + \" \" + (fontSize || this.fontSize) + \"px \" + this.font;\n    };\n    /**\n     * Change the position this text is rendered to\n     *\n     * @param x X world coordinate\n     * @param y Y world coordinate\n     */\n    Label.prototype.position = function (x, y) {\n        this.x = x;\n        this.y = y;\n    };\n    /**\n     * This sets the font size for the label based on the base text dimensions\n     *\n     * @param {number} fontSize\n     */\n    Label.prototype.setFontSize = function (fontSize) {\n        var lbl = this.getText();\n        var size = this.getSize();\n        var width = size.width;\n        var height = size.height;\n        if (this.baseLabel) {\n            var baseSize = this.baseLabel.getSize();\n            var scale = fontSize / this.baseLabel.fontSize;\n            height = baseSize.height * scale;\n            width = baseSize.width * scale;\n        }\n        else {\n            measurement.context.font = this.makeCSSFont();\n            var size_1 = measurement.context.measureText(lbl);\n            // Set our properties based on the calculated size\n            height = fontSize;\n            width = size_1.width;\n        }\n        this.fontSize = fontSize;\n        this.setSize({ width: width, height: height });\n    };\n    /**\n     * Change the text and the calculated bounding box for this label\n     */\n    Label.prototype.setText = function (lbl) {\n        this.text = lbl;\n        this.setFontSize(this.fontSize);\n    };\n    Label.prototype.update = function () {\n        this.setFontSize(this.fontSize);\n        _super.prototype.update.call(this);\n    };\n    return Label;\n}(rotateable_quad_1.RotateableQuad));\nexports.Label = Label;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/label.ts\n// module id = 15\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar bounds_1 = require(\"./bounds\");\nvar AnchorPosition;\n(function (AnchorPosition) {\n    AnchorPosition[AnchorPosition[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorPosition[AnchorPosition[\"BottomRight\"] = 1] = \"BottomRight\";\n    AnchorPosition[AnchorPosition[\"Custom\"] = 2] = \"Custom\";\n    AnchorPosition[AnchorPosition[\"Middle\"] = 3] = \"Middle\";\n    AnchorPosition[AnchorPosition[\"MiddleBottom\"] = 4] = \"MiddleBottom\";\n    AnchorPosition[AnchorPosition[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorPosition[AnchorPosition[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorPosition[AnchorPosition[\"MiddleTop\"] = 7] = \"MiddleTop\";\n    AnchorPosition[AnchorPosition[\"TopLeft\"] = 8] = \"TopLeft\";\n    AnchorPosition[AnchorPosition[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorPosition = exports.AnchorPosition || (exports.AnchorPosition = {}));\nvar anchorCalculations = (_a = {},\n    _a[AnchorPosition.BottomLeft] = function (quad) { return ({\n        x: 0,\n        y: 0,\n    }); },\n    _a[AnchorPosition.BottomRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: 0,\n    }); },\n    _a[AnchorPosition.Custom] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.Middle] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleBottom] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: 0,\n    }); },\n    _a[AnchorPosition.MiddleLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleTop] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height,\n    }); },\n    _a);\nvar RotateableQuad = (function (_super) {\n    __extends(RotateableQuad, _super);\n    /**\n     * Generates a quad\n     *\n     * @param {IPoint} location The location of the quad (it's anchorpoint will be placed here)\n     * @param {number} width The width of the quad\n     * @param {number} height The height of the quad\n     * @param {AnchorPosition} anchor The anchor location of the quad.\n     *                                Location and rotation will be relative to this.\n     */\n    function RotateableQuad(location, size, rotation, anchor) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        // Apply our properties\n        _this.setSize(size);\n        _this.setAnchor(anchor);\n        _this.setLocation(location);\n        _this.setRotation(rotation);\n        // Update the transform and the corner vertices\n        _this.update();\n        return _this;\n    }\n    /**\n     * @private\n     * Recalculates this anchor position based on the anchor type\n     *\n     * @param {AnchorPosition} anchor\n     */\n    RotateableQuad.prototype.calculateAnchor = function (anchor) {\n        this.anchor = anchorCalculations[anchor](this);\n    };\n    /**\n     * Get the base size of the quad\n     *\n     * @returns {ISize} The base size of this quad\n     */\n    RotateableQuad.prototype.getSize = function () {\n        return this.size;\n    };\n    /**\n     * Sets the specified anchor position on the quad\n     *\n     * @param {AnchorPosition} anchor This specifies an auto calculated position for the anchor\n     * @param {IPoint} custom If specified, will set a custom anchor location rather\n     *                        than the calculated version.\n     */\n    RotateableQuad.prototype.setAnchor = function (anchor, custom) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        this.anchorType = anchor;\n        // Apply the custom position if present\n        if (custom) {\n            this.anchorType = AnchorPosition.Custom;\n            this.anchor = custom;\n            return;\n        }\n        this.calculateAnchor(anchor);\n    };\n    RotateableQuad.prototype.getAnchor = function () {\n        return this.anchor;\n    };\n    RotateableQuad.prototype.getAnchorType = function () {\n        return this.anchorType;\n    };\n    /**\n     * This sets the location of this quad to a given position where the anchor\n     * point will be located on top of the location provided.\n     *\n     * @param {IPoint} location The location to place the quad\n     */\n    RotateableQuad.prototype.setLocation = function (location) {\n        this.location = location;\n    };\n    RotateableQuad.prototype.getLocation = function () {\n        return this.location;\n    };\n    /**\n     * Sets the rotation of this quad, in radians, rotated around the anchor point.\n     *\n     * @param {number} rotation The rotation of the quad\n     */\n    RotateableQuad.prototype.setRotation = function (rotation) {\n        this.rotation = rotation;\n    };\n    /**\n     * get Rotation\n     */\n    RotateableQuad.prototype.getRotation = function () {\n        return this.rotation;\n    };\n    /**\n     * get direction as a point\n     */\n    RotateableQuad.prototype.getDirection = function () {\n        var angle = this.rotation;\n        return {\n            x: Math.cos(angle),\n            y: Math.sin(angle),\n        };\n    };\n    /**\n     * Applies the size to the base\n     *\n     * @param {ISize} size The size of the base quad\n     */\n    RotateableQuad.prototype.setSize = function (size) {\n        this.size = size;\n        this.base = [\n            new three_1.Vector4(0, size.height, 0, 1),\n            new three_1.Vector4(size.width, size.height, 0, 1),\n            new three_1.Vector4(0, 0, 0, 1),\n            new three_1.Vector4(size.width, 0, 0, 1),\n        ];\n        if (this.anchorType) {\n            this.calculateAnchor(this.anchorType);\n        }\n    };\n    /**\n     * This re-calculates the transform for this quad and applies the transform to\n     * the corners.\n     */\n    RotateableQuad.prototype.update = function () {\n        // Calculate the pieces of the transformation\n        var anchorMat = new three_1.Matrix4().makeTranslation(this.anchor.x, -this.anchor.y, 0);\n        var rotationMat = new three_1.Matrix4().makeRotationZ(this.rotation);\n        var locationMat = new three_1.Matrix4().makeTranslation(this.location.x, this.location.y, 0);\n        // Compose the transform based on the pieces and apply them\n        // In the proper compositing order\n        this.transform = new three_1.Matrix4()\n            .multiply(locationMat)\n            .multiply(rotationMat)\n            .multiply(anchorMat);\n        // Apply the transform to all of our base vertices\n        this.TL = this.base[0].clone().applyMatrix4(this.transform);\n        this.TR = this.base[1].clone().applyMatrix4(this.transform);\n        this.BL = this.base[2].clone().applyMatrix4(this.transform);\n        this.BR = this.base[3].clone().applyMatrix4(this.transform);\n        // Update the bounds of this object\n        this.x = this.TL.x;\n        this.y = this.TL.y;\n        this.width = 1;\n        this.height = 1;\n        this.encapsulatePoints([this.TR, this.BL, this.BR]);\n    };\n    return RotateableQuad;\n}(bounds_1.Bounds));\nexports.RotateableQuad = RotateableQuad;\nvar _a;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/rotateable-quad.ts\n// module id = 16\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A canvas element wrapper that aids in tracking a canvas element along with\n * content scaling properties.\n *\n * @class Sprite\n */\nvar Sprite = (function () {\n    //\n    // Ctor at the top below props\n    //\n    /**\n     * Creates an instance of Sprite.\n     *\n     * @param w             The width of the context to create\n     * @param h             The height of the context to create\n     * @param contentScaleX The content scaling of the content\n     * @param contentScaleY The content scaling of the content\n     *\n     * @memberOf Sprite\n     */\n    function Sprite(w, h, contentScaleX, contentScaleY) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n        var canvas = document.createElement('canvas');\n        if (canvas) {\n            this.scaleX = contentScaleX || this.scaleX;\n            this.scaleY = contentScaleY || this.scaleY;\n            canvas.width = w * this.scaleX;\n            canvas.height = h * this.scaleY;\n            this.context = canvas.getContext('2d');\n            this.canvas = canvas;\n        }\n    }\n    /**\n     * Retrieves the content scaling of this object\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentScale = function () {\n        return {\n            x: this.scaleX,\n            y: this.scaleY,\n        };\n    };\n    /**\n     * Retrieves the size of the content ignoring scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentSize = function () {\n        return {\n            height: this.canvas.height,\n            width: this.canvas.width,\n        };\n    };\n    /**\n     * Retrieves the dimensional width of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getWidth = function () {\n        return this.canvas.width / this.scaleX;\n    };\n    /**\n     * Retrieves the dimensional height of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getHeight = function () {\n        return this.canvas.height / this.scaleY;\n    };\n    return Sprite;\n}());\nexports.Sprite = Sprite;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/sprite.ts\n// module id = 17\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e.nativeEvent;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || e.nativeEvent.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/mouse.ts\n// module id = 18\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.bounds = null;\n        this.children = [];\n        this.childrenProps = [];\n        this.depth = 0;\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds(left, right, top, bottom);\n        }\n        else {\n            this.bounds = new bounds_1.Bounds(0, 1, 1, 0);\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        this.children = null;\n        this.bounds = null;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom < minY) {\n                minY = child.bottom;\n            }\n            if (child.y > maxY) {\n                maxY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds(minX, maxX, maxY, minY));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y += 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Collects all props associated with the children. This array of props will\n     * mirror the list retrieved with gatherChildren.\n     *\n     * @param list\n     *\n     * @returns The list specified as the list paramter\n     *\n     * @memberOf Node\n     */\n    Node.prototype.gatherProps = function (list) {\n        var _this = this;\n        this.children.forEach(function (c, index) {\n            list.push(_this.childrenProps[index]);\n        });\n        if (this.nodes) {\n            this.nodes.TL.gatherProps(list);\n            this.nodes.TR.gatherProps(list);\n            this.nodes.BL.gatherProps(list);\n            this.nodes.BR.gatherProps(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        this.childrenProps = [];\n        while (allChildren.length > 0) {\n            this.doAdd(allChildren.pop());\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/quad-tree.ts\n// module id = 19\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nvar WebGLStat = (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.printCurrentProgramInfo = function (debug, surface) {\n        if (surface.gl) {\n            var info = getProgramInfo(surface.gl, surface.gl.getParameter(surface.gl.CURRENT_PROGRAM));\n            var table = window.table;\n            if (table) {\n                table(info.uniforms);\n            }\n        }\n        else {\n            debug('Attempted to printProgramInfo but the surface has not established its gl context yet');\n        }\n    };\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    }\n}\ninitStats();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/webgl-stat.ts\n// module id = 20\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar curved_line_1 = require(\"../../primitives/curved-line\");\nvar line_1 = require(\"../../primitives/line\");\nvar point_1 = require(\"../../primitives/point\");\n/**\n * This defines a drawable curved line shape. It contains the information necessary\n * to efficiently render the line.\n *\n * @export\n * @class CurvedLineShape\n * @extends {CurvedLine<T>}\n * @template T An associated data type that can be linked to this shape to make data retrieval from interacting\n *             with the shape easier.\n */\nvar CurvedLineShape = (function (_super) {\n    __extends(CurvedLineShape, _super);\n    /**\n     * Creates an instance of CurvedLineShape.\n     *\n     * @param {ICurvedLineShapeOptions} options The options for creating this line\n     */\n    function CurvedLineShape(options) {\n        var _this = \n        // We pass our properties to the curve line but we do not let it cache it's version of the line segments\n        // As we will be constructing our own segmentation requiring a new type of cache\n        _super.call(this, options) || this;\n        /** Depeth of draw location */\n        _this.depth = 0;\n        /** How thick the line should be */\n        _this.lineWidth = 1;\n        _this.encapsulatePoints(_this.getTriangleStrip());\n        _this.cachesQuadSegments = options.cacheSegments;\n        _this.depth = options.depth || 0;\n        _this.lineWidth = options.lineWidth || 1;\n        _this.startColor = options.startColor;\n        _this.endColor = options.endColor;\n        return _this;\n    }\n    /**\n     * Returns a new instance of this object that mimicks the properties of this Object\n     *\n     * @returns {CurvedLineShape<T>} The cloned object\n     */\n    CurvedLineShape.prototype.clone = function () {\n        // Perform the clone\n        var clone = new CurvedLineShape({\n            cacheSegments: this.cachesSegments,\n            controlPoints: this.controlPoints,\n            end: this.end,\n            endColor: this.endColor,\n            lineWidth: this.lineWidth,\n            resolution: this.resolution,\n            start: this.start,\n            startColor: this.startColor,\n            type: this.type,\n        });\n        clone.d = this.d;\n        return clone;\n    };\n    /**\n     * @override\n     * See base definition\n     */\n    CurvedLineShape.prototype.distanceTo = function (point) {\n        return Math.max(0, _super.prototype.distanceTo.call(this, point) - (this.lineWidth / 2.0));\n    };\n    /**\n     * This produces a triangle strip that represents the quads that composes this line. If caching is present,\n     * subsequent calls to this method will be much faster unless the cache gets invalidated.\n     *\n     * @return {IPoint[]} The Triangle Strip of points to create the quads that make each segment of the curve\n     */\n    CurvedLineShape.prototype.getTriangleStrip = function () {\n        if (this.cachesSegments && this.cachedQuadSegments) {\n            return this.cachedQuadSegments;\n        }\n        // Make a container to hold our triangle strip info\n        var strip = [];\n        var normal = [];\n        // Start with calculating the line strip so we can use the line segments\n        // To produce the quads we need to render\n        var lineStrip = this.getLineStrip();\n        var lineWidthHalf = this.lineWidth / 2.0;\n        var line = new line_1.Line(point_1.Point.zero(), point_1.Point.zero());\n        // We make a container point for the scaling operation to reduce allocations\n        var scaledPoint = point_1.Point.zero();\n        // If the line strip is empty, then there is nothing to produce and makes\n        // Us unable to reduce the lineStrip, so return empty here\n        if (lineStrip.length < 2) {\n            return [];\n        }\n        // Calculate bisecting normal or each node\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            line.setPoints(lineStrip[i], lineStrip[i + 1]);\n            if (normal.length === 0) {\n                normal.push(line.perpendicular);\n            }\n            else {\n                // Sum of two normals of a point\n                var temp = {\n                    x: normal[i].x + line.perpendicular.x,\n                    y: normal[i].y + line.perpendicular.y,\n                };\n                // Normalize the sum of two normals\n                var sqrt = Math.sqrt(temp.x * temp.x + temp.y * temp.y);\n                temp.x = temp.x / sqrt;\n                temp.y = temp.y / sqrt;\n                normal[i] = temp;\n            }\n            normal.push(line.perpendicular);\n        }\n        // Use the new normals to generate quads\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            var previous = lineStrip[i];\n            var current = lineStrip[i + 1];\n            // TR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], -lineWidthHalf, scaledPoint), current));\n            // BR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], lineWidthHalf, scaledPoint), current));\n            // TL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], -lineWidthHalf, scaledPoint), previous));\n            // BL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], lineWidthHalf, scaledPoint), previous));\n        }\n        return strip;\n    };\n    /**\n     * @override\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     */\n    CurvedLineShape.prototype.setPoints = function (start, end, controlPoints) {\n        _super.prototype.setPoints.call(this, start, end, controlPoints);\n        this.cachedQuadSegments = [];\n    };\n    return CurvedLineShape;\n}(curved_line_1.CurvedLine));\nexports.CurvedLineShape = CurvedLineShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/curved-line-shape.ts\n// module id = 21\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar interpolation_1 = require(\"../util/interpolation\");\nvar bounds_1 = require(\"./bounds\");\nvar line_1 = require(\"./line\");\nvar point_1 = require(\"./point\");\nvar debug = require('debug')('bezier');\n/**\n * This enum covers the type of curved lines that can be made. Making a specific curve\n *\n * @export\n * @enum {number}\n */\nvar CurveType;\n(function (CurveType) {\n    /** This will make the curve be generated from interpolating between the end points and provided control points */\n    CurveType[CurveType[\"Bezier\"] = 0] = \"Bezier\";\n    /**\n     * This will draw a curve as though there is a circular arc passing over the two end points. The radius of the\n     * circular arc is determined by how far the control point is from the straight line that can be made from the two\n     * end points.\n     */\n    CurveType[CurveType[\"CircularCCW\"] = 1] = \"CircularCCW\";\n    CurveType[CurveType[\"CircularCW\"] = 2] = \"CircularCW\";\n    /**\n     * This ignores the control points altogether and just created a straight line with a single segment that consists\n     * of the specified endpoints\n     */\n    CurveType[CurveType[\"Straight\"] = 3] = \"Straight\";\n})(CurveType = exports.CurveType || (exports.CurveType = {}));\n// -------[ Distance Calculating Methods ]----------------------------\n/**\n * Calculates the distance to the bezier curve by testing all of the bezier curve's segment lines\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction bezierDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a circle\n * TODO: Using the segment approach for now. Can be sped up by using circle math\n * instead\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction circularDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a straight line\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction straightDistance(line, testPoint) {\n    return new line_1.Line(line.start, line.end).distanceTo(testPoint);\n}\n// -------[ Segment Generating Methods ]----------------------------\n/**\n * Uses quadratic bezier principles to create the segments for a quadratic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier2Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var lineEnd = line.end;\n    var c1 = line.controlPoints[0];\n    for (var i = 0, end = line.resolution; i <= end; ++i) {\n        segments.push(interpolation_1.bezier2(dt * i, start, lineEnd, c1));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Uses cubic bezier principles to create the segments for a cubic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier3Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var lineEnd = line.end;\n    var c1 = line.controlPoints[0];\n    var c2 = line.controlPoints[1];\n    for (var i = 0, end = line.resolution; i <= end; ++i) {\n        segments.push(interpolation_1.bezier3(dt * i, start, lineEnd, c1, c2));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that follows along a circular path on the line.\n * The distance the control point is from the straight line that flows through the two\n * end points of the line determines the radius of the curvature of the line\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeCircularCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    debug('CW');\n    // Generate a line so we can have a perpendicular calculation\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    var circleCenter = line.controlPoints[1];\n    if (!circleCenter) {\n        // We get the midpoint of the line as we want to align the center of the circle with this point\n        var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n        var minRadius = point_1.Point.getDistance(midPoint, line.start);\n        // The shortest the radius can be is the distance from the line to the mid point\n        // Anything shorter will just result in a hemisphere being rendered\n        if (radius < minRadius) {\n            radius = point_1.Point.getDistance(midPoint, line.start);\n        }\n        // Get the perpendicular direction to the line so we can calculate the center of our circle\n        // From the mid point\n        var perpendicular = straightLine.perpendicular;\n        var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n        // Calculate the location of the center of the circle\n        circleCenter = {\n            x: perpendicular.x * distance + midPoint.x,\n            y: perpendicular.y * distance + midPoint.y,\n        };\n        // Store the circle center as an extra control point in case the value is needed\n        // (which it often is)\n        line.controlPoints[1] = circleCenter;\n    }\n    debug(' center of circle is %o  %o', circleCenter.x, circleCenter.y);\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Calculate how much to increment theta in our parametric circular equation\n    if (theta1 < theta2)\n        theta1 += Math.PI * 2;\n    var dTheta = (theta1 - theta2) / line.resolution;\n    debug('theta1 is %o, theta2 is %o', theta1, theta2);\n    // Compute the segments based on the information we have gathered by applying it to a circular\n    // Parametric equation\n    var segments = [];\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 - (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 - (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    // Cache the segments if specified by the curved line\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    debug('Generated Circular Segments: %o dTheta: %o radius: %o', segments, dTheta, radius);\n    return segments;\n}\nfunction makeCircularCCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    var circleCenter = line.controlPoints[1];\n    if (!circleCenter) {\n        var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n        var minRadius = point_1.Point.getDistance(midPoint, line.start);\n        if (radius < minRadius) {\n            radius = point_1.Point.getDistance(midPoint, line.start);\n        }\n        var perpendicular = straightLine.perpendicular;\n        var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n        circleCenter = {\n            x: -perpendicular.x * distance + midPoint.x,\n            y: -perpendicular.y * distance + midPoint.y,\n        };\n        // Store the circle center as an extra control point in case the value is needed\n        // (which it often is)\n        line.controlPoints[1] = circleCenter;\n    }\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    if (theta2 < theta1)\n        theta2 += Math.PI * 2;\n    var dTheta = (theta2 - theta1) / line.resolution;\n    var segments = [];\n    // CCW, from end to start\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 + (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 + (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    if (line.cachedSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that is straight, thus only 1 segments is needed\n * and will be generated.\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeStraightSegments(line) {\n    return [line.start, line.end];\n}\n/** A quick lookup for a proper segment creating method for a curved line  */\nvar pickSegmentMethod = (_a = {},\n    _a[CurveType.Bezier] = [\n        null,\n        makeBezier2Segments,\n        makeBezier3Segments,\n    ],\n    _a[CurveType.CircularCW] = [\n        null,\n        makeCircularCWSegments,\n        makeCircularCWSegments,\n    ],\n    _a[CurveType.CircularCCW] = [\n        null,\n        makeCircularCCWSegments,\n        makeCircularCCWSegments,\n    ],\n    _a[CurveType.Straight] = [\n        makeStraightSegments,\n    ],\n    _a);\n/** A quick lookup for a proper distance calculating method for a curved line  */\nvar pickDistanceMethod = (_b = {},\n    _b[CurveType.Bezier] = bezierDistance,\n    _b[CurveType.CircularCW] = circularDistance,\n    _b[CurveType.CircularCCW] = circularDistance,\n    _b[CurveType.Straight] = straightDistance,\n    _b);\n/**\n * Defines an object which illustrates a curved line. Curved lines can be formed in many\n * ways but most often from two end points and some provided control points.\n *\n * @export\n * @class CurvedLine\n * @extends {Bounds<T>}\n * @template T An associated data type with this object. Use <never> if no data type is ever associated\n */\nvar CurvedLine = (function (_super) {\n    __extends(CurvedLine, _super);\n    /**\n     * Generates a primitive that describes a curved line, which is defined by the lines end points, type, and control points\n     *\n     * @param {ICurvedLineOptions} options The configuration options of this curved line\n     */\n    function CurvedLine(options) {\n        var _this = this;\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        _this = _super.call(this, minX, maxX, maxY, minY) || this;\n        // Apply the relevant properties to the curve\n        _this.cachesSegments = options.cacheSegments || false;\n        _this.type = options.type;\n        _this.resolution = options.resolution || 20;\n        // Set the metrics for this curved line\n        _this.setPoints(options.start, options.end, options.controlPoints);\n        // Set the method that will be used for calculating distance from a point\n        _this.distanceMethod = pickDistanceMethod[options.type];\n        return _this;\n    }\n    Object.defineProperty(CurvedLine.prototype, \"values\", {\n        get: function () {\n            return {\n                controlPoints: this.controlPoints,\n                end: this.end,\n                start: this.start,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the nearest distance from the provided point to this curved line\n     *\n     * @param {IPoint} point The point to test the distance from\n     *\n     * @returns {number} The calculated nearest distance from this curve to the point\n     */\n    CurvedLine.prototype.distanceTo = function (point) {\n        return this.distanceMethod(this, point);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {CurvedLine<any>[]} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    CurvedLine.getClosest = function (lines, point) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(point);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This returns the line strip that represents the curve. A line strip is specifically a group of points\n     * that forms line segments by taking the current point as one end and the previous point as the second end\n     * thus, you would start at index 1 and loop to the end to generate all of the lines composing this single\n     * line.\n     *\n     * @return {IPoint[]} All of the points in the line strip\n     */\n    CurvedLine.prototype.getLineStrip = function () {\n        return this.segmentMethod(this);\n    };\n    /**\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     * @param {boolean} preventRebounding If set, this will prevent the bounds from being recalculated\n     */\n    CurvedLine.prototype.setPoints = function (start, end, controlPoints) {\n        // Apply the points\n        this.start = start;\n        this.end = end;\n        if (controlPoints.length === 0)\n            debug('start: %o, end:%o', start, end);\n        // Get the available segment methods for the given type\n        var segmentMethods = pickSegmentMethod[this.type];\n        // If we adjust the control points we need to re-evaluate the type of segment creation method we use\n        if (controlPoints) {\n            this.controlPoints = controlPoints;\n            // Get the number of control points we want to base the curve off of\n            var numControlPoints = controlPoints.length;\n            // If we have more control points than the methods available, then we use the greatest method available to best\n            // Handle as many control points as possible\n            if (numControlPoints > segmentMethods.length) {\n                numControlPoints = segmentMethods.length - 1;\n            }\n            // Set the method that will be used for generating segments\n            this.segmentMethod = segmentMethods[numControlPoints];\n            // Make sure the input wasn't bad\n            if (!this.segmentMethod) {\n                throw new Error('An Invalid number of control points was provided to a curved line. You must have at LEAST 1 control point. Or 0 for a straight line');\n            }\n            if (this.type === CurveType.Bezier) {\n                this.encapsulatePoints(controlPoints);\n            }\n            else if (this.type === CurveType.CircularCCW || this.type === CurveType.CircularCW) {\n                this.encapsulatePoints(this.getLineStrip());\n            }\n        }\n        this.encapsulatePoint(start);\n        this.encapsulatePoint(end);\n        // Invalidate caches if they exist\n        this.cachedSegments = null;\n    };\n    return CurvedLine;\n}(bounds_1.Bounds));\nexports.CurvedLine = CurvedLine;\nvar _a, _b;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/curved-line.ts\n// module id = 22\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"./bounds\");\nvar UID = 0;\nvar Circle = (function (_super) {\n    __extends(Circle, _super);\n    /**\n     * Generate a new Circle object\n     *\n     * @param x The center of the circle\n     * @param y The center of the circle\n     * @param r The radius of the circle\n     * @param d A data object to associate with the circle\n     */\n    function Circle(x, y, r, d) {\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        /** a UID of the circle */\n        _this._id = ++UID;\n        /** Radius of the circle */\n        _this._radius = 0;\n        /** X coord of the center of the circle */\n        _this._centerX = 0;\n        /** Y coord of the center of the circle */\n        _this._centerY = 0;\n        _this._centerX = x;\n        _this._centerY = y;\n        _this._radius = r;\n        _this.d = d;\n        _this.updateBounds();\n        return _this;\n    }\n    Object.defineProperty(Circle.prototype, \"values\", {\n        get: function () {\n            return {\n                radius: this._radius,\n                x: this._centerX,\n                y: this._centerY,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"radius\", {\n        get: function () {\n            return this._radius;\n        },\n        set: function (val) {\n            this._radius = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerX\", {\n        get: function () {\n            return this._centerX;\n        },\n        set: function (val) {\n            this._centerX = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerY\", {\n        get: function () {\n            return this._centerY;\n        },\n        set: function (val) {\n            this._centerY = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Tests if the specified bounds is inside this circle\n     *\n     * @param b The bounds to test against\n     */\n    Circle.prototype.boundsInside = function (b) {\n        var r2 = this._radius * this._radius;\n        var dx = b.x - this._centerX;\n        var dy = b.y - this._centerY;\n        var dy2 = dy * dy;\n        var dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.right - this._centerX;\n        dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dy = b.bottom - this._centerY;\n        dy2 = dy * dy;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.x - this._centerX;\n        dx2 = dx * dx;\n        return (dx2 + dy2) < r2;\n    };\n    /**\n     * Calculates the distance to a provided point\n     *\n     * @param {IPoint} p The point to calculate the distance of the middle of the\n     *                   circle to\n     * @param {boolean} notSquared Flag true to prevent the Math.sqrt operation, leaving\n     *                             the result as distance^2\n     *\n     * @return {number} The distance from mid circle to the point\n     */\n    Circle.prototype.distanceTo = function (p, notSquared) {\n        var dx = this._centerX - p.x;\n        var dy = this._centerY - p.y;\n        if (notSquared) {\n            return dx * dx + dy * dy;\n        }\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n    /**\n     * Retrieves the closest circle to a provided point\n     *\n     * @param {Array} circles The circles to see who is the nearest\n     * @param {IPoint} p The point to compare the circles against for nearness\n     *\n     * @return {Circle} The nearest circle\n     */\n    Circle.getClosest = function (circles, p) {\n        var closestCircle;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        circles.forEach(function (circle) {\n            distance = circle.distanceTo(p, true);\n            if (distance < closestDistance) {\n                closestCircle = circle;\n                closestDistance = distance;\n            }\n        });\n        return closestCircle;\n    };\n    /**\n     * Tests if this circle is colliding with the specified circle\n     *\n     * @param c The circle to test against\n     *\n     * @return {boolean} True if colliding\n     */\n    Circle.prototype.hitCircle = function (c) {\n        var totalDistance = c._radius + this._radius;\n        totalDistance *= totalDistance;\n        return this.distanceTo({ x: c._centerX, y: c._centerY }, true) < totalDistance;\n    };\n    /**\n     * @override\n     * This makes it so the test of a point tests based on a Circle shape\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.hitPoint = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * If there are multiple metrics to update for the circle, this is the most\n     * efficient way to do that as it will update it's bounds only once.\n     *\n     * @param x\n     * @param y\n     * @param r\n     */\n    Circle.prototype.position = function (x, y, r) {\n        this._centerX = x;\n        this._centerY = y;\n        this._radius = r;\n        this.updateBounds();\n    };\n    /**\n     * @override\n     * Tests if a point is inside the circle\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.pointInside = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * When the circle gains different circle metrics, it's Bounds must adjust\n     * accordingly, which is what this method recalculates.\n     */\n    Circle.prototype.updateBounds = function () {\n        var radius = this._radius;\n        this.x = this._centerX - radius;\n        this.y = this._centerY - radius;\n        this.height = radius * 2;\n        this.width = radius * 2;\n    };\n    /**\n     * Pretty print the metrics of this circle\n     */\n    Circle.prototype.toString = function () {\n        return \"[Circle {x: \" + this._centerX + \", y: \" + this._centerY + \", r: \" + this._radius + \"}]\";\n    };\n    return Circle;\n}(bounds_1.Bounds));\nexports.Circle = Circle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/circle.ts\n// module id = 23\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar line_1 = require(\"../../primitives/line\");\n/**\n * Defines a line that can be drawn\n */\nvar LineShape = (function (_super) {\n    __extends(LineShape, _super);\n    /**\n     * Generate a new line that can be drawn\n     */\n    function LineShape(p1, p2, d, r, g, b, a, r2, g2, b2, a2, thickness) {\n        var _this = _super.call(this, p1, p2) || this;\n        // Color 1\n        _this.a = 0;\n        _this.b = 0;\n        _this.g = 0;\n        _this.r = 1;\n        // Color 2 ?\n        _this.a2 = 0;\n        _this.b2 = 0;\n        _this.g2 = 0;\n        _this.r2 = 1;\n        // Other properties\n        _this.cull = true;\n        _this.thickness = 1;\n        Object.assign(_this, {\n            a: a,\n            a2: a2,\n            b: b,\n            b2: b2,\n            d: d,\n            g: g,\n            g2: g2,\n            r: r,\n            r2: r2,\n        });\n        if (thickness !== undefined) {\n            _this.thickness = thickness;\n        }\n        return _this;\n    }\n    /**\n     * Clones this instance of the line shape and creates a new instance of a line shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this line shape\n     */\n    LineShape.prototype.clone = function (newProperties) {\n        return Object.assign(new LineShape(this.p1, this.p2, this.d, this.r, this.g, this.b, this.a, this.r2, this.g2, this.b2, this.a2), this, newProperties);\n    };\n    return LineShape;\n}(line_1.Line));\nexports.LineShape = LineShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/line-shape.ts\n// module id = 24\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shape_buffer_cache_1 = require(\"./shape-buffer-cache\");\n/** This is a part of the identifier that is used to retrieve a multibuffer's storage */\nvar multiBufferSelectionPrefix = '__mb__';\n/** This is to ensure each multibuffer gets it's own unique selection identifier */\nvar multiBufferSelectionKeyUID = 0;\nfunction getIDProp(item) {\n    return item.id;\n}\nfunction evenRoundRobinBufferAdd(item, buffers) {\n    var smallest = buffers[0].buffer.length;\n    var found = buffers[0];\n    // Look for the next buffer that has the smallest length\n    // To fill it up\n    buffers.some(function (tracker) {\n        if (tracker.buffer.length < smallest) {\n            found = tracker;\n            return true;\n        }\n        return false;\n    });\n    found.buffer.push(item);\n    return [found];\n}\nfunction noop() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // NO-OP\n}\nfunction echoBuffer(item, buffer, buffers) {\n    return [buffer];\n}\n/**\n * This class helps facilitate breaking up a potentially large shape buffer into multiple buffers.\n */\nvar MultiShapeBufferCache = (function (_super) {\n    __extends(MultiShapeBufferCache, _super);\n    /**\n     * Makes a new multi shape buffer for minimizing changes\n     *\n     * @param numBuffers The number of buffers this multibuffer will manage\n     */\n    function MultiShapeBufferCache(numBuffers, methods) {\n        var _this = _super.call(this) || this;\n        /** The number of buffers this multi buffer manages */\n        _this.numBuffers = 0;\n        /** UID for storing the data for this buffer in the selection */\n        _this.selectionUID = multiBufferSelectionPrefix + (++multiBufferSelectionKeyUID);\n        /**\n         * The method used to add to the buffers. This is changeable so one can implement geometric or\n         * logical adds for invalidation. This returns a list of buffers that will be invalidated from\n         * the operation. The first buffer returned in the invalidation is the strongly associated buffer\n         * to the item injected. This first buffer is the most likely buffer the item is injected into.\n         */\n        _this.addMethod = evenRoundRobinBufferAdd;\n        /**\n         * Gives an implentor opportunity to define the way an is is specified for a given item. It\n         * defaults to searching for an 'id' property on the item.\n         */\n        _this.idMethod = getIDProp;\n        /**\n         * The method that is called right after the initial buffers get constructed. This is changeable\n         * so monitors can.\n         */\n        _this.initMethod = noop;\n        /**\n         * The method that is called right before a shape is removed from a buffer.\n         * This let's the\n         */\n        _this.removeMethod = echoBuffer;\n        /**\n         * The method that is called when an item is updated. This gives a monitor a chance to invalidate\n         * a number of buffers.\n         */\n        _this.updateMethod = echoBuffer;\n        // Store the number of buffers that are created when the buffers are initialized\n        _this.numBuffers = numBuffers;\n        // Set the hook methods if any are specified\n        if (methods) {\n            _this.addMethod = methods.add || _this.addMethod;\n            _this.idMethod = methods.id || _this.idMethod;\n            _this.initMethod = methods.init || _this.initMethod;\n            _this.removeMethod = methods.remove || _this.removeMethod;\n            _this.updateMethod = methods.update || _this.updateMethod;\n        }\n        return _this;\n    }\n    /**\n     * Adds a shape to a buffer and invalidates it\n     *\n     * @param shape The shape to add to a buffer\n     */\n    MultiShapeBufferCache.prototype.addShape = function (shape) {\n        // Perform the custom add opearation\n        var buffers = this.addMethod(shape, this.store.allBuffers);\n        // Stores the shape for lookup via id\n        this.store.idToItem.set(this.idMethod(shape), shape);\n        // Stores the shape for lookup to buffer. We count the\n        // First dirty buffer as the buffer the item is the closest to\n        // Association.\n        this.store.itemToBuffer.set(shape, buffers[0]);\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    /**\n     * Sees if there is a shape associated with this id\n     *\n     * @param id\n     */\n    MultiShapeBufferCache.prototype.containsId = function (id) {\n        return Boolean(this.store.idToItem.get(id));\n    };\n    /**\n     * Sees if this shape has been added to this buffer or not\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.containsShape = function (shape) {\n        // Check if this multibuffer has the shape or no\n        return Boolean(this.store.itemToBuffer.get(shape));\n    };\n    /**\n     * This flags a list of buffers as dirty\n     *\n     * @param buffers\n     */\n    MultiShapeBufferCache.prototype.flagBuffersDirty = function (buffers) {\n        // Flag provided buffers as dirty\n        if (buffers) {\n            // This flags the indicated buffers as dirty\n            buffers.forEach(function (buffer) { return buffer.isDirty = true; });\n        }\n        else {\n            this.store.allBuffers.forEach(function (buffer) { return buffer.isDirty = true; });\n        }\n    };\n    /**\n     * @override\n     * This is called with triggers all of the updates necessary.\n     * We add in our buffer update and invalidation to this process here.\n     *\n     * @param args\n     */\n    MultiShapeBufferCache.prototype.generate = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Make sure the storage is established before trying to create modifications of any sort\n        this.getStorage(selection);\n        // Run the generation which will trigger cache building and modding\n        _super.prototype.generate.apply(this, arguments);\n        // We now invalidate any buffers that have been flagged\n        this.processDirtyBuffers();\n    };\n    /**\n     * @override\n     * This retrieves the multibuffer for this shape buffer\n     */\n    MultiShapeBufferCache.prototype.getBuffer = function () {\n        console.warn('A multishape buffer should have getBuffers called instead');\n        return [];\n    };\n    /**\n     * Get all of the buffers.\n     * WARNING: do NOT modify the output values in any way.\n     *\n     * @return {T[][]} All of the buffers\n     */\n    MultiShapeBufferCache.prototype.getBuffers = function () {\n        if (this.store) {\n            return this.store.allBuffers.map(function (tracker) { return tracker.buffer; });\n        }\n        return [];\n    };\n    /**\n     * Returns the number of buffers this MultiShapeBuffer is managing.\n     */\n    MultiShapeBufferCache.prototype.getNumBuffers = function () {\n        return this.store.allBuffers.length;\n    };\n    /**\n     * Retrieves a shape by the given id. Is undefined if the id is not recognized.\n     *\n     * @param id\n     */\n    MultiShapeBufferCache.prototype.getShapeById = function (id) {\n        return this.store.idToItem.get(id);\n    };\n    /**\n     * This makes all buffers a part of a new array pointer thus making sure\n     * they will be committed to the gpu.\n     */\n    MultiShapeBufferCache.prototype.processDirtyBuffers = function () {\n        this.store.allBuffers.forEach(function (tracker) {\n            if (tracker.isDirty) {\n                tracker.isDirty = false;\n                tracker.buffer = [].concat(tracker.buffer);\n            }\n        });\n    };\n    /**\n     * This retrieves the storage inside the selection. If it doesn't exist,\n     * then the storage is created.\n     *\n     * @param selection\n     */\n    MultiShapeBufferCache.prototype.getStorage = function (selection) {\n        // Get the storage from the selection\n        var storage = (selection.getSelection(this.selectionUID) || [])[0];\n        // If the storage is not stored in the selection, then we create a storage and update the selection with that storage\n        if (!storage) {\n            storage = {\n                allBuffers: [],\n                idToItem: new Map(),\n                itemToBuffer: new Map(),\n            };\n            // Generate the buffers indicated\n            for (var i = 0; i < this.numBuffers; ++i) {\n                storage.allBuffers.push({\n                    buffer: [],\n                    isDirty: false,\n                });\n            }\n            // Initialize anything that may be monitoring the buffers\n            this.initMethod(storage.allBuffers);\n            // Add the storage to the selection\n            selection.select(this.selectionUID, storage);\n        }\n        // Make sure our internal pointer to the storage is set correctly\n        return (this.store = storage);\n    };\n    /**\n     * Removes a shape from the buffer it is a part of.\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.removeShape = function (shape) {\n        // This is the buffer associated with the shape\n        var buffer = this.store.itemToBuffer.get(shape);\n        // Get the buffers invalidated by the remove\n        var buffers = this.removeMethod(shape, buffer, this.store.allBuffers);\n        // Clear the shape out from the buffer\n        buffer.buffer.splice(buffer.buffer.indexOf(shape), 1);\n        // Delete the item from the id lookup\n        this.store.idToItem.delete(this.idMethod(shape));\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    /**\n     * This is called to indicate an update to an item has occurred.\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.updateShape = function (shape) {\n        // Flag each element that needs updating\n        var buffers = this.updateMethod(shape, this.store.itemToBuffer.get(shape), this.store.allBuffers);\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    return MultiShapeBufferCache;\n}(shape_buffer_cache_1.ShapeBufferCache));\nexports.MultiShapeBufferCache = MultiShapeBufferCache;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/multi-shape-buffer-cache.ts\n// module id = 25\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar ShapeBufferCache = (function () {\n    function ShapeBufferCache() {\n        this.buffer = [];\n        this.bustCache = true;\n    }\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    ShapeBufferCache.prototype.generate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this.bustCache) {\n            this.buildCache.apply(this, args);\n            this.bustCache = false;\n        }\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    ShapeBufferCache.prototype.buildCache = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Get the buffer the cache has generated\n     */\n    ShapeBufferCache.prototype.getBuffer = function () {\n        return this.buffer;\n    };\n    return ShapeBufferCache;\n}());\nexports.ShapeBufferCache = ShapeBufferCache;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/shape-buffer-cache.ts\n// module id = 26\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./webgl-surface/webgl-surface\"));\n__export(require(\"./webgl-surface/buffers\"));\n__export(require(\"./webgl-surface/drawing\"));\n__export(require(\"./webgl-surface/primitives\"));\n__export(require(\"./webgl-surface/util\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.ts\n// module id = 27\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = require(\"ramda\");\nvar React = require(\"react\");\nvar three_1 = require(\"three\");\nvar atlas_manager_1 = require(\"./drawing/texture/atlas-manager\");\nvar atlas_texture_1 = require(\"./drawing/texture/atlas-texture\");\nvar bounds_1 = require(\"./primitives/bounds\");\nvar frame_info_1 = require(\"./util/frame-info\");\nvar mouse_1 = require(\"./util/mouse\");\nvar quad_tree_1 = require(\"./util/quad-tree\");\nvar webgl_stat_1 = require(\"./util/webgl-stat\");\nvar debug = require('debug')('webgl-surface:GPU');\nvar debugCam = require('debug')('webgl-surface:Camera');\nvar debugLabels = require('debug')('webgl-surface:Labels');\nvar debugColors = require('debug')('webgl-surface:Colors');\n/**\n * This enum names the base methods that are passed into the applyPropsMethods\n * method. This allows subclasses to easily pick the property setting methods they need\n * from the base\n */\nvar BaseApplyPropsMethods;\n(function (BaseApplyPropsMethods) {\n    /** Initializes any context that needs to be set up before the props are set */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"INITIALIZE\"] = 0] = \"INITIALIZE\";\n    /** Moment when any buffer changes should be applied */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"BUFFERCHANGES\"] = 1] = \"BUFFERCHANGES\";\n    /** Initializes camera properties to facilitate smoothe start up */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"CAMERA\"] = 2] = \"CAMERA\";\n    /** Generates the labels as images within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"LABELS\"] = 3] = \"LABELS\";\n    /** Generates the colors within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"COLORS\"] = 4] = \"COLORS\";\n})(BaseApplyPropsMethods = exports.BaseApplyPropsMethods || (exports.BaseApplyPropsMethods = {}));\n/**\n * This enum names the base methods that are passed into the animatedMethods\n * method. This allows subsclasses to easily pick the animated methods they need\n * from the base\n */\nvar BaseAnimatedMethods;\n(function (BaseAnimatedMethods) {\n    /** Sets up the base context needed to execute most methods */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"CONTEXT\"] = 0] = \"CONTEXT\";\n    /** Sets up the inertia method for inertial panning */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"INERTIA\"] = 1] = \"INERTIA\";\n    /** Animates the postion of the camera to a destination */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"POSITION\"] = 2] = \"POSITION\";\n    /** Zooms the camera based on a point of focus */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"ZOOM\"] = 3] = \"ZOOM\";\n})(BaseAnimatedMethods = exports.BaseAnimatedMethods || (exports.BaseAnimatedMethods = {}));\nfunction isAnimatedWithOptions(value) {\n    if (value.options) {\n        return true;\n    }\n    return false;\n}\nfunction isAnimated(value) {\n    if (!value.options) {\n        return true;\n    }\n    return false;\n}\n/** This is the smallest increment the zoom can make. Anything less and nothing will happen */\nvar MIN_ZOOM_INCREMENT = 0.001;\nvar BYTE_MAX = 0xFF;\nvar BACKGROUND_COLOR = new three_1.Color().setRGB(38 / BYTE_MAX, 50 / BYTE_MAX, 78 / BYTE_MAX);\n// --[ CONSTANTS ]-------------------------------------------\n// Make a container vector for performing operations within\nvar vector = new three_1.Vector3();\n// --[ SHADERS ]-------------------------------------------\n/**\n * Equivalent of Math.sign, but faster, and works in all browsers\n *\n * @param {number} value The number to determine the sign\n *\n * @return {number} Returns zero if a sign can not be determined, -1 for a negative, 1 for a positive\n */\nfunction sign(value) {\n    if (!value) {\n        return 0;\n    }\n    if (value > 0) {\n        return 1;\n    }\n    if (value < 0) {\n        return -1;\n    }\n    return 0;\n}\n/**\n * The base component for the communications view\n */\nvar WebGLSurface = (function (_super) {\n    __extends(WebGLSurface, _super);\n    function WebGLSurface() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** This is the atlas manager for managing images and labels rendered as textures */\n        _this.atlasManager = new atlas_manager_1.AtlasManager(2048, 2048);\n        /** Tracks the names of the atlas' generated */\n        _this.atlasNames = {\n            colors: 'colors',\n            labels: 'labels',\n        };\n        /**\n         * List of methods that execute within the animation loop. Makes adding and removing these methods\n         * simpler to manage, as well as gives a clear and optimized way of overriding existing methods\n         * or reordering their execution\n         */\n        _this.animatedMethodList = [];\n        /**\n         * If this is set to true during an animated method's lifecycle, then all subsequent animated methods\n         * will not be executed for the current frame. Upon reaching the end of the frame, the break will reset\n         * and the animated methods will attempt executing again\n         */\n        _this.animatedMethodBreak = false;\n        /**\n         * The camera that 'looks' at our world and gives us the ability to convert\n         * screen coordinates to world coordinates, and vice versa\n         */\n        _this.camera = null;\n        /**\n         * While this number is positive it will be decremented every frame.\n         * While positive, mouse interactions will not occur. This utilizes frame ticks\n         * as SOME values and numbers settle per frame, not necessarily within timelapses.\n         * More often than not, there will only be a need for 1-2 frames of mouse disable to\n         * allow the camera to be positioned in a correct location before screen to world projections\n         * start taking place.\n         */\n        _this.disableMouseInteraction = 0;\n        /** Used to aid in mouse interactions */\n        _this.distance = 0;\n        _this.sizeCamera = null;\n        /** Keep track of the current zoom so it can be set in requestAnimationFrame */\n        _this.currentZoom = 1;\n        /** Horizontal destination the camera will pan to */\n        _this.destinationX = 0;\n        /** Vertical position the camera will pan to */\n        _this.destinationY = 0;\n        /** The destination zoom level the camera used during panning */\n        _this.destinationZoom = 1;\n        /** Is the camera currently in a panning state */\n        _this.isPanning = false;\n        /** Last known screen position of the mouse */\n        _this.lastMousePosition = { x: 0, y: 0 };\n        /** List of methods to execute when applying props */\n        _this.propsMethodList = [];\n        /** Inertial values for drag panning */\n        _this.inertia = null;\n        _this.inertiaBuild = 1.5;\n        _this.inertiaDecay = .9;\n        _this.inertiaMax = 100;\n        /**\n         * All data is put into this quad tree so we can query spatial regions for\n         * items\n         */\n        _this.quadTree = null;\n        /**\n         * True if the shift key is currently being held\n         *\n         * Panning is affected by whether or not the shift key is being held down, but\n         * I don't know how yet.\n         */\n        _this.shiftIsDown = false;\n        _this.stop = false;\n        /** The current rendered position and zoom */\n        _this.currentX = 0;\n        _this.currentY = 0;\n        _this.targetZoom = 1;\n        /** The (world) position the focus will zoom in and out of */\n        _this.previousZoomToFit = 0;\n        _this.zoomTargetX = 0;\n        _this.zoomTargetY = 0;\n        /** When this is set, the draw loop continues to run. Used by the draw loop to complete animations */\n        _this.animating = false;\n        _this.labels = [];\n        _this.labelsReady = false;\n        /**\n         * This is the latest labels loading identifier, used to determine if the labels\n         * last loaded matches the labels currently needing to be rendered.\n         */\n        _this.labelsCurrentLoadedId = 0;\n        _this.labelsLoadId = 0;\n        /** When this is set to true, the atlas with the colors is now ready to be referenced */\n        _this.colors = [];\n        _this.colorsReady = false;\n        /** Holds the items currently hovered over */\n        _this.currentHoverItems = [];\n        /** Mouse in stage or not */\n        _this.dragOver = true;\n        /** Flag for detecting whether or not webgl is supported at all */\n        /**\n         * This is the update loop that operates at the requestAnimationFrame speed.\n         * This updates the cameras current position and causes changes over time for\n         * any property that has a start and a destination.\n         */\n        _this.animate = function () {\n            if (_this.stop) {\n                return;\n            }\n            frame_info_1.FrameInfo.lastFrameTime = Date.now();\n            frame_info_1.FrameInfo.framesPlayed.set(_this, (frame_info_1.FrameInfo.framesPlayed.get(_this) || 0) + 1);\n            requestAnimationFrame(function () { return _this.animate(); });\n            var response;\n            var doDraw = false;\n            var didBreak = _this.animatedMethodList.some(function (method) {\n                if (isAnimatedWithOptions(method)) {\n                    if (method.options.labelsReady && method.options.colorsReady) {\n                        if (_this.labelsReady && _this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.labelsReady) {\n                        if (_this.labelsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.colorsReady) {\n                        if (_this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                }\n                else if (isAnimated(method)) {\n                    response = method();\n                }\n                // Update our draw status based on response\n                if (!doDraw) {\n                    doDraw = response.doDraw;\n                }\n                // Stop the system if needed\n                if (response.stop) {\n                    _this.stop = true;\n                }\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            // We prevent any animation loop execution if we did break\n            if (didBreak) {\n                return;\n            }\n            // Make sure all camera related uniforms are up to date\n            _this.updateCameraUniforms();\n            // Handle the deactivation period of mouse interactions by decrementing it\n            // If it's positive\n            if (_this.disableMouseInteraction > 0) {\n                _this.disableMouseInteraction--;\n            }\n            if (doDraw || _this.forceDraw) {\n                _this.forceDraw = false;\n                _this.emitViewport();\n                _this.draw();\n            }\n        };\n        /**\n         * Applies new props injected into this component.\n         *\n         * Applying new props does not entail that a re-render will happen so we\n         * handle application of props as a separate concept. Here we:\n         *\n         * set up zoom targetting and apply quested zoom levels\n         *\n         * Create our quad tree and associate properties to objects if a new dataset\n         * is provided\n         *\n         * Analyze our dataset for interesting and useful metrics such as max and mins\n         * to aid in visualization normalization\n         *\n         * @param {T} props The new properties for this component\n         */\n        _this.applyProps = function (props) {\n            debug('Applying props');\n            var response;\n            _this.propsMethodList.some(function (method) {\n                response = method(props);\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            debugCam('current cam', _this.currentX, _this.currentY, _this.destinationX, _this.destinationY);\n            debugCam('Zoom Target: [%o, %o]', _this.zoomTargetX, _this.zoomTargetY);\n            debugCam('Last Mouse: [%o, %o]', _this.lastMousePosition.x, _this.lastMousePosition.y);\n        };\n        /**\n         * This is the draw method executed from the animation loop. Everytime, this is\n         * called, the webgl surface will be redrawn.\n         */\n        _this.draw = function () {\n            // Draw the 3D scene\n            _this.renderer.render(_this.scene, _this.camera);\n        };\n        /**\n         * This initializes the surface and calls for sub class classes to initialize\n         * their buffers\n         *\n         * @param {HTMLElement} el The DOM element this component is contained in\n         * @param {number} w The width of the rendering\n         * @param {number} h The height of the rendering\n         */\n        _this.init = function (el, w, h) {\n            if (!el || _this.scene) {\n                return;\n            }\n            _this.renderEl = el;\n            if (w === 0 || h === 0) {\n                return;\n            }\n            debug('Initializing GPU objects el: %o width: %o height: %o', el, w, h);\n            // Set up a ctx for our render space\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2.0,\n                width: w,\n                widthHalf: w / 2.0,\n            };\n            // Set up the camera now that the ctx is set up\n            _this.initCamera();\n            // Create a scene so we can add our buffer objects to it\n            // We also add the scene to the window to make threejs tools available\n            window.scene = _this.scene = new three_1.Scene();\n            // Fire our hook for starting up our specific buffer implementation\n            _this.initBuffers();\n            // FINALIZE SET UP\n            // Generate the renderer along with it's properties\n            _this.renderer = new three_1.WebGLRenderer({\n                alpha: _this.props.backgroundColor && (_this.props.backgroundColor.opacity < 1.0),\n                antialias: true,\n                preserveDrawingBuffer: true,\n            });\n            // This sets the pixel ratio to handle differing pixel densities in screens\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            // Applies the background color and establishes whether or not the context supports\n            // Alpha or not\n            if (_this.props.backgroundColor) {\n                _this.renderer.setClearColor(new three_1.Color(_this.props.backgroundColor.r, _this.props.backgroundColor.g, _this.props.backgroundColor.b), _this.props.backgroundColor.opacity);\n            }\n            else {\n                _this.renderer.setClearColor(BACKGROUND_COLOR);\n            }\n            // We render shapes. We care not for culling.\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            // Set up DOM interaction with the renderer\n            var container = el;\n            container.appendChild(_this.renderer.domElement);\n            // Get the gl context for queries and advanced operations\n            _this.gl = _this.renderer.domElement.getContext('webgl');\n            _this.makeDraggable(document.getElementById('div'), _this);\n        };\n        /**\n         * Initializes the camera and any contexts associated with it\n         */\n        _this.initCamera = function () {\n            debug('Initializing Camera');\n            // INITIALIZE THE CAMERA\n            var h = _this.ctx.height;\n            var viewSize = h;\n            var w = _this.ctx.width;\n            var aspectRatio = w / h;\n            var viewport = {\n                aspectRatio: aspectRatio,\n                bottom: -viewSize / 2,\n                far: 10000000,\n                left: (-aspectRatio * viewSize) / 2,\n                near: -100,\n                right: (aspectRatio * viewSize) / 2,\n                top: viewSize / 2,\n                viewSize: viewSize,\n            };\n            _this.camera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.sizeCamera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.camera.position.z = 300;\n            _this.sizeCamera.position.set(0, 0, 300);\n        };\n        /**\n         * This is executed when our rendering surface (the canvas) changes in size in any\n         * way. It will make sure our renderer matches the context to prevent scaling\n         * and other deformations.\n         */\n        _this.resizeContext = function () {\n            var w = _this.props.width;\n            var h = _this.props.height;\n            // See if a renderer even exists yet\n            if (!_this.renderer) {\n                return false;\n            }\n            var renderSize = _this.renderer.getSize();\n            // Check if the resize is needed\n            if (renderSize.width === w && renderSize.height === h) {\n                return false;\n            }\n            debug('RENDERER RESIZE');\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2,\n                width: w,\n                widthHalf: w / 2,\n            };\n            var zoom = _this.camera.zoom;\n            var position = _this.camera.position.clone();\n            _this.initCamera();\n            _this.camera.zoom = zoom;\n            _this.camera.position.set(position.x, position.y, position.z);\n            _this.camera.updateProjectionMatrix();\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            if (_this.props.backgroundColor) {\n                var color = _this.props.backgroundColor;\n                _this.renderer.setClearColor(new three_1.Color(color.r, color.g, color.b), color.opacity < 1.0 ? color.opacity : undefined);\n            }\n            else {\n                _this.renderer.setClearColor(BACKGROUND_COLOR);\n            }\n            return true;\n        };\n        /**\n         * This method handles emitting the viewport and the current visible elements\n         * to the subclass that needs detailed information regarding the viewport.\n         */\n        _this.emitViewport = function () {\n            var tl = _this.screenToWorld(0, 0);\n            var br = _this.screenToWorld(_this.ctx.width, _this.ctx.height);\n            _this.camera.updateMatrixWorld(true);\n            var visible = _this.quadTree.query(new bounds_1.Bounds(tl.x, br.x, tl.y, br.y));\n            _this.onViewport(visible, _this.projection, _this.ctx);\n        };\n        /**\n         * Handles mouse interactions when the mouse is pressed on the canvas. This\n         * engages panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseDown = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = true;\n            _this.distance = 0;\n            _this.onMouseDown();\n        };\n        /**\n         * Handles mouse interactions when the mouse is release or left the canvas. This\n         * stops panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseOut = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            _this.distance = 0;\n            _this.onMouseOut();\n        };\n        /**\n         * Handles mouse interactions when the mouse is released on the canvas. This\n         * stops panning and engages click events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseUp = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            // Handle mouse interaction\n            if (_this.distance < 5) {\n                var hitInside = [];\n                // Circle Interaction\n                var hitItems = _this.quadTree.query(world);\n                for (var _i = 0, hitItems_1 = hitItems; _i < hitItems_1.length; _i++) {\n                    var item = hitItems_1[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                    }\n                }\n                // Tell the listener that the user clicked on some items\n                if (hitInside.length) {\n                    _this.onMouseUp(e, hitInside, mouse, world, _this.projection);\n                }\n                else {\n                    _this.onMouseUp(e, null, mouse, world, _this.projection);\n                }\n            }\n        };\n        /**\n         * Handles mouse interactions when the mouse is moving on the canvas. This\n         * causes panning and hover events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseMove = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            var onMouse = _this.props.onMouse;\n            var zoom = _this.props.zoom;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            _this.distance++;\n            debug('mouse X %o Y %o', mouse.x, mouse.y);\n            // Handle panning\n            if (_this.isPanning) {\n                debug('down and moving ~~');\n                var xDistance = (mouse.x - _this.lastMousePosition.x) / _this.targetZoom;\n                var yDistance = -(mouse.y - _this.lastMousePosition.y) / _this.targetZoom;\n                // Execute the hook to allow subclasses\n                var pan = _this.willPan(xDistance, yDistance);\n                xDistance = pan.x;\n                yDistance = pan.y;\n                _this.destinationX -= xDistance;\n                _this.destinationY -= yDistance;\n                _this.inertia = _this.inertia || { x: 0, y: 0 };\n                if (sign(xDistance) !== sign(_this.inertia.x)) {\n                    _this.inertia.x = 0;\n                }\n                if (sign(yDistance) !== sign(_this.inertia.y)) {\n                    _this.inertia.y = 0;\n                }\n                _this.inertia.x = xDistance * _this.inertiaBuild;\n                _this.inertia.y = yDistance * _this.inertiaBuild;\n                var maxInertia = _this.inertiaMax / zoom;\n                var mag = Math.sqrt(_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y);\n                // Make sure the magnitude of the inertia is less than our max allowed\n                if (mag > maxInertia) {\n                    // Since it's greater, let's confine the inertia's magnitude to the max magnitude\n                    // By normalizing the intertia vector and multilying it by the max\n                    _this.inertia.x = (_this.inertia.x / mag) * maxInertia;\n                    _this.inertia.y = (_this.inertia.y / mag) * maxInertia;\n                }\n            }\n            if (_this.quadTree && !_this.isPanning) {\n                // Empty the last hovered items to populate a new list\n                var currentHoverItems = [];\n                // Handle mouse interaction with items\n                // Interaction with circles\n                var hitItems = _this.quadTree.query(world);\n                var hitInside = [];\n                for (var _i = 0, hitItems_2 = hitItems; _i < hitItems_2.length; _i++) {\n                    var item = hitItems_2[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                        currentHoverItems.push(item);\n                    }\n                }\n                // Inform of all items hit or hovered\n                _this.onMouseHover(hitInside, mouse, world, _this.projection);\n                // Diff the currently hovered items with the old ones to see what is\n                // No longer hit\n                var left = [];\n                for (var _a = 0, _b = _this.currentHoverItems; _a < _b.length; _a++) {\n                    var item = _b[_a];\n                    if (currentHoverItems.indexOf(item) < 0) {\n                        left.push(item);\n                    }\n                }\n                // Inform of all items no longer hovered\n                _this.onMouseLeave(left, mouse, world, _this.projection);\n                _this.currentHoverItems = currentHoverItems;\n            }\n            if (onMouse) {\n                _this.onMouse(mouse, world, _this.isPanning);\n            }\n            _this.lastMousePosition = mouse;\n        };\n        /**\n         * We make the ref application be a declared function so react does not find the need to execute the\n         * application numerous times for a detected changed method\n         *\n         * @param {HTMLElement} n This is the canvas element from the dom\n         */\n        _this.applyRef = function (n) {\n            _this.init(n, _this.props.width, _this.props.height);\n            _this.applyProps(_this.props);\n        };\n        return _this;\n    }\n    /**\n     * This is a hook so subclasses can contribute animated methods to the animation loop and organize the base methods\n     * as desired.\n     *\n     * @param {AnimatedMethodLookup} baseAnimatedMethods The base animated methods referenceable by name\n     * @param {AnimatedMethod[]} orderedBaseAnimatedMethods The base animated methods in their default order for ease of use\n     *\n     * @return {AnimatedMethods[]} The list of animated methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.animatedMethods = function (baseAnimatedMethods, orderedBaseAnimatedMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBaseAnimatedMethods;\n    };\n    /**\n     * This generates the base animated methods lookup.\n     * We do not make these methods a part of the class as this is the base class\n     * We want the start up methods to be inconsequential to sub classes, thus allowing\n     * us to override, sort, or replace the initial methods and have the method get garbage\n     * collected and no longer a part of the object. It is recommended to make the sub classes\n     * actually point to class methods for better clarity\n     *\n     * @return {ANimatedMethodLookup} The base animated methods in a lookup\n     */\n    WebGLSurface.prototype.animatedMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            // Context changes and early checks\n            _a[BaseAnimatedMethods.CONTEXT] = function () {\n                var response = {\n                    break: false,\n                    doDraw: false,\n                };\n                if (_this.resizeContext()) {\n                    response.doDraw = true;\n                }\n                // Quadtree MUST be present to do proper computations\n                if (!_this.quadTree) {\n                    response.break = true;\n                }\n                return response;\n            },\n            // Apply inertia\n            _a[BaseAnimatedMethods.INERTIA] = function () {\n                if (!_this.isPanning) {\n                    if (_this.inertia) {\n                        // Disabled inertia for now\n                        // This.destinationX -= this.inertia.x\n                        // This.destinationY -= this.inertia.y\n                        _this.inertia.x *= _this.inertiaDecay;\n                        _this.inertia.y *= _this.inertiaDecay;\n                        if (_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y < 1) {\n                            _this.inertia = null;\n                        }\n                    }\n                }\n                // A non response\n                return {\n                    doDraw: false,\n                };\n            },\n            // Apply position\n            _a[BaseAnimatedMethods.POSITION] = function () {\n                // If values are transitioned rather than immediately applied, this is\n                // The value you would want the minimum change to be before cutting off\n                // The transition\n                // Const minAdjust = 1 / this.props.zoom\n                // If there is change in X apply the new position to the old\n                // This is where animated values were originally placed and can be placed\n                // Again if a transition is desired\n                var response = {\n                    doDraw: (_this.currentX !== _this.destinationX) || (_this.currentY !== _this.destinationY),\n                };\n                _this.currentX = _this.destinationX;\n                _this.currentY = _this.destinationY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            // Apply zooming\n            _a[BaseAnimatedMethods.ZOOM] = function () {\n                var response = {\n                    doDraw: false,\n                };\n                // Apply Zoom\n                // Const zoomToFitH = this.ctx.width / Math.max(this.quadTree.bounds.width, this.props.viewport.width);\n                // Const zoomToFitV = this.ctx.height / Math.max(this.quadTree.bounds.height, this.props.viewport.height);\n                // Const zoomToFit = Math.min(zoomToFitH, zoomToFitV);\n                var zoomToFit = 1;\n                var destZoom = _this.destinationZoom * zoomToFit;\n                var dZoom = Math.abs(destZoom - _this.targetZoom);\n                var minDZoom = MIN_ZOOM_INCREMENT;\n                var zoomRate = 3;\n                if (dZoom > minDZoom) {\n                    _this.targetZoom = _this.targetZoom + ((destZoom - _this.targetZoom) / zoomRate);\n                    response.doDraw = true;\n                }\n                else if (dZoom !== 0) {\n                    _this.targetZoom = destZoom;\n                    response.doDraw = true;\n                }\n                // Get the zoom target metrics before zooming\n                var zoomTargetX = _this.zoomTargetX;\n                var zoomTargetY = _this.zoomTargetY;\n                var screenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Update the camera zoom level\n                _this.zoomCamera(_this.targetZoom);\n                // After we have zoomed we see how much our target location moved on screen\n                var newScreenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Now we move our screen by the moved delta to keep it exactly where it was before hand\n                var zoomDX = -(newScreenZoomTarget.x - screenZoomTarget.x) / _this.targetZoom;\n                var zoomDY = (newScreenZoomTarget.y - screenZoomTarget.y) / _this.targetZoom;\n                _this.currentX -= zoomDX;\n                _this.currentY -= zoomDY;\n                _this.destinationX -= zoomDX;\n                _this.destinationY -= zoomDY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for subclasses to be able to apply buffer changes that rely\n     * on colors rendered into the atlas after the system has prepped the colors for render.\n     */\n    WebGLSurface.prototype.applyColorBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * This is a hook for subclasses to be able to apply label buffer changes after the system has\n     * prepped the labels for render.\n     */\n    WebGLSurface.prototype.applyLabelBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * @override\n     * This is a hook so subclasses can contribute property application methods to the applyProps process and organize the base methods\n     * as desired.\n     *\n     * @param {ApplyPropsMethodLookup<T>} basePropsMethods The base props methods referenceable by name\n     * @param {ApplyPropsMethod<T>[]} orderedBasePropsMethods The base animated methods in their default order for ease of use\n     *\n     * @return {ApplyPropsMethod<T>[]} The list of property application methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.applyPropsMethods = function (basePropsMethods, orderedBasePropsMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBasePropsMethods;\n    };\n    /**\n     * This is a hook so subclasses can contribute methods to the applying props procedure and organize the base methods\n     * as desired.\n     *\n     * @return {ApplyPropsMethodLookup<T>} The base apply props method that are indexed for ease of reference\n     */\n    WebGLSurface.prototype.applyPropsMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            _a[BaseApplyPropsMethods.INITIALIZE] = function (props) {\n                var backgroundColor = props.backgroundColor, height = props.height, width = props.width;\n                _this.init(_this.renderEl, width, height);\n                if (!_this.renderEl || width === 0 || height === 0) {\n                    return {\n                        break: true,\n                    };\n                }\n                // Get the target for zooming\n                if (_this.camera) {\n                    var world = _this.screenToWorld(_this.lastMousePosition.x, _this.lastMousePosition.y);\n                    _this.zoomTargetX = world.x;\n                    _this.zoomTargetY = world.y;\n                }\n                if (_this.renderer && backgroundColor) {\n                    var oldColor = _this.props.backgroundColor || {\n                        b: BACKGROUND_COLOR.b,\n                        g: BACKGROUND_COLOR.g,\n                        opacity: 1.0,\n                        r: BACKGROUND_COLOR.r,\n                    };\n                    var same = oldColor.r === backgroundColor.r &&\n                        oldColor.g === backgroundColor.g &&\n                        oldColor.b === backgroundColor.b &&\n                        oldColor.opacity === backgroundColor.opacity;\n                    if (!same) {\n                        _this.renderer.setClearColor(new three_1.Color(backgroundColor.r, backgroundColor.g, backgroundColor.b), \n                        // Only if a transparent background is specified should we\n                        // Allow the parameter. We avoid the parameter to ensure\n                        // Transparent mode it not activated unless absolutely necessary\n                        backgroundColor.opacity < 1 ? backgroundColor.opacity : undefined);\n                    }\n                }\n                debug('props', props);\n                return {};\n            },\n            _a[BaseApplyPropsMethods.LABELS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.labels && props.labels !== _this.labels) {\n                    debugLabels('Labels are being comitted to an Atlas %o', props.labels);\n                    // Flag the labels as incapable of rendering\n                    _this.labelsReady = false;\n                    _this.labelsLoadId++;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.labels = props.labels;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.labels)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.labels);\n                    }\n                    var textures = props.labels.map(function (label) { return new atlas_texture_1.AtlasTexture(null, label); });\n                    debugLabels('Creating the atlas for labels based on these textures %o', textures);\n                    _this.atlasManager.createAtlas(_this.atlasNames.labels, textures)\n                        .then(function () {\n                        debugLabels('Labels rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.labels));\n                        _this.forceDraw = true;\n                        _this.labelsCurrentLoadedId++;\n                        // If we are done loading AND we match up with the current load id, then labels\n                        // For the latest labels update are indeed ready for display\n                        if (_this.labelsCurrentLoadedId === _this.labelsLoadId) {\n                            _this.labelsReady = true;\n                        }\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.COLORS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.colors && props.colors !== _this.colors) {\n                    debugColors('Colors are being comitted to an Atlas %o', props.colors);\n                    // Flag the labels as incapable of rendering\n                    _this.colorsReady = false;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.colors = props.colors;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.colors)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.colors);\n                    }\n                    debugColors('Creating the atlas for colors based on these colors %o', _this.colors);\n                    _this.atlasManager.createAtlas(_this.atlasNames.colors, null, _this.colors)\n                        .then(function () {\n                        debugColors('Colors rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.colors));\n                        _this.forceDraw = true;\n                        _this.colorsReady = true;\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.BUFFERCHANGES] = function (props) {\n                // Call the hook to allow sub componentry to have a place to update it's buffers\n                _this.applyBufferChanges(props);\n                // We call the label buffering when the labels are ready to render.\n                // Labels now utilize the color atlas as well, thus requiring colors\n                // To be loaded\n                if (_this.labelsReady && _this.colorsReady) {\n                    debugLabels('labels changed %o', props);\n                    _this.applyLabelBufferChanges(props);\n                }\n                // For resources that only need the color atlas to be ready\n                if (_this.colorsReady) {\n                    _this.applyColorBufferChanges(props);\n                }\n                if (_this.onRender && _this.colorsReady && _this.labelsReady) {\n                    var imageData = _this.renderer.domElement.toDataURL();\n                    _this.onRender(imageData);\n                }\n                return {};\n            },\n            _a[BaseApplyPropsMethods.CAMERA] = function (props) {\n                _this.destinationZoom = props.zoom;\n                // On initialization this should start with some base camera metrics\n                if (props.viewport && props.viewport !== _this.appliedViewport && _this.quadTree) {\n                    debugCam('Applying viewport to camera: %o World Space Bounds: %o Screen context: %o', props.viewport, _this.quadTree.bounds, { width: props.width, height: props.height });\n                    // Position the camera over the mid of the specified viewport\n                    var mid = props.viewport.mid;\n                    _this.currentX = _this.destinationX = mid.x;\n                    _this.currentY = _this.destinationY = mid.y;\n                    // Calculate the zoom level when the input zoom is at 1\n                    var zoomAtOne = 1;\n                    // Calculate the zoom needed for the viewport\n                    var zoomToFitViewH = props.width / props.viewport.width;\n                    var zoomToFitViewV = props.height / props.viewport.height;\n                    var zoomToFit = Math.min(zoomToFitViewH, zoomToFitViewV);\n                    // This adjusts the destination zxoom by a tiny amount so the view will redraw\n                    var microAdjustment = 1.001;\n                    // Make our destination zoom a zoom that will fit the dimensions of the viewport\n                    // Relative to the zoom at one level\n                    _this.destinationZoom = zoomToFit / zoomAtOne;\n                    _this.targetZoom = (_this.destinationZoom * zoomAtOne) * microAdjustment;\n                    // Make sure any zooming that happens occurs over the middle of the initial viewport\n                    _this.zoomTargetX = mid.x;\n                    _this.zoomTargetY = mid.y;\n                    // Make sure mouse position doesn't mess with the zooming focus either\n                    _this.lastMousePosition.x = props.width / 2.0;\n                    _this.lastMousePosition.y = props.height / 2.0;\n                    // Apply the values immediately to the camera\n                    _this.positionCamera(_this.currentX, _this.currentY);\n                    _this.zoomCamera(_this.targetZoom);\n                    _this.updateCameraUniforms();\n                    // We request the calculated zoom level so adjustments on the input can be made\n                    if (props.onZoomRequest) {\n                        props.onZoomRequest(_this.destinationZoom);\n                        debugCam('Requesting zoom level', _this.destinationZoom);\n                    }\n                    // Let's disable mouse interactions for a little bit until the camera has settled into place\n                    var framesToDisable = 10;\n                    _this.disableMouseInteraction = framesToDisable;\n                    _this.appliedViewport = props.viewport;\n                    debugCam('init cam', _this.currentX, _this.currentY);\n                }\n                // Ensure we have our quad tree available even if it is empty\n                if (!_this.quadTree) {\n                    _this.quadTree = new quad_tree_1.QuadTree(0, 1, 1, 0);\n                }\n                return {};\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for sub components to have a location to update their buffers\n     *\n     * @param {T} props This is the next set of props that are going to be applied to this component\n     */\n    WebGLSurface.prototype.applyBufferChanges = function (props) {\n        // NOTE: This will be implemented by base classes\n    };\n    /**\n     * @override\n     * Start the update loop and register any interesting listeners\n     */\n    WebGLSurface.prototype.componentDidMount = function () {\n        this.animate();\n    };\n    /**\n     * @override\n     * This will set up any unchanging context as well as establish the set of methods\n     * that are to be used within constructed method loops.\n     */\n    WebGLSurface.prototype.componentWillMount = function () {\n        /** Create our context bound projection methods for handing to processes that may need them */\n        this.projection = {\n            screenSizeToWorld: this.screenSizeToWorld.bind(this),\n            screenToWorld: this.screenToWorld.bind(this),\n            worldSizeToScreen: this.worldSizeToScreen.bind(this),\n            worldToScreen: this.worldToScreen.bind(this),\n        };\n        /** Generate our applying props methods to execute within our applyProps process */\n        var basePropsMethods = this.applyPropsMethodsBase();\n        this.propsMethodList = this.applyPropsMethods(basePropsMethods, [\n            basePropsMethods[BaseApplyPropsMethods.INITIALIZE],\n            basePropsMethods[BaseApplyPropsMethods.LABELS],\n            basePropsMethods[BaseApplyPropsMethods.COLORS],\n            basePropsMethods[BaseApplyPropsMethods.BUFFERCHANGES],\n            basePropsMethods[BaseApplyPropsMethods.CAMERA],\n        ]);\n        /** Generate our animated methods to execute within our animation loop */\n        var baseAnimatedMethods = this.animatedMethodsBase();\n        this.animatedMethodList = this.animatedMethods(baseAnimatedMethods, [\n            baseAnimatedMethods[BaseAnimatedMethods.CONTEXT],\n            baseAnimatedMethods[BaseAnimatedMethods.INERTIA],\n            baseAnimatedMethods[BaseAnimatedMethods.POSITION],\n            baseAnimatedMethods[BaseAnimatedMethods.ZOOM],\n        ]);\n    };\n    /**\n     * @override\n     * Simply applies the new injected props\n     *\n     * @param {T} props The new properties to be applied to this component\n     */\n    WebGLSurface.prototype.componentWillReceiveProps = function (props) {\n        this.applyProps(props);\n    };\n    /**\n     * @override\n     * Release listeners and stop update loop\n     */\n    WebGLSurface.prototype.componentWillUnmount = function () {\n        this.stop = true;\n        if (this.quadTree) {\n            this.quadTree.destroy();\n        }\n        this.quadTree = null;\n        this.camera = null;\n        this.sizeCamera = null;\n        this.ctx = null;\n        this.renderEl = null;\n        this.renderer = null;\n        this.scene = null;\n        this.atlasManager.destroyAtlas(this.atlasNames.colors);\n        this.atlasManager.destroyAtlas(this.atlasNames.labels);\n        frame_info_1.FrameInfo.framesPlayed.delete(this);\n    };\n    /**\n     * This is a hook allowing sub classes to have a place to initialize their buffers\n     * and materials etc.\n     */\n    WebGLSurface.prototype.initBuffers = function () {\n        // NOTE: This is to be implemented by subclasses\n    };\n    WebGLSurface.prototype.onRender = function (image) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to when the mouse moves. Provides some information\n     * about mouse location and interaction.\n     *\n     * @param {IPoint} mouse Position of the mouse relative to the canvas\n     * @param {IPoint} world Position of the mouse relative to the world space\n     * @param {boolean} isPanning The panning state of the mouse\n     */\n    WebGLSurface.prototype.onMouse = function (mouse, world, isPanning) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse down events\n     */\n    WebGLSurface.prototype.onMouseDown = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse out events\n     */\n    WebGLSurface.prototype.onMouseOut = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse up events and the items that were interacted with in the process\n     *\n     * @param {React.MouseEvent} e The react synthetic event associated with the action\n     * @param {Bounds[]} hitInside The items the mouse interacted with\n     * @param {IPoint} mouse The location of the mouse on the screen\n     * @param {IPoint} world The location of the mouse projected into the world\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseUp = function (e, hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse hovering over an item included in the quadtree\n     *\n     * @param {Bounds[]} hitInside The items hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseHover = function (hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse leaving an item included in the quadtree\n     *\n     * @param {Bounds[]} left The items no longer hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseLeave = function (left, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to changes in the viewport and currently visible items\n     *\n     * @param {Bounds[]} visible\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     * @param {IScreenContext} ctx\n     */\n    WebGLSurface.prototype.onViewport = function (visible, projection, ctx) {\n        // NOTE: For subclasses\n    };\n    WebGLSurface.prototype.makeDraggable = function (element, stage) {\n        element.onmousedown = function (event) {\n            debug('DRAG~');\n            stage.dragOver = false;\n            document.onmousemove = function (event) {\n                debug('Move');\n                var mouseX = event.clientX;\n                var mouseY = event.clientY + window.scrollY;\n                var distanceX = (mouseX - stage.lastMousePosition.x) / stage.targetZoom;\n                var distanceY = (mouseY - stage.lastMousePosition.y) / stage.targetZoom;\n                stage.destinationX -= distanceX;\n                stage.destinationY += distanceY;\n                stage.lastMousePosition.x = mouseX;\n                stage.lastMousePosition.y = mouseY;\n            };\n            document.onmouseup = function () {\n                debug('Up');\n                document.onmousemove = null;\n                stage.isPanning = false;\n                stage.dragOver = true;\n            };\n            document.onmouseover = function () {\n                debug('Over');\n                if (stage.dragOver === false)\n                    stage.isPanning = true;\n            };\n            element.onmouseup = function () {\n                stage.dragOver = true;\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () { return false; };\n        };\n    };\n    /**\n     * Places the camera at a given location in world space\n     *\n     * @param {number} x The x-coordinate for the camera in world space\n     * @param {number} y The x-coordinate for the camera in world space\n     */\n    WebGLSurface.prototype.positionCamera = function (x, y) {\n        if (this.camera) {\n            this.camera.position.set(Math.floor(x), Math.floor(y), this.camera.position.z);\n        }\n    };\n    /**\n     * Projects a screen coordinate to a world coordinate\n     *\n     * @param {number} x The x coord within the screen to project into the world\n     * @param {number} y The y coord within the screen to project into the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenToWorld = function (x, y, obj) {\n        // Get the coordinates in normalized screen space\n        vector.set((x / this.ctx.width) * 2 - 1, -(y / this.ctx.height) * 2 + 1, 0.0);\n        // Unproject the normalized space to the world. It will project\n        // The vector to a REALLY far away z coordinate, but it does not matter\n        // Since we are utilizing an orthographic camera (no perspective distortion)\n        vector.unproject(this.camera);\n        obj = obj || { x: 0, y: 0 };\n        obj.x = vector.x;\n        obj.y = vector.y;\n        return obj;\n    };\n    /**\n     * Projects a size on the screen to the size represented in the world\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenSizeToWorld = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        obj.height = h / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        return obj;\n    };\n    /**\n     * Projects a world coordinate to the screen\n     *\n     * @param {number} x The x coord in the world to project to the screen\n     * @param {number} y The y coord in the world to project to the screen\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {IPoint} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldToScreen = function (x, y, obj) {\n        // This projects to NORMALIZED screen space (-1, 1) range for x and y\n        vector.set(x, y, 0);\n        vector.project(this.camera);\n        // Use the window dimensions to denormalize the vector\n        obj = ramda_1.merge(obj || {}, {\n            x: (vector.x * this.ctx.widthHalf) + this.ctx.widthHalf,\n            y: -(vector.y * this.ctx.heightHalf) + this.ctx.heightHalf,\n        });\n        return obj;\n    };\n    /**\n     * Projects a size within the world to how it would appear on the screen\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldSizeToScreen = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w * this.sizeCamera.zoom;\n        obj.height = h * this.sizeCamera.zoom;\n        return obj;\n    };\n    /**\n     * Sets the zoom level the camera will view the world with\n     *\n     * @param {number} zoom The zoom level. Must be > 0\n     */\n    WebGLSurface.prototype.zoomCamera = function (zoom) {\n        this.camera.zoom = zoom;\n        this.sizeCamera.zoom = zoom;\n        this.camera.updateProjectionMatrix();\n        this.sizeCamera.updateProjectionMatrix();\n    };\n    /**\n     * This is a hook allowing a sub class to update uniforms when the camera is changed in\n     * any way\n     */\n    WebGLSurface.prototype.updateCameraUniforms = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * @override\n     * Only re-render if the dimensions of the component have changed. All other\n     * internal render updates are handled internally\n     *\n     * @param {T} nextProps The next properties injected\n     */\n    WebGLSurface.prototype.shouldComponentUpdate = function (nextProps) {\n        return this.props.width !== nextProps.width || this.props.height !== nextProps.height;\n    };\n    /**\n     * Hook to allow subclasses some control over panning distances\n     *\n     * @param {number} distanceX The distance to pan in the x direction\n     * @param {number} distanceY The distance to pan in the y direction\n     *\n     * @return {Vector3} The vector indicating the direction to pan\n     */\n    WebGLSurface.prototype.willPan = function (distanceX, distanceY) {\n        return new three_1.Vector3(distanceX, distanceY, 0.0);\n    };\n    // -----[ Render ]---------------------------------------------\n    //\n    // In a React app, it's nice to put the render function at the bottom of the\n    // File\n    /**\n     * This should only attempt rendering when the canvas DOM element needs to be resized.\n     * You will note shouldComponentUpdate helps facilitate this.\n     */\n    WebGLSurface.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, width = _a.width, height = _a.height;\n        if (!webgl_stat_1.WebGLStat.WEBGL_SUPPORTED) {\n            return React.createElement(\"div\", null, this.props.children || 'Web GL not supported');\n        }\n        return (React.createElement(\"div\", { id: \"div\", onMouseDown: this.handleMouseDown, onMouseOut: this.handleMouseOut, onMouseUp: this.handleMouseUp, onMouseLeave: this.handleMouseOut, onMouseMove: this.handleMouseMove, onDoubleClick: function (e) {\n                if (_this.props.onDoubleClick) {\n                    _this.props.onDoubleClick(e);\n                }\n            }, style: { position: 'relative', width: width, height: height } },\n            React.createElement(\"div\", { ref: this.applyRef })));\n    };\n    return WebGLSurface;\n}(React.Component));\nexports.WebGLSurface = WebGLSurface;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/webgl-surface.tsx\n// module id = 28\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_29__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = 29\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process/browser.js\n// module id = 30\n// module chunks = 0","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/debug/src/debug.js\n// module id = 31\n// module chunks = 0","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ms/index.js\n// module id = 32\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_33__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bowser\"\n// module id = 33\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./animated/shared-control-curved-line-buffer-ants\"));\n__export(require(\"./animated/shared-control-curved-line-colors-buffer\"));\n__export(require(\"./base-buffer\"));\n__export(require(\"./static/shared-control-curved-line-buffer\"));\n__export(require(\"./static/simple-bezier-line-buffer\"));\n__export(require(\"./static/simple-label-buffer\"));\n__export(require(\"./static/simple-line-buffer\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/index.ts\n// module id = 34\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBufferAnts = (function (_super) {\n    __extends(SharedControlCurvedLineBufferAnts, _super);\n    function SharedControlCurvedLineBufferAnts() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBufferAnts.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'marching',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBufferAnts.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var marchingAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        var antLength;\n        var antGap;\n        var antSpeed;\n        var controlPoint;\n        var controlRef;\n        // We can not accurately send very large numbers via float point into the attributes\n        // So we trim down our time sent to the attribute down to a number that is less than\n        // 16,777,217 which means we can only reliably grab the last 7 digits of the date's time\n        var antStartTime = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            // We will not render the curved line with this buffer if the marching ants are not provided\n            if (!curvedLine.marchingAnts) {\n                console.error('Attempted to render a curved line shape with a marching ant buffer but provided no marching ant metrics. This curved line shape will be skipped', curvedLine);\n                return \"continue\";\n            }\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            antGap = curvedLine.marchingAnts.gapLength;\n            antSpeed = curvedLine.marchingAnts.speed;\n            antLength = curvedLine.marchingAnts.strokeLength + curvedLine.marchingAnts.gapLength;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos, marching, mpos, controlPick, cpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[cpos] = controlRef;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                marching[mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++cpos] = controlRef;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBufferAnts;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBufferAnts = SharedControlCurvedLineBufferAnts;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/animated/shared-control-curved-line-buffer-ants.ts\n// module id = 35\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineColorsBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineColorsBuffer, _super);\n    function SharedControlCurvedLineColorsBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'colorPicks',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'timing',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var uniforms;\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var timingAttributeSize = 2;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorStartStop;\n        var colorEnd;\n        var colorEndStop;\n        var alpha;\n        var startTime;\n        var duration;\n        var controlRef;\n        var controlPoint;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorEnd = curvedLine.endColor.base.colorIndex;\n            colorEndStop = curvedLine.endColorStop.base.colorIndex;\n            colorStart = curvedLine.startColor.base.colorIndex;\n            colorStartStop = curvedLine.startColorStop.base.colorIndex;\n            duration = curvedLine.duration;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.currentStart;\n            p2 = curvedLine.currentEnd;\n            startTime = curvedLine.startTime;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colorPicks, cpos, controlPick, ctpos, timing, tpos, normals, npos, endPoints, epos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                controlPick[ctpos] = controlRef;\n                cpos += colorAttributeSize;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[wpos] = halfWidthSize;\n                normals[npos] = 1;\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                tpos += timingAttributeSize;\n                // TR\n                colorPicks[cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[tpos] = startTime;\n                timing[++tpos] = duration;\n                // BR\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // TL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // BL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++ctpos] = controlRef;\n            }, \n            // We force updates for this buffer since it has animated properties\n            // Such as currentStartStop and currentEndStop which calculates\n            // Animations on the CPU side.\n            true);\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineColorsBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineColorsBuffer = SharedControlCurvedLineColorsBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/animated/shared-control-curved-line-colors-buffer.ts\n// module id = 36\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineBuffer, _super);\n    function SharedControlCurvedLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBuffer.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        var controlPoint;\n        var controlRef;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos, controlPick, cpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[cpos] = controlRef;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++cpos] = controlRef;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBuffer = SharedControlCurvedLineBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/shared-control-curved-line-buffer.ts\n// module id = 37\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This ONLY supports a single color\n */\nvar SimpleStaticBezierLineBuffer = (function (_super) {\n    __extends(SimpleStaticBezierLineBuffer, _super);\n    function SimpleStaticBezierLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticBezierLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0, 0],\n                name: 'controlPoint',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticBezierLineBuffer.prototype.update = function (shapeBuffer) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var color;\n        var alpha;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            color = curvedLine.startColor.base.color;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colors, cpos, normals, npos, endPoints, epos, controlPoints, copos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                cpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticBezierLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticBezierLineBuffer = SimpleStaticBezierLineBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-bezier-line-buffer.ts\n// module id = 38\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\nvar SimpleStaticLabelBuffer = (function (_super) {\n    __extends(SimpleStaticLabelBuffer, _super);\n    function SimpleStaticLabelBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLabelBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 1],\n                name: 'texCoord',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'size',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0, 0],\n                name: 'anchor',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLabelBuffer.prototype.update = function (shapeBuffer, atlasManager, startFade, endFade, labelMaxSize) {\n        // Make some constants and props for our buffer update loop\n        var numVerticesPerQuad = 6;\n        var label;\n        var texture;\n        var color;\n        var alpha;\n        var anchor;\n        var labelSize;\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].color;\n            var colorBase = colorRef.base;\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            atlas.needsUpdate = true;\n            if (startFade || endFade || labelMaxSize) {\n                material = this.bufferItems.system.material;\n                uniforms = material.uniforms;\n                if (startFade)\n                    uniforms.startFade.value = startFade;\n                if (endFade)\n                    uniforms.endFade.value = endFade;\n                if (labelMaxSize)\n                    uniforms.maxLabelSize.value = labelMaxSize;\n            }\n        }\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        var updated = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this.bufferItems, numVerticesPerQuad, shapeBuffer.length, function (i, positions, ppos, colors, cpos, texCoords, tpos, sizes, spos, anchors, apos) {\n            label = shapeBuffer[i];\n            texture = label.rasterizedLabel;\n            color = label.color.base;\n            alpha = label.color.base.opacity;\n            anchor = {\n                x: label.getLocation().x + label.getSize().width * Math.cos(label.getRotation()),\n                y: label.getLocation().y + label.getSize().width * Math.sin(label.getRotation()),\n            };\n            labelSize = label.getSize();\n            // Make sure the label is updated with it's latest metrics\n            label.update();\n            // Copy first vertex twice for intro degenerate tri\n            positions[ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            texCoords[tpos] = texture.atlasTR.x;\n            texCoords[++tpos] = texture.atlasTR.y;\n            texCoords[++tpos] = alpha;\n            colors[cpos] = color.colorIndex;\n            sizes[spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // TR\n            positions[++ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasTR.x;\n            texCoords[++tpos] = texture.atlasTR.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BR\n            positions[++ppos] = label.BR.x;\n            positions[++ppos] = label.BR.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBR.x;\n            texCoords[++tpos] = texture.atlasBR.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // TL\n            positions[++ppos] = label.TL.x;\n            positions[++ppos] = label.TL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasTL.x;\n            texCoords[++tpos] = texture.atlasTL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BL\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBL.x;\n            texCoords[++tpos] = texture.atlasBL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // Copy last vertex again for degenerate tri\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBL.x;\n            texCoords[++tpos] = texture.atlasBL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n        });\n        this.bufferItems.geometry.setDrawRange(0, numVerticesPerQuad * shapeBuffer.length);\n        return updated;\n    };\n    return SimpleStaticLabelBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLabelBuffer = SimpleStaticLabelBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-label-buffer.ts\n// module id = 39\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\nvar SimpleStaticLineBuffer = (function (_super) {\n    __extends(SimpleStaticLineBuffer, _super);\n    function SimpleStaticLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLineBuffer.prototype.update = function (shapeBuffer) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        var needsUpdate = false;\n        var numVerticesPerSegment = 6;\n        var colorAttributeSize = 4;\n        var stripPos = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var TR;\n        var BR;\n        var TL;\n        var BL;\n        var color;\n        var alpha;\n        var _loop_1 = function (curvedLine) {\n            var strip = curvedLine.getTriangleStrip();\n            color = curvedLine.startColor.base.color;\n            alpha = curvedLine.startColor.base.opacity;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, strip.length / 4, function (i, positions, ppos, colors, cpos) {\n                stripPos = i * 4;\n                TR = strip[stripPos];\n                BR = strip[stripPos + 1];\n                TL = strip[stripPos + 2];\n                BL = strip[stripPos + 3];\n                // 1\n                positions[ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n                // 2\n                positions[++ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 3\n                positions[++ppos] = BR.x;\n                positions[++ppos] = BR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 4\n                positions[++ppos] = TL.x;\n                positions[++ppos] = TL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 5\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 6\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n            });\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLineBuffer = SimpleStaticLineBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-line-buffer.ts\n// module id = 40\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./reference/reference-color\"));\n__export(require(\"./animation/animated-curved-line-shape\"));\n__export(require(\"./shape/circle-shape\"));\n__export(require(\"./shape/curved-line-shape\"));\n__export(require(\"./shape/edge-shape\"));\n__export(require(\"./shape/image-shape\"));\n__export(require(\"./shape/label\"));\n__export(require(\"./shape/line-shape\"));\n__export(require(\"./shape/quad-shape\"));\n__export(require(\"./texture/atlas-color\"));\n__export(require(\"./texture/atlas-manager\"));\n__export(require(\"./texture/atlas-texture\"));\n__export(require(\"./texture/sprite\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/index.ts\n// module id = 41\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines a reference to a color that has been rendered to a texture\n * (See AtlasColor). This exposes the only properties that MAY be utilized\n * in a shader to modify the existing values without altering what is rendered\n * on the texture.\n */\nvar ReferenceColor = (function () {\n    /**\n     * Creates an instance of ReferenceColor.\n     *\n     * @param {AtlasColor} base The color to be based off of\n     */\n    function ReferenceColor(base) {\n        this.base = base;\n    }\n    return ReferenceColor;\n}());\nexports.ReferenceColor = ReferenceColor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/reference/reference-color.ts\n// module id = 42\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar easing_1 = require(\"../../util/easing\");\nvar frame_info_1 = require(\"../../util/frame-info\");\nvar interpolation_1 = require(\"../../util/interpolation\");\nvar curved_line_shape_1 = require(\"../shape/curved-line-shape\");\n/**\n * This represents curved lines and what it would take to animate various properties.\n * While this provides helpers to aid in animating the properties, it is up to\n * buffers, shaders and materials to render those changes appropriately.\n */\nvar AnimatedCurvedLineShape = (function (_super) {\n    __extends(AnimatedCurvedLineShape, _super);\n    function AnimatedCurvedLineShape(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This defines the suggested easing for the animation for any of\n         * the values.\n         */\n        _this.easing = easing_1.linear;\n        _this._startColorChange = new three_1.Color(0, 0, 0);\n        _this._endColorChange = new three_1.Color(0, 0, 0);\n        /** The starting end point's destination */\n        _this.startStop = { x: 0, y: 0 };\n        _this.endStop = { x: 0, y: 0 };\n        /**\n         * This calculates the current start color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentStartColor = new three_1.Color(0, 0, 0);\n        /**\n         * This calculates the current end color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentEndColor = new three_1.Color(0, 0, 0);\n        if (options) {\n            _this.startStop = options.startStop || { x: 0, y: 0 };\n            _this.endStop = options.endStop || { x: 0, y: 0 };\n            if (options.startColorStop) {\n                _this.startColorStop = options.startColorStop;\n            }\n            if (options.endColorStop) {\n                _this.endColorStop = options.endColorStop;\n            }\n        }\n        return _this;\n    }\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"startColorStop\", {\n        get: function () {\n            return this._startColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._startColorStop = value;\n            this._startColorChange.r = newBase.r - startBase.r;\n            this._startColorChange.g = newBase.g - startBase.g;\n            this._startColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"endColorStop\", {\n        get: function () {\n            return this._endColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._endColorStop = value;\n            this._endColorChange.r = newBase.r - startBase.r;\n            this._endColorChange.g = newBase.g - startBase.g;\n            this._endColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStartColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var startBase = this.startColor.base.color;\n            this._currentStartColor.r = this.easing(time, startBase.r, this._startColorChange.r, this.duration);\n            this._currentStartColor.g = this.easing(time, startBase.g, this._startColorChange.g, this.duration);\n            this._currentStartColor.b = this.easing(time, startBase.b, this._startColorChange.b, this.duration);\n            return this._currentStartColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEndColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var endBase = this.endColor.base.color;\n            this._currentEndColor.r = this.easing(time, endBase.r, this._endColorChange.r, this.duration);\n            this._currentEndColor.g = this.easing(time, endBase.g, this._endColorChange.g, this.duration);\n            this._currentEndColor.b = this.easing(time, endBase.b, this._endColorChange.b, this.duration);\n            return this._currentEndColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStart\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            var newStart = interpolation_1.circular(easedTime, this.start, this.startStop, this.controlPoints[1]);\n            return newStart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEnd\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            // Apply the circular interpolation to the points\n            return interpolation_1.circular(easedTime, this.end, this.endStop, this.controlPoints[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimatedCurvedLineShape;\n}(curved_line_shape_1.CurvedLineShape));\nexports.AnimatedCurvedLineShape = AnimatedCurvedLineShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/animation/animated-curved-line-shape.ts\n// module id = 43\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = require(\"d3-color\");\nvar circle_1 = require(\"../../primitives/circle\");\n/**\n * Defines a circular shape that can be drawn\n */\nvar CircleShape = (function (_super) {\n    __extends(CircleShape, _super);\n    /**\n     * Sets the properties of the shape to be drawn\n     *\n     * @param x Center of the circle\n     * @param y Center of the circle\n     * @param r The radius of the circle\n     * @param color The color of the circle\n     * @param color The color within the inner radius of the circle\n     * @param innerR The inner radius of the circle\n     * @param d A data object to associate with this circle\n     */\n    function CircleShape(x, y, r, color, innerColor, innerR, d) {\n        var _this = _super.call(this, x, y, r, d) || this;\n        // Color\n        _this.r = 0;\n        _this.g = 0;\n        _this.b = 0;\n        _this.a = 0;\n        // Inner radius color\n        _this.r2 = 0;\n        _this.g2 = 0;\n        _this.b2 = 0;\n        _this.a2 = 0;\n        // Other properties\n        _this.alpha = 0;\n        _this.innerRadius = 0;\n        _this.ringWidth = 0;\n        _this.ringPad = 0;\n        _this.outline = false;\n        if (color) {\n            // FIXME: This is solving a bizarre potential race condition (or other voodoo) where the numbers are not being\n            // Applied correctly to this object when applying the d3 color object properties to this.\n            var r_1 = color.r, g = color.g, b = color.b, opacity = color.opacity;\n            _this.setOuterColor({ r: r_1, g: g, b: b, opacity: opacity });\n        }\n        if (innerR === undefined) {\n            innerR = 0;\n        }\n        _this.innerRadius = innerR;\n        if (innerColor) {\n            _this.setInnerColor(innerColor);\n        }\n        return _this;\n    }\n    /**\n     * Sets the color of the outer drawn radius\n     *\n     * @param color\n     */\n    CircleShape.prototype.setOuterColor = function (color) {\n        var r = color.r, g = color.g, b = color.b, opacity = color.opacity;\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = opacity;\n    };\n    /**\n     * Sets the color of the inner drawn radius\n     *\n     * @param color\n     */\n    CircleShape.prototype.setInnerColor = function (color) {\n        this.r2 = color.r;\n        this.g2 = color.g;\n        this.b2 = color.b;\n        this.a2 = color.opacity;\n    };\n    /**\n     * Clones this instance of the circle shape and creates a new instance of a circle shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this circleshape\n     */\n    CircleShape.prototype.clone = function (newProperties) {\n        return Object.assign(new CircleShape(this._centerX, this._centerY, this._radius, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.innerRadius, this.d), this, newProperties);\n    };\n    /**\n     * Clones this instance of the circle shape and creates a new instance of a circle shape that\n     * is identical to this one. This will perform the clone but will change the data type\n     * associated with the circle in the cloned instance\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this circleshape\n     */\n    CircleShape.prototype.cloneWithData = function (newProperties) {\n        return Object.assign(new CircleShape(this._centerX, this._centerY, this._radius, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.innerRadius), this, newProperties);\n    };\n    return CircleShape;\n}(circle_1.Circle));\nexports.CircleShape = CircleShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/circle-shape.ts\n// module id = 44\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = require(\"d3-color\");\nvar line_1 = require(\"../../primitives/line\");\nvar line_shape_1 = require(\"./line-shape\");\n/**\n * This defines an edge that can be drawn.\n * This type of edge is a quad with distorted ends. The quad will represent a\n * line with each end having potentially different sizes thus giving a four sided\n * polygon rather than a parallelogram.\n *\n * The edge shape also doubles up as a simple line shape should it be desired to\n * render differently.\n */\nvar EdgeShape = (function (_super) {\n    __extends(EdgeShape, _super);\n    /**\n     * Constructor with basic parameters to declare an edge\n     *\n     * @param p1 The point the edge begins at\n     * @param p2 The point the edge terminates at\n     * @param d The data associated with the edge\n     * @param p1Col The color at the start point\n     * @param p2Col The color at the end point\n     * @param p1Width The width at the start point. Example: if you specify 4, then\n     *                the start part of the edge will fan out 2 on either side of the\n     *                start point\n     * @param p2Width The width at the end point. Example: if you specify 4, then\n     *                the end part of the edge will fan out 2 on either side of the\n     *                end point\n     */\n    function EdgeShape(p1, p2, d, p1Col, p2Col, p1Width, p2Width) {\n        var _this = \n        // Set up all of our line shape based metrics\n        _super.call(this, p1, p2, d, p1Col.r, p1Col.g, p1Col.b, p1Col.opacity, p2Col.r, p2Col.g, p2Col.b, p2Col.opacity, p1Width) || this;\n        /** Top left of the quad to generate this edge */\n        _this.tl = { x: 0, y: 0 };\n        /** Bottom left of the quad to generate this edge */\n        _this.bl = { x: 0, y: 0 };\n        /** Top right of the quad to generate this edge */\n        _this.tr = { x: 0, y: 0 };\n        /** Bottom Right of the quad to generate this edge */\n        _this.br = { x: 0, y: 0 };\n        /** The width of the edge at the termination point */\n        _this.endWidth = 1;\n        _this.endWidth = p2Width;\n        _this.setPoints(p1, p2);\n        return _this;\n    }\n    /**\n     * Clones this instance of the edge shape and creates a new instance of an edge shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {EdgeShape} A newly cloned instance of this edgeshape\n     */\n    EdgeShape.prototype.clone = function (newProperties) {\n        return Object.assign(new EdgeShape(this.p1, this.p2, this.d, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.thickness, this.endWidth), this, newProperties);\n    };\n    /**\n     * Algorithm provided by\n     * https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n     * Adapted to Javascript by Chris @ VoidRay co\n     *\n     * Remember the point must be in the same\n     * coordinate system that the edge is using\n     *\n     * @param {number} point The point to test\n     *\n     * @return {boolean} True if the point is inside the edge\n     */\n    EdgeShape.prototype.pointInside = function (point) {\n        var testx = point.x;\n        var testy = point.y;\n        // This is an algortihm to handle any number of points for a polygon. In this\n        // Case our polygon is simply the points that make this fat edge. Note:\n        // The points MUST be in CW order\n        var points = [this.tl, this.tr, this.br, this.bl];\n        var numberVertices = points.length;\n        var isClockwise = false;\n        for (var i = 0, j = numberVertices - 1; i < numberVertices; j = i++) {\n            if (((points[i].y > testy) !== (points[j].y > testy)) &&\n                (testx < (points[j].x - points[i].x) * (testy - points[i].y) /\n                    (points[j].y - points[i].y) + points[i].x)) {\n                isClockwise = !isClockwise;\n            }\n        }\n        return isClockwise;\n    };\n    /**\n     * @override\n     * This sets the two endpoints for this edge and recalculates the bounds\n     * of the edge accordingly.\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    EdgeShape.prototype.setPoints = function (p1, p2) {\n        _super.prototype.setPoints.call(this, p1, p2);\n        if (this.tl) {\n            // Get the distance from the points we will go based on specified widths\n            var p1Dx = this.thickness / 2;\n            var p2Dx = this.endWidth / 2;\n            // Calculate the deltas to get from point to quad edge\n            var p1DeltaX = this.perpendicular.x * p1Dx;\n            var p1DeltaY = this.perpendicular.y * p1Dx;\n            var p2DeltaX = this.perpendicular.x * p2Dx;\n            var p2DeltaY = this.perpendicular.y * p2Dx;\n            // Apply the metrics to our quad points\n            // Start side of the edge\n            this.tl.x = this.p1.x + p1DeltaX;\n            this.tl.y = this.p1.y + p1DeltaY;\n            this.bl.x = this.p1.x - p1DeltaX;\n            this.bl.y = this.p1.y - p1DeltaY;\n            // End side of the edge\n            this.tr.x = this.p2.x + p2DeltaX;\n            this.tr.y = this.p2.y + p2DeltaY;\n            this.br.x = this.p2.x - p2DeltaX;\n            this.br.y = this.p2.y - p2DeltaY;\n            // Create lines for the edges for computations and faster hit detections\n            this.topEdge = new line_1.Line(this.tl, this.tr);\n            this.bottomEdge = new line_1.Line(this.bl, this.br);\n            // Make sure our bounds reflects the entirety of the fat edge\n            this.encapsulatePoints([this.tl, this.tr, this.bl, this.br]);\n        }\n    };\n    return EdgeShape;\n}(line_shape_1.LineShape));\nexports.EdgeShape = EdgeShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/edge-shape.ts\n// module id = 45\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * Defines an image that can be rendered by the gpu. This is an axis oriented\n * image only (no rotations)\n */\nvar ImageShape = (function (_super) {\n    __extends(ImageShape, _super);\n    /**\n     * Generates a new ImageShape that can be rendered\n     *\n     * @param {AtlasTexture} image The AtlasTexture to use when rendering this image\n     * @param {number} size This is the size of the longest edge of the image while\n     *                      retaining aspect ratio.\n     */\n    function ImageShape(image, size) {\n        var _this = _super.call(this, 0, 0, size, size) || this;\n        /** This is the level of opacity the image will be rendered with */\n        _this.opacity = 1.0;\n        _this.texture = image;\n        _this.size = size;\n        return _this;\n    }\n    Object.defineProperty(ImageShape.prototype, \"size\", {\n        /**\n         * Returns the largest edge of the image\n         */\n        get: function () {\n            return Math.max(this.width, this.height);\n        },\n        /**\n         * This is the size the image will be rendered within World Space. The size\n         * correlates to the largest edge of the image\n         */\n        set: function (val) {\n            if (this.texture.aspectRatio > 1) {\n                this.width = val;\n                this.height = val / this.texture.aspectRatio;\n            }\n            else {\n                this.width = val * this.texture.aspectRatio;\n                this.height = val;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Centers this image on a provided location\n     *\n     * @param {number} x The x coordinate in world space\n     * @param {number} y The y coordinate in world space\n     */\n    ImageShape.prototype.centerOn = function (x, y) {\n        this.x = x - (this.width / 2.0);\n        this.y = y - (this.height / 2.0);\n    };\n    return ImageShape;\n}(bounds_1.Bounds));\nexports.ImageShape = ImageShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/image-shape.ts\n// module id = 46\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar QuadShape = (function (_super) {\n    __extends(QuadShape, _super);\n    function QuadShape(bounds, color) {\n        var _this = _super.call(this, bounds.x, bounds.right, bounds.y, bounds.bottom) || this;\n        _this.r = 1.0;\n        _this.g = 0.0;\n        _this.b = 0.0;\n        _this.a = 1.0;\n        return _this;\n    }\n    return QuadShape;\n}(bounds_1.Bounds));\nexports.QuadShape = QuadShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/quad-shape.ts\n// module id = 47\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\n/**\n * Defines a color that is located on an atlas\n */\nvar AtlasColor = (function () {\n    /**\n     * Constructor implementation\n     */\n    function AtlasColor(color, g, b, a) {\n        if (a === void 0) { a = 1.0; }\n        // Value between 1 - 0 for the opacity of the color\n        this.opacity = 1.0;\n        // The pixel width and height of the color rendered onto the atlas\n        // This will always be a 2x2 so the color can be sampled in the middle\n        // For a guaranteed pure color regardless of gl sampling states\n        this.pixelWidth = 2;\n        this.pixelHeight = 2;\n        if (color instanceof three_1.Color) {\n            this.color = color.clone();\n            this.opacity = g === undefined ? 1.0 : g;\n        }\n        else {\n            this.color = new three_1.Color(color, g, b);\n            this.opacity = a;\n        }\n    }\n    return AtlasColor;\n}());\nexports.AtlasColor = AtlasColor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/atlas-color.ts\n// module id = 48\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./circle\"));\n__export(require(\"./curved-line\"));\n__export(require(\"./line\"));\n__export(require(\"./point\"));\n__export(require(\"./rotateable-quad\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/index.ts\n// module id = 49\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./animate\"));\n__export(require(\"./animated-shape-buffer-cache\"));\n__export(require(\"./buffer-util\"));\n__export(require(\"./custom-selection\"));\n__export(require(\"./easing\"));\n__export(require(\"./frame-info\"));\n__export(require(\"./get-font-metrics\"));\n__export(require(\"./interpolation\"));\n__export(require(\"./mouse\"));\n__export(require(\"./multi-shape-buffer-cache\"));\n__export(require(\"./pack-node\"));\n__export(require(\"./quad-tree\"));\n__export(require(\"./shape-buffer-cache\"));\n__export(require(\"./webgl-stat\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/index.ts\n// module id = 50\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PlayState;\n(function (PlayState) {\n    PlayState[PlayState[\"PLAY\"] = 0] = \"PLAY\";\n    PlayState[PlayState[\"STOP\"] = 1] = \"STOP\";\n})(PlayState || (PlayState = {}));\nvar Animate = (function () {\n    function Animate() {\n    }\n    Animate.animate = function () {\n        if (Animate.playState === PlayState.PLAY) {\n            requestAnimationFrame(Animate.animate);\n        }\n        this.animating.forEach(function (propToItem) {\n            propToItem.forEach(function (animate) {\n                // TODO\n            });\n        });\n    };\n    Animate.cancel = function (container, prop) {\n        // TODO\n    };\n    Animate.value = function (container, prop, start, end, duration, ease) {\n        // TODO\n    };\n    Animate.point = function (container) {\n        // TODO\n    };\n    Animate.start = function () {\n        // TODO\n    };\n    Animate.stop = function () {\n        // TODO\n    };\n    Animate.playState = PlayState.PLAY;\n    Animate.animating = new Map();\n    return Animate;\n}());\nexports.Animate = Animate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/animate.ts\n// module id = 51\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar multi_shape_buffer_cache_1 = require(\"./multi-shape-buffer-cache\");\nvar PlayState;\n(function (PlayState) {\n    PlayState[PlayState[\"INIT\"] = 0] = \"INIT\";\n    PlayState[PlayState[\"PLAY\"] = 1] = \"PLAY\";\n    PlayState[PlayState[\"STOP\"] = 2] = \"STOP\";\n})(PlayState = exports.PlayState || (exports.PlayState = {}));\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar AnimatedShapeBufferCache = (function (_super) {\n    __extends(AnimatedShapeBufferCache, _super);\n    function AnimatedShapeBufferCache() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.playState = PlayState.INIT;\n        _this.buffer = [];\n        _this.bustCache = true;\n        /**\n         * This is the internal control for managing execution of the animate method\n         */\n        _this.doAnimate = function () {\n            if (_this.playState === PlayState.PLAY) {\n                requestAnimationFrame(_this.doAnimate);\n            }\n            _this.animate();\n        };\n        return _this;\n    }\n    /**\n     * This is the method that will execute with the frame rate. Subclasses can\n     * override this to implement animated changes\n     */\n    AnimatedShapeBufferCache.prototype.animate = function () {\n        // Implemented by subclasses\n    };\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    AnimatedShapeBufferCache.prototype.generate = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Make sure the storage is established before trying to create modifications of any sort\n        this.getStorage(selection);\n        if (this.bustCache) {\n            this.buildCache.apply(this, arguments);\n            this.bustCache = false;\n            if (this.playState === PlayState.INIT) {\n                this.start();\n                requestAnimationFrame(this.doAnimate);\n            }\n        }\n        // We always invalidate and commit all of our buffers for animations\n        this.flagBuffersDirty();\n        // Make sure our buffers are updated so they will commit to vertex buffers\n        this.processDirtyBuffers();\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    AnimatedShapeBufferCache.prototype.buildCache = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Begins executing the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.start = function () {\n        this.playState = PlayState.PLAY;\n    };\n    /**\n     * Ceases the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.stop = function () {\n        this.playState = PlayState.STOP;\n    };\n    return AnimatedShapeBufferCache;\n}(multi_shape_buffer_cache_1.MultiShapeBufferCache));\nexports.AnimatedShapeBufferCache = AnimatedShapeBufferCache;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/animated-shape-buffer-cache.ts\n// module id = 52\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Takes a map of the form <T, boolean> and returns an array of the keys,\n * excluding entries who's mapped value is false.\n *\n * @param map The map to convert to a list\n *\n * @return T[] A list of the keys, exluding false mappings\n */\nfunction boolMapToArray(map) {\n    return Array\n        .from(map)\n        .filter(function (item) { return item[1]; })\n        .map(function (item) { return item[0]; });\n}\nexports.boolMapToArray = boolMapToArray;\n/**\n * Defines a selection control for custom types and categories\n */\nvar CustomSelection = (function () {\n    function CustomSelection() {\n        /** This caches the list generation of a selection */\n        this.cachedSelection = new Map();\n        /** Map of the custom categories to the selection state */\n        this.selections = new Map();\n        /** Keeps flags indicating if a selection for a given category has changed or not */\n        this._didSelectionChange = new Map();\n    }\n    /**\n     * Clears out all custom selections for every category\n     */\n    CustomSelection.prototype.clearAllSelections = function () {\n        for (var _i = 0, _a = Array.from(this.selections.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.clearSelection(key);\n        }\n    };\n    /**\n     * Clears the selection for the category specified\n     *\n     * @param {string} category Name of the category of selection\n     */\n    CustomSelection.prototype.clearSelection = function (category) {\n        // We must have selected items to clear the selection\n        if (this.getSelection(category).length) {\n            this.selections.set(category, null);\n            this.cachedSelection.set(category, null);\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Makes an item no longer flaged as selected within the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to remove from being selected\n     */\n    CustomSelection.prototype.deselect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        // See if the item is selected already, if it is, clear the selection and bust caches\n        if (selectionMap && selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, false);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Checks if a selection from a category has been modified\n     *\n     * @param {string} category The selection category to check\n     */\n    CustomSelection.prototype.didSelectionCategoryChange = function (category) {\n        return this._didSelectionChange.get(category);\n    };\n    /**\n     * Checks if ANY selection has changed\n     *\n     * @return {boolean} True if any selection has changed\n     */\n    CustomSelection.prototype.didSelectionChange = function () {\n        return boolMapToArray(this._didSelectionChange).length > 0;\n    };\n    /**\n     * This indicates that updates have taken place to account for selection\n     * changes.\n     */\n    CustomSelection.prototype.finalizeUpdate = function () {\n        for (var _i = 0, _a = Array.from(this._didSelectionChange.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this._didSelectionChange.set(key, false);\n        }\n    };\n    /**\n     * This retrieves a list of the items that are selected\n     *\n     * @param category The selection category to check on\n     *\n     * @return {T} Returns a list of items that are currently selected\n     */\n    CustomSelection.prototype.getSelection = function (category) {\n        if (!this.cachedSelection.get(category)) {\n            var theSelection = this.selections.get(category);\n            if (theSelection) {\n                this.cachedSelection.set(category, boolMapToArray(theSelection));\n            }\n            else {\n                this.cachedSelection.set(category, []);\n            }\n        }\n        return this.cachedSelection.get(category);\n    };\n    /**\n     * Specifies an item to flag as selected for the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.select = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        if (!selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, true);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Specifies an item to toggle it's selection status for the provided category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.toggleSelect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        // Clear the cache for the selection list\n        this.cachedSelection.set(category, null);\n        // Toggle the selection off if already selected\n        if (selectionMap.get(item)) {\n            this.deselect(category, item);\n        }\n        else {\n            this.select(category, item);\n        }\n        // Flag the category of selections as changed\n        this._didSelectionChange.set(category, true);\n    };\n    return CustomSelection;\n}());\nexports.CustomSelection = CustomSelection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/custom-selection.ts\n// module id = 53\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getFontMetrics(props) {\n    var ctx = props.ctx;\n    var text = props.text;\n    var bboxHeight = props.bboxHeight;\n    var canvasHeight = props.ctx.canvas.height;\n    var baseline = props.baseline || 'alphabetic';\n    var flip = props.flip || false;\n    var drawBaseline = props.drawBaseline || false;\n    var fontFamily = 'Arial, san-serif';\n    var fontSize = 14;\n    if (props.fontFamily) {\n        fontFamily = props.fontFamily;\n    }\n    if (props.fontSize) {\n        fontSize = props.fontSize;\n    }\n    // Setting up the canvas\n    ctx.save(); // Create canvas to use as buffer\n    ctx.font = fontSize + \"px \" + fontFamily;\n    var textWidth = ctx.measureText(text).width;\n    // This keeps font in-screen, measureText().width doesn't\n    // Quite do it in some cases. For instance \"j\", or the letter \"f\"\n    // In the font \"Zapfino\".\n    var offsetx = fontSize * 2;\n    var offsety = fontSize * 2;\n    var cwidth = ctx.canvas.width = Math.round(textWidth + offsetx * 2);\n    var cheight = ctx.canvas.height = canvasHeight ? canvasHeight : Math.round(offsety * 2);\n    if (typeof (baseline) === 'string') {\n        offsety = 0; // Using <canvas> baseline\n        ctx.textBaseline = baseline;\n    }\n    // Ctx.font has to be called twice because resetting the size resets the state\n    if (flip) {\n        ctx.scale(1, -1);\n    }\n    ctx.font = fontSize + \"px \" + fontFamily;\n    ctx.fillText(text, offsetx, (typeof (bboxHeight) === 'number' ? bboxHeight : offsety));\n    // Drawing baseline\n    if (drawBaseline) {\n        ctx.fillRect(0, canvasHeight / 2, ctx.canvas.width, 1);\n    }\n    // Grabbing image data\n    var imageData = ctx.getImageData(0, 0, cwidth, cheight);\n    var data = imageData.data;\n    // Calculating top\n    var top = 0;\n    var pos = data.length;\n    var bottom = 0;\n    var realBottom = 0;\n    var left = 0;\n    var right = 0;\n    while (pos > 0) {\n        if (data[pos + 3]) {\n            pos -= pos % (cwidth * 4); // Back to beginning of the line top = (pos / 4) / cwidth; // calculate pixel position top -= offsety - fontSize; pos = data.length; // exit loop } pos += 4; } // calculating bottom var bottom = 0; var pos = data.length; while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                bottom = (pos / 4) / cwidth;\n                bottom -= offsety - fontSize;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Calculating left\n        left = 0;\n        var col = 0;\n        var row = 0; // Left bounds\n        while (row < cheight && col < cwidth) {\n            var px = data[(row * cwidth * 4) + (col * 4) + 3];\n            if (px) {\n                left = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col++;\n            }\n        }\n        // Calculating right\n        right = 0;\n        col = cwidth;\n        row = 0; // Right bounds\n        while (row < cheight && col > 0) {\n            if (data[(row * cwidth * 4) + (col * 4) + 3]) {\n                right = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col--;\n            }\n        }\n        // Calculating real-bottom\n        realBottom = 0;\n        pos = data.length;\n        while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                realBottom = (pos / 4) / cwidth;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Restoring state\n        ctx.restore();\n    }\n    // Returning raw-metrics\n    return {\n        bottom: realBottom,\n        height: (bottom - top),\n        left: (-left),\n        top: (fontSize - top),\n        width: (right - left),\n    };\n}\nexports.getFontMetrics = getFontMetrics;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/get-font-metrics.ts\n// module id = 54\n// module chunks = 0"],"sourceRoot":""}