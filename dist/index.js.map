{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.js","webpack:///webpack/bootstrap bab737e1a97b9df2ea4d","webpack:///external \"three\"","webpack:///./src/webgl-surface/primitives/bounds.ts","webpack:///./node_modules/debug/src/browser.js","webpack:///./src/webgl-surface/util/buffer-util.ts","webpack:///./src/webgl-surface/buffers/base-buffer.ts","webpack:///./src/webgl-surface/primitives/line.ts","webpack:///./src/webgl-surface/primitives/point.ts","webpack:///external \"ramda\"","webpack:///external \"d3-color\"","webpack:///./src/webgl-surface/drawing/texture/atlas-texture.ts","webpack:///./src/webgl-surface/util/frame-info.ts","webpack:///./src/webgl-surface/util/easing.ts","webpack:///./src/webgl-surface/util/interpolation.ts","webpack:///./src/webgl-surface/drawing/texture/atlas-manager.ts","webpack:///./src/webgl-surface/util/pack-node.ts","webpack:///./src/webgl-surface/drawing/shape/label.ts","webpack:///./src/webgl-surface/primitives/rotateable-quad.ts","webpack:///./src/webgl-surface/drawing/texture/sprite.ts","webpack:///./src/webgl-surface/util/mouse.ts","webpack:///./src/webgl-surface/util/quad-tree.ts","webpack:///./src/webgl-surface/drawing/shape/curved-line-shape.ts","webpack:///./src/webgl-surface/primitives/curved-line.ts","webpack:///./src/webgl-surface/primitives/circle.ts","webpack:///./src/webgl-surface/drawing/shape/line-shape.ts","webpack:///./src/webgl-surface/util/shape-buffer-cache.ts","webpack:///./src/index.ts","webpack:///./src/webgl-surface/webgl-surface.tsx","webpack:///external \"react\"","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/debug/src/debug.js","webpack:///./node_modules/ms/index.js","webpack:///external \"bowser\"","webpack:///./src/webgl-surface/buffers/index.ts","webpack:///./src/webgl-surface/buffers/animated/shared-control-curved-line-buffer-ants.ts","webpack:///./src/webgl-surface/buffers/animated/shared-control-curved-line-colors-buffer.ts","webpack:///./src/webgl-surface/buffers/static/shared-control-curved-line-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-bezier-line-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-label-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-line-buffer.ts","webpack:///./src/webgl-surface/drawing/index.ts","webpack:///./src/webgl-surface/drawing/reference/reference-color.ts","webpack:///./src/webgl-surface/drawing/animation/animated-curved-line-shape.ts","webpack:///./src/webgl-surface/drawing/shape/circle-shape.ts","webpack:///./src/webgl-surface/drawing/shape/edge-shape.ts","webpack:///./src/webgl-surface/drawing/shape/image-shape.ts","webpack:///./src/webgl-surface/drawing/shape/quad-shape.ts","webpack:///./src/webgl-surface/drawing/texture/atlas-color.ts","webpack:///./src/webgl-surface/primitives/index.ts","webpack:///./src/webgl-surface/util/index.ts","webpack:///./src/webgl-surface/util/custom-selection.ts","webpack:///./src/webgl-surface/util/get-font-metrics.ts","webpack:///./src/webgl-surface/util/animated-shape-buffer-cache.ts"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_0__","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_8__","__WEBPACK_EXTERNAL_MODULE_27__","__WEBPACK_EXTERNAL_MODULE_31__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","Bounds","left","right","top","bottom","height","width","x","y","arguments","length","containsPoint","point","copyBounds","b","encapsulate","bounds","encapsulateBounds","sizeToFirst","minX","Number","MAX_VALUE","maxX","minY","maxY","forEach","encapsulatePoint","encapsulatePoints","points","undefined","fits","inner","hitBounds","pointInside","isBounds","isInside","maxBounds","MIN_VALUE","process","useColors","window","type","document","documentElement","style","WebkitAppearance","console","firebug","exception","table","navigator","userAgent","toLowerCase","match","parseInt","RegExp","$1","formatArgs","args","namespace","humanize","diff","color","splice","index","lastC","replace","log","Function","apply","save","namespaces","storage","removeItem","debug","e","load","r","env","DEBUG","chrome","local","localStorage","colors","formatters","j","v","JSON","stringify","err","message","enable","applyAttributeRegisters","attributeBuffers","incrementValues","attrRegister0","attrRegister1","attrRegister2","attrRegister3","attrRegister4","attrRegister5","attrRegister6","attrIndexIncr0","attrIndexIncr1","attrIndexIncr2","attrIndexIncr3","attrIndexIncr4","attrIndexIncr5","attrIndexIncr6","updateBuffer1","numBatches","updateAccessor","lastBatchRegister","attrIndex0","updateBuffer2","attrIndex1","updateBuffer3","attrIndex2","updateBuffer4","attrIndex3","updateBuffer5","attrIndex4","updateBuffer6","attrIndex5","updateBuffer7","attrIndex6","applyDefaultsHolders","defaults","defaultsHolder0","defaultsHolder1","defaultsHolder2","defaultsHolder3","fillSize1","buffer","start","fillSize2","fillSize3","fillSize4","three_1","debugGenerator","TriangleOrientation","AttributeSize","isStreamUpdatingRegister","fillMethodLookUp","_a","ONE","TWO","THREE","FOUR","updateBufferLookUp","1","2","3","4","5","6","7","BufferUtil","beginUpdates","endUpdates","totalBatches","examineBuffer","bufferItems","debugNamespace","debugBuffer","enabled","attributes","geometry","bufferAttributes","map","attr","array","triangles","system","drawMode","TrianglesDrawMode","currentVertex_1","attrSize_1","currentIndex_1","length_1","drawRange","count","tri","vertex_0","vertex_1","vertex_2","size","slice","push","TriangleStripDrawMode","currentVertex_2","attrSize_2","currentIndex_2","length_2","material","uniforms","makeBuffer","numVertices","iMax","BufferGeometry","attribute","attributeSize","Float32Array","fillMethod","name_1","k","addAttribute","BufferAttribute","updateBuffer","newData","vertexBatch","force","testPerformed","currentData","updateMethod","needsUpdate","makeBufferItems","BaseBuffer","init","unitCount","update","shapeBuffer","__extends","extendStatics","setPrototypeOf","__proto__","Array","__","constructor","create","bounds_1","Line","_super","p1","p2","_this","setPoints","directionTo","vector","perpendicular","distanceTo","Math","abs","getClosest","lines","closestLine","closestDistance","distance","line","dx","dy","slope","magnitude","sqrt","mag","squareDistance","Point","add","out","testPoint","closestPoint","findClosest","getClosestIndex","getDirection","normalize","getDistance","squared","getMidpoint","direction","make","scale","zero","AtlasTexture","path","label","aspectRatio","imagePath","rasterizedLabel","getAttributeCurrentTime","time","FrameInfo","lastFrameTime","floor","Date","now","nextFrameTime","framesPlayed","Map","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","PI","easeOutSine","sin","easeInOutSine","easeInExpo","pow","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","a","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","bezier2","c1","t2","mt","mt2","bezier3","c2","t3","mt3","circular","radiusEasing","direction1","point_1","theta1","atan2","direction2","theta2","dTheta","radius1","radius2","radius","easing_1","InterpolationMethod","pickInterpolation","BEZIER2","BEZIER3","CIRCULAR","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","verb","op","f","TypeError","_","ops","pop","trys","g","sent","throw","return","Symbol","iterator","d3_color_1","pack_node_1","label_1","atlas_texture_1","debugLabels","ZERO_IMAGE","atlasBL","atlasBR","atlasTL","atlasTR","Label","text","pixelHeight","pixelWidth","AtlasManager","atlasImages","atlasMap","atlasTexture","textureWidth","textureHeight","createAtlas","atlasName","images","canvas","_i","images_1","image","texture","_b","PackNode","createElement","getContext","draw","drawColors","Texture","premultiplyAlpha","generateMipmaps","destroyAtlas","dispose","destroy","none_1","atlasReferenceID","isValidImage","isValid","setDefaultImage","assign","loadedImage","rect","dimensions","node","insertedNode","ux","uy","uw","uh","atlasDimensions","loadImage","first","second","insert","nodeImage","nodeDimensions","drawImage","error","colorWidth","colorHeight","maxPerRow","rowWidth","rowCount","colCount","renderHeight","renderSpace","startX","startY","nextX","nextY","beginX","beginY","col","row","colors_1","min","ceil","colorIndex","colorsPerRow","firstColor","nextColor","fillStyle","round","opacity","fillRect","Error","getAtlasTexture","Image","onload","onerror","src","labelSize","getSize","ctx","rasterizationPadding","fontSize","rgb","base","font","makeCSSFont","textAlign","textBaseline","toString","fillText","rasterizationOffset","image_1","setSize","toDataURL","child","isLeaf","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","remove","removed","ramda_1","rotateable_quad_1","sprite_1","measurement","Sprite","options","AnchorPosition","TopLeft","depth","fontWeight","maxWidth","id","zoomable","setFontSize","_baseLabel","set","baseLabel","_rasterizedLabel","copyLabel","omit","setText","getText","position","lbl","baseSize","context","size_1","measureText","RotateableQuad","anchorCalculations","BottomLeft","quad","BottomRight","Custom","Middle","MiddleBottom","MiddleLeft","MiddleRight","MiddleTop","TopRight","location","rotation","anchor","setAnchor","setLocation","setRotation","calculateAnchor","custom","anchorType","getAnchor","getAnchorType","getLocation","getRotation","angle","Vector4","anchorMat","Matrix4","makeTranslation","rotationMat","makeRotationZ","locationMat","transform","multiply","TL","clone","applyMatrix4","TR","BL","BR","w","h","contentScaleX","contentScaleY","scaleX","scaleY","getContentScale","getContentSize","getWidth","getHeight","normalizeFirefoxWheel","wheel","nativeEvent","deltaX","deltaY","sign","lowPassY","MAX_FIREFOX_WHEELDELTA","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","unshift","Vector2","normalizeChromeWheel","normalizeIE11Wheel","wheelDeltaX","IE_ADJUSTMENT","wheelDeltaY","wheelDelta","detail","OLD_IE_ADJUSTMENT","normalizeIE12Wheel","multiplyScalar","eventElementPosition","relative","mouseX","mouseY","eventX","eventY","target","event","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","normalizeWheel","browser","firefox","msie","version","msedge","filterQuery","queryValues","filtered","obj","find","Quadrants","mid","Node","children","childrenProps","nodes","props","doAdd","cover","addAll","allChildren","gatherChildren","split","isNaN","area","list","concat","gatherProps","query","visit","queryBounds","queryPoint","cb","finished","Boolean","QuadTree","curved_line_1","line_1","CurvedLineShape","lineWidth","getTriangleStrip","cachesQuadSegments","cacheSegments","startColor","endColor","cachesSegments","controlPoints","end","resolution","max","cachedQuadSegments","strip","normal","lineStrip","getLineStrip","lineWidthHalf","scaledPoint","temp","previous","current","CurvedLine","bezierDistance","straightLine","closestIndex","circularDistance","straightDistance","makeBezier2Segments","cachedSegments","segments","dt","end_1","interpolation_1","makeBezier3Segments","end_2","makeCircularCWSegments","midPoint","minRadius","circleCenter","makeCircularCCWSegments","makeStraightSegments","CurveType","pickSegmentMethod","Bezier","CircularCW","CircularCCW","Straight","pickDistanceMethod","distanceMethod","segmentMethod","segmentMethods","numControlPoints","UID","Circle","_id","_radius","_centerX","_centerY","updateBounds","val","boundsInside","r2","dy2","dx2","notSquared","circles","closestCircle","circle","hitCircle","totalDistance","hitPoint","LineShape","g2","b2","a2","thickness","cull","newProperties","ShapeBufferCache","bustCache","generate","buildCache","getBuffer","__export","isAnimatedWithOptions","isAnimated","BaseApplyPropsMethods","React","atlas_manager_1","frame_info_1","mouse_1","quad_tree_1","debugCam","debugColors","BaseAnimatedMethods","BACKGROUND_COLOR","Color","setRGB","Vector3","WEBGL_SUPPORTED","WebGLRenderingContext","WebGLSurface","atlasManager","atlasNames","labels","animatedMethodList","animatedMethodBreak","camera","disableMouseInteraction","sizeCamera","currentZoom","destinationX","destinationY","destinationZoom","isPanning","lastMousePosition","propsMethodList","inertia","inertiaBuild","inertiaDecay","inertiaMax","quadTree","shiftIsDown","stop","currentX","currentY","targetZoom","previousZoomToFit","zoomTargetX","zoomTargetY","animating","labelsReady","labelsCurrentLoadedId","labelsLoadId","colorsReady","currentHoverItems","animate","requestAnimationFrame","response","doDraw","some","method","break","updateCameraUniforms","forceDraw","emitViewport","applyProps","renderer","render","scene","el","renderEl","heightHalf","widthHalf","initCamera","Scene","initBuffers","WebGLRenderer","antialias","devicePixelRatio","setPixelRatio","setClearColor","setFaceCulling","CullFaceNone","appendChild","domElement","viewSize","viewport","far","near","OrthographicCamera","z","resizeContext","renderSize","zoom","updateProjectionMatrix","tl","screenToWorld","br","updateMatrixWorld","visible","onViewport","projection","handleMouseDown","onMouseDown","handleMouseOut","onMouseOut","handleMouseUp","mouse","world","hitInside","hitItems","hitItems_1","item","onMouseUp","handleMouseMove","onMouse","xDistance","yDistance","pan","willPan","maxInertia","hitItems_2","onMouseHover","indexOf","onMouseLeave","applyRef","animatedMethods","baseAnimatedMethods","orderedBaseAnimatedMethods","animatedMethodsBase","CONTEXT","INERTIA","POSITION","positionCamera","ZOOM","destZoom","dZoom","screenZoomTarget","worldToScreen","zoomCamera","newScreenZoomTarget","zoomDX","zoomDY","applyColorBufferChanges","applyLabelBufferChanges","applyPropsMethods","basePropsMethods","orderedBasePropsMethods","applyPropsMethodsBase","INITIALIZE","LABELS","textures","COLORS","BUFFERCHANGES","applyBufferChanges","CAMERA","appliedViewport","zoomToFitViewH","zoomToFitViewV","zoomToFit","onZoomRequest","componentDidMount","componentWillMount","screenSizeToWorld","bind","worldSizeToScreen","componentWillReceiveProps","componentWillUnmount","delete","unproject","project","merge","shouldComponentUpdate","nextProps","distanceX","distanceY","onMouseMove","onDoubleClick","ref","Component","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","timeout","len","run","Item","noop","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","selectColor","hash","charCodeAt","createDebug","self","curr","ms","prevTime","prev","coerce","format","formatter","names","skips","substr","disable","test","stack","parse","str","String","exec","parseFloat","fmtShort","fmtLong","plural","long","buffer_util_1","base_buffer_1","SharedControlCurvedLineBufferAnts","numQuads","Mesh","frustumCulled","sharedControl","colorRef","colorBase","atlas","colorAtlas","controlPoint","colorStart","colorEnd","alpha","antLength","antGap","antSpeed","halfWidthSize","this_1","shapeBuffer_1","curvedLine","marchingAnts","gapLength","speed","strokeLength","positions","ppos","scpos","ecpos","normals","npos","endPoints","epos","halfWidth","wpos","marching","mpos","setDrawRange","SharedControlCurvedLineColorsBuffer","controlUniform","controlReference","colorStartStop","colorEndStop","startTime","duration","controlRef","endColorStop","startColorStop","currentStart","currentEnd","controlLength","colorPicks","cpos","controlPick","ctpos","timing","tpos","SharedControlCurvedLineBuffer","SimpleStaticBezierLineBuffer","copos","SimpleStaticLabelBuffer","startFade","endFade","labelMaxSize","maxLabelSize","updated","texCoords","sizes","spos","anchors","apos","SimpleStaticLineBuffer","stripPos","ReferenceColor","curved_line_shape_1","AnimatedCurvedLineShape","easing","_startColorChange","_endColorChange","startStop","endStop","_currentStartColor","_currentEndColor","_startColorStop","startBase","newBase","_endColorStop","endBase","easedTime","circle_1","CircleShape","innerColor","innerR","innerRadius","ringWidth","ringPad","outline","r_1","setOuterColor","setInnerColor","cloneWithData","line_shape_1","EdgeShape","p1Col","p2Col","p1Width","p2Width","bl","tr","endWidth","testx","testy","numberVertices","isClockwise","p1Dx","p2Dx","p1DeltaX","p1DeltaY","p2DeltaX","p2DeltaY","topEdge","bottomEdge","ImageShape","centerOn","QuadShape","AtlasColor","boolMapToArray","from","filter","CustomSelection","cachedSelection","selections","_didSelectionChange","clearAllSelections","keys","key","clearSelection","category","getSelection","deselect","selectionMap","didSelectionCategoryChange","didSelectionChange","finalizeUpdate","theSelection","select","toggleSelect","getFontMetrics","bboxHeight","canvasHeight","baseline","flip","drawBaseline","fontFamily","textWidth","offsetx","offsety","cwidth","cheight","imageData","getImageData","data","pos","realBottom","restore","PlayState","shape_buffer_cache_1","AnimatedShapeBufferCache","playState","INIT","doAnimate","PLAY","STOP"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"ramda\"), require(\"d3-color\"), require(\"react\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"ramda\", \"d3-color\", \"react\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"ramda\"), require(\"d3-color\"), require(\"react\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"ramda\"], root[\"d3-color\"], root[\"react\"], root[\"bowser\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_31__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"ramda\"), require(\"d3-color\"), require(\"react\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"ramda\", \"d3-color\", \"react\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"ramda\"), require(\"d3-color\"), require(\"react\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"ramda\"], root[\"d3-color\"], root[\"react\"], root[\"bowser\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_31__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 25);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(left, right, top, bottom) {\n        this.height = 0;\n        this.width = 0;\n        this.x = 0;\n        this.y = 0;\n        if (arguments.length === 4) {\n            this.x = left;\n            this.width = right - left;\n            this.y = top;\n            this.height = top - bottom;\n        }\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        /** The total rectangular surface area of this instance */\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        /** The bottom coordinate for this instance (y + height) */\n        get: function () {\n            return this.y - this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        /** An x, y coordinate pair representing the center of this object */\n        get: function () {\n            return {\n                x: this.x + (this.width / 2),\n                y: this.y - (this.height / 2),\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Check to see if a given point lies within the bounds of this instance\n     *\n     * @param point The point to check\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        if (point.x < this.x) {\n            return false;\n        }\n        if (point.y > this.y) {\n            return false;\n        }\n        if (point.x > this.right) {\n            return false;\n        }\n        if (point.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Copies the properties of the bounds specified\n     *\n     * @param b The bounds whose dimensions we wish to copy\n     */\n    Bounds.prototype.copyBounds = function (b) {\n        this.height = b.height;\n        this.width = b.width;\n        this.x = b.x;\n        this.y = b.y;\n    };\n    /**\n     * Ensure that this object contains the smaller bounds\n     *\n     * This method will not shrink this class, but only grow it as necessary to\n     * fit the destination object\n     *\n     * @param bounds The bounds to encapsulate\n     */\n    Bounds.prototype.encapsulate = function (bounds) {\n        if (bounds.x < this.x) {\n            this.width += this.x - bounds.x;\n            this.x = bounds.x;\n        }\n        if (bounds.y > this.y) {\n            this.height += bounds.y - this.y;\n            this.y = bounds.y;\n        }\n        if (bounds.right > this.right) {\n            this.width = bounds.right - this.x;\n        }\n        if (bounds.bottom < this.bottom) {\n            this.height = this.y - bounds.bottom;\n        }\n    };\n    /**\n     * Ensure that this object contains the provided list of bounds\n     *\n     * This will never shrink or modify the original area covered by this bounds\n     * but will instead stay the same or include the original area plus the specified\n     * list of bounds.\n     *\n     * @param {Bounds<any>[]} bounds The list of bounds objects to encapsulate\n     * @param {boolean} sizeToFirst If this is set, the procedure will start by making this bounds\n     *                              be a clone of the first bounds object in the list\n     */\n    Bounds.prototype.encapsulateBounds = function (bounds, sizeToFirst) {\n        if (sizeToFirst && bounds.length) {\n            this.copyBounds(bounds[0]);\n        }\n        if (bounds.length === 0) {\n            return;\n        }\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        bounds.forEach(function (p) {\n            if (p.x < minX) {\n                minX = p.x;\n            }\n            if (p.right > maxX) {\n                maxX = p.right;\n            }\n            if (p.bottom < minY) {\n                minY = p.bottom;\n            }\n            if (p.y > maxY) {\n                maxY = p.y;\n            }\n        });\n        // Make bounds that encompasses the bounds list, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Grow this class to contain the specified point\n     *\n     * This method will not shrink this instance. It will only grow it as\n     * necessary.\n     *\n     * @param point The point to encapsulate\n     */\n    Bounds.prototype.encapsulatePoint = function (point) {\n        if (point.x < this.x) {\n            this.width += this.x - point.x;\n            this.x = point.x;\n        }\n        if (point.y > this.y) {\n            this.height += point.y - this.y;\n            this.y = point.y;\n        }\n        if (point.x > this.right) {\n            this.width = point.x - this.x;\n        }\n        if (point.y < this.bottom) {\n            this.height = this.y - point.y;\n        }\n    };\n    /**\n     * Efficiently encapsulates a set of points by growing the current dimensions\n     * of the bounds until the points are enclosed. This will perform faster than\n     * running encapsulatePoint for a list of points.\n     *\n     * @param points An array of points that Can be of format {x, y} or [x, y]\n     *\n     * @memberOf Bounds\n     */\n    Bounds.prototype.encapsulatePoints = function (points) {\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        if (points[0] !== undefined && points[0].x) {\n            points.forEach(function (p) {\n                if (p.x < minX) {\n                    minX = p.x;\n                }\n                else if (p.x > maxX) {\n                    maxX = p.x;\n                }\n                if (p.y < minY) {\n                    minY = p.y;\n                }\n                else if (p.y > maxY) {\n                    maxY = p.y;\n                }\n            });\n        }\n        else {\n            points.forEach(function (p) {\n                if (p[0] < minX) {\n                    minX = p[0];\n                }\n                else if (p[0] > maxX) {\n                    maxX = p[0];\n                }\n                if (p[1] < minY) {\n                    minY = p[1];\n                }\n                else if (p[1] > maxY) {\n                    maxY = p[1];\n                }\n            });\n        }\n        // Make bounds that encompasses the points, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Checks to see if another bounds fits in itself.\n     *\n     * @param {Bounds} inner The bounds to test against\n     *\n     * @return {number} int 1 is an exact fit, 2 it fits with space, 0 it doesn't fit\n     */\n    Bounds.prototype.fits = function (inner) {\n        if (this.width === inner.width) {\n            if (this.height === inner.height) {\n                return 1;\n            }\n        }\n        if (this.width >= inner.width) {\n            if (this.height >= inner.height) {\n                return 2;\n            }\n        }\n        return 0;\n    };\n    /**\n     * Check to see if the provided bounds intersects with this instance\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if the other object intersects with this instance\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        if (bounds.right < this.x) {\n            return false;\n        }\n        if (bounds.x > this.right) {\n            return false;\n        }\n        if (bounds.bottom > this.y) {\n            return false;\n        }\n        if (bounds.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Tests if a point is inside this bounds\n     *\n     * @param p The point to test\n     *\n     * @return boolean The point to test\n     */\n    Bounds.prototype.pointInside = function (p) {\n        if (p.x < this.x) {\n            return false;\n        }\n        if (p.y > this.y) {\n            return false;\n        }\n        if (p.x > this.right) {\n            return false;\n        }\n        if (p.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Test function to type check the provided value\n     *\n     * @return True if value is a bounds object\n     */\n    Bounds.isBounds = function (value) {\n        // Falsy values aren't bounds objects\n        if (!value) {\n            return false;\n        }\n        // Direct test for bounds objects\n        if (value instanceof this) {\n            return true;\n        }\n        // Duck-typing check\n        return value &&\n            'containsPoint' in value &&\n            'encapsulate' in value &&\n            'hitTest' in value;\n    };\n    /**\n     * Check if this instance is completely inside the provided bounds\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if this instance is inside the provided bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return (bounds.x <= this.x &&\n            bounds.right >= this.right &&\n            bounds.y >= this.y &&\n            bounds.bottom <= this.bottom);\n    };\n    /**\n     * Generates a Bounds object covering max extents\n     *\n     * @return {Bounds} bounds covering as wide of a range as possible\n     */\n    Bounds.maxBounds = function () {\n        return new Bounds(Number.MIN_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MAX_VALUE);\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(29);\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar debugGenerator = __webpack_require__(2);\nvar debug = __webpack_require__(2)('WebGLSurface:BufferUtil');\nvar TriangleOrientation;\n(function (TriangleOrientation) {\n    // The triangles points are clockwise\n    TriangleOrientation[TriangleOrientation[\"CW\"] = 0] = \"CW\";\n    // The triangles points are Counter clockwise\n    TriangleOrientation[TriangleOrientation[\"CCW\"] = 1] = \"CCW\";\n    // The triangles points are linear, thus degenerate\n    TriangleOrientation[TriangleOrientation[\"DEGENERATE\"] = 2] = \"DEGENERATE\";\n})(TriangleOrientation = exports.TriangleOrientation || (exports.TriangleOrientation = {}));\nvar AttributeSize;\n(function (AttributeSize) {\n    AttributeSize[AttributeSize[\"ONE\"] = 0] = \"ONE\";\n    AttributeSize[AttributeSize[\"TWO\"] = 1] = \"TWO\";\n    AttributeSize[AttributeSize[\"THREE\"] = 2] = \"THREE\";\n    AttributeSize[AttributeSize[\"FOUR\"] = 3] = \"FOUR\";\n})(AttributeSize = exports.AttributeSize || (exports.AttributeSize = {}));\n/**\n * These are for fast look ups of the default values provided\n * Doing this fashion avoids array look ups in the defaults values\n */\nvar defaultsHolder0 = 0;\nvar defaultsHolder1 = 0;\nvar defaultsHolder2 = 0;\nvar defaultsHolder3 = 0;\n/**\n * These are for fast look ups of attribute buffers that are going\n * through the update process. We do everything to mitigate array look ups\n * when and where we can\n */\nvar attrRegister0 = [];\nvar attrRegister1 = [];\nvar attrRegister2 = [];\nvar attrRegister3 = [];\nvar attrRegister4 = [];\nvar attrRegister5 = [];\nvar attrRegister6 = [];\nvar attrIndex0 = 0;\nvar attrIndex1 = 0;\nvar attrIndex2 = 0;\nvar attrIndex3 = 0;\nvar attrIndex4 = 0;\nvar attrIndex5 = 0;\nvar attrIndex6 = 0;\nvar attrIndexIncr0 = 0;\nvar attrIndexIncr1 = 0;\nvar attrIndexIncr2 = 0;\nvar attrIndexIncr3 = 0;\nvar attrIndexIncr4 = 0;\nvar attrIndexIncr5 = 0;\nvar attrIndexIncr6 = 0;\n/** This is used to define a starting batch location to aid in continuing batch updates */\nvar lastBatchRegister = 0;\nvar isStreamUpdatingRegister = false;\n/**\n * This takes our list of attribute buffers and applies them to the registers for rapid lookups\n *\n * @param {number[][]} attributeBuffers The buffers for each attribute to be updated\n * @param {number[]} incrementValues How much each batch increments it's lookup index\n */\nfunction applyAttributeRegisters(attributeBuffers, incrementValues) {\n    attrRegister0 = attributeBuffers[0];\n    attrRegister1 = attributeBuffers[1];\n    attrRegister2 = attributeBuffers[2];\n    attrRegister3 = attributeBuffers[3];\n    attrRegister4 = attributeBuffers[4];\n    attrRegister5 = attributeBuffers[5];\n    attrRegister6 = attributeBuffers[6];\n    attrIndexIncr0 = incrementValues[0];\n    attrIndexIncr1 = incrementValues[1];\n    attrIndexIncr2 = incrementValues[2];\n    attrIndexIncr3 = incrementValues[3];\n    attrIndexIncr4 = incrementValues[4];\n    attrIndexIncr5 = incrementValues[5];\n    attrIndexIncr6 = incrementValues[6];\n}\n/**\n * The following methods are targetted at executing the update accessor with varying number\n * of parameters while mitigating array look ups.\n *\n * @param {number} numBatches The number of batches to execute\n * @param {Function} updateAccessor The accessor function that will update the buffer values\n */\nfunction updateBuffer1(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0);\n    }\n}\nfunction updateBuffer2(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1);\n    }\n}\nfunction updateBuffer3(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2);\n    }\n}\nfunction updateBuffer4(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3);\n    }\n}\nfunction updateBuffer5(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4);\n    }\n}\nfunction updateBuffer6(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5);\n    }\n}\nfunction updateBuffer7(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6);\n    }\n}\n/**\n * This takes the defaults array provided and loads them into our default\n * lookup values\n *\n * @param {number[]} defaults The array with the default values in them for our buffer attribute\n */\nfunction applyDefaultsHolders(defaults) {\n    defaultsHolder0 = defaults[0] || 0;\n    defaultsHolder1 = defaults[1] || 0;\n    defaultsHolder2 = defaults[2] || 0;\n    defaultsHolder3 = defaults[3] || 0;\n}\n/**\n * The following methods are rapid ways of populating the buffer without\n * setting up a generic loop. This saves on performance by not creating a loop\n * nor allocating the variables necessary for the generic loop.\n *\n * @param {Float32Array} buffer The buffer to populate\n * @param {number} start The index the data should be populated into\n */\nfunction fillSize1(buffer, start) {\n    buffer[start] = defaultsHolder0;\n}\nfunction fillSize2(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n}\nfunction fillSize3(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n}\nfunction fillSize4(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n    buffer[++start] = defaultsHolder3;\n}\n/**\n * This is a quick lookup to find the correct filler method for the given attribute size\n */\nvar fillMethodLookUp = (_a = {},\n    _a[AttributeSize.ONE] = fillSize1,\n    _a[AttributeSize.TWO] = fillSize2,\n    _a[AttributeSize.THREE] = fillSize3,\n    _a[AttributeSize.FOUR] = fillSize4,\n    _a);\nvar updateBufferLookUp = {\n    1: updateBuffer1,\n    2: updateBuffer2,\n    3: updateBuffer3,\n    4: updateBuffer4,\n    5: updateBuffer5,\n    6: updateBuffer6,\n    7: updateBuffer7,\n};\nfunction orientation(p1, p2, p3) {\n    var val = (p2.y - p1.y) * (p3.x - p2.x) - (p2.x - p1.x) * (p3.y - p2.y);\n    if (val === 0) {\n        return TriangleOrientation.DEGENERATE;\n    }\n    return (val > 0) ? TriangleOrientation.CW : TriangleOrientation.CCW;\n}\n/**\n * This provides methods for handling common buffer tasks such as construction\n * and population.\n */\nvar BufferUtil = (function () {\n    function BufferUtil() {\n    }\n    /**\n     * This places our updateBuffer into a mode where the updates start at index 0 of the\n     * buffer. Subsequent calls will start where the previous call left off. This lets\n     * you stream in updates to the buffer rather than just update the entire buffer\n     * all at once.\n     */\n    BufferUtil.beginUpdates = function () {\n        isStreamUpdatingRegister = true;\n        lastBatchRegister = 0;\n    };\n    /**\n     * This stops updates streaming into the buffers and makes it where an update\n     * will always just start at the beginning of the buffer.\n     */\n    BufferUtil.endUpdates = function () {\n        var totalBatches = lastBatchRegister;\n        isStreamUpdatingRegister = false;\n        lastBatchRegister = 0;\n        return totalBatches;\n    };\n    /**\n     * It is often needed to examine a given buffer and see how the triangles are packed in.\n     * This is a common debugging need and will speed up debugging significantly.\n     *\n     * @param {IBufferItems<T, U>} bufferItems This is the buffer whose structure we want\n     *                                         to examine.\n     */\n    BufferUtil.examineBuffer = function (bufferItems, message, debugNamespace) {\n        // Get the appropriate debug namespace\n        var debugBuffer = debugGenerator(debugNamespace);\n        // Quick quit if the debugger is not enabled\n        if (!debugBuffer.enabled) {\n            return;\n        }\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // Get the attributes by name out of the three js buffer\n        var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n        // Get the raw number buffers\n        var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n        // This will store all of the examined triangles for easy viewing\n        var triangles = [];\n        if (bufferItems.system.drawMode === three_1.TrianglesDrawMode) {\n            var currentVertex_1 = 0;\n            var attrSize_1 = 0;\n            var currentIndex_1 = 0;\n            var length_1 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_1 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_2 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_1 = attr.size + 1;\n                        currentIndex_1 = currentVertex_1 * attrSize_1;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_1, currentIndex_1 + attrSize_1);\n                    });\n                    // Move to the next vertex\n                    currentVertex_1++;\n                };\n                // Each new triangle is a culmination of three vertices which are packed in\n                // The buffer with no vertex sharing\n                for (var i = 0; i < 3; ++i) {\n                    _loop_2(i);\n                }\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_1 < length_1) {\n                _loop_1();\n            }\n        }\n        else if (bufferItems.system.drawMode === three_1.TriangleStripDrawMode) {\n            var currentVertex_2 = 0;\n            var attrSize_2 = 0;\n            var currentIndex_2 = 0;\n            var length_2 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_3 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_4 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_2 = attr.size + 1;\n                        currentIndex_2 = currentVertex_2 * attrSize_2;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_2, currentIndex_2 + attrSize_2);\n                    });\n                    // Move to the next vertex\n                    currentVertex_2++;\n                };\n                // Each new triangle is three vertices, where the first two are shared with\n                // The previous triangle's last two vertices\n                for (var i = 0; i < 3; ++i) {\n                    _loop_4(i);\n                }\n                // Go back two vertices as the next tri will use them + the next vertex to\n                // Make the next triangle\n                currentVertex_2 -= 2;\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_2 < length_2) {\n                _loop_3();\n            }\n        }\n        // Log the debug info to the console using the debug utility\n        debugBuffer(message, {\n            drawRange: buffer.drawRange,\n            triangles: triangles,\n        }, bufferItems.system.material.uniforms);\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with constructing a new buffer\n     * such as applying the name, generating the buffer, and populating default values to\n     * that buffer.\n     *\n     * @param {number} numVertices The number of vertices this buffer will have\n     * @param {IAttributeInfo[]} attributes A description of each attribute in the buffer\n     *\n     * @returns {BufferGeometry} The newly made buffer\n     */\n    BufferUtil.makeBuffer = function (numVertices, attributes) {\n        var iMax = attributes.length;\n        var geometry = new three_1.BufferGeometry();\n        for (var i = 0; i < iMax; ++i) {\n            var attribute = attributes[i];\n            var attributeSize = attribute.size + 1;\n            var buffer = new Float32Array(attributeSize * numVertices);\n            var fillMethod = fillMethodLookUp[attribute.size];\n            var name_1 = attribute.name;\n            // We set up our default value registers before executing the fill method\n            applyDefaultsHolders(attribute.defaults);\n            // Fill our buffer with the indicated default values\n            for (var k = 0; k < numVertices; ++k) {\n                fillMethod(buffer, k * attributeSize);\n            }\n            // Apply the buffer to our geometry buffer\n            geometry.addAttribute(name_1, new three_1.BufferAttribute(buffer, attributeSize));\n            debug('Made Buffer Attribute:', name_1, attributeSize);\n        }\n        return geometry;\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with updating a buffer. You specify how many vertices\n     * to update in a batch and you specify how many batches are present.\n     *\n     * Batches are used to represent your full shape object that is being loaded from the cpu:\n     *\n     * IE- you have a rectangle object you wish to update in your buffer. This takes around 6 vertices typically\n     * so you make your vertexBatch 6 and the numBatches the number of quads you need to update in the buffer.\n     *\n     * You then provide an accessor which aids in pointing to the buffer items that need updating. The accessor has\n     * variable arguments depending on the attributes you inject in.\n     *\n     * If you have attributes like:\n     * [\n     *  {name: position, size: AttributeSize.Three},\n     *  {name: color, size: AttributeSize.Four},\n     * ]\n     *\n     * Then your accessor will be delievered arguments in this form:\n     *\n     * function(batchIndex: number, positionBuffer: number[], positionIndex: number, colorBuffer: number[], colorIndex: number)\n     *\n     * NOTE: The params handed in ARE ORDERED BY the attributes injected in\n     *\n     * You then can update the buffers based on the index information handed alongside each buffer\n     *\n     * @param {T[]} newData The new data that is going to be injected into the buffer. This must be a NEW REFERENCE of data\n     *                      that does NOT match the reference in the bufferItems.currentData. So newData !== bufferItems.currentData\n     *                      in order for the update to occur.\n     * @param {BufferGeometry} bufferItems The buffer related items used to identify how to update the buffer\n     * @param {number} vertexBatch The number of vertices to include per update batch\n     * @param {number} numBatches The number of batches to execute\n     * @param {Function} updateAccessor The accessor for performing the data update to the buffer\n     * @param {boolean} force This bypasses the typical checks that determines if the buffer SHOULD update.\n     *\n     * @return {boolean} True if the buffer was updated with this call\n     */\n    BufferUtil.updateBuffer = function (newData, bufferItems, vertexBatch, numBatches, updateAccessor, force) {\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // If we passed the data check on the first pass, then all future streamed updates\n        // Should pass as well\n        var testPerformed = lastBatchRegister !== 0 && isStreamUpdatingRegister;\n        // We check if there is a reference change in the data indicating a buffer push needs to happen\n        if ((newData !== undefined && newData !== bufferItems.currentData) || testPerformed || force) {\n            // If we aren't streaming updates, then we always start at the beginning\n            if (!isStreamUpdatingRegister) {\n                // Reset out last batch register as this is an entriely new update\n                lastBatchRegister = 0;\n            }\n            // Flag the newly rendered data as our current data\n            bufferItems.currentData = newData;\n            // Get the attributes by name out of the three js buffer\n            var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n            // Get the raw number buffers\n            var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n            // Determine what kind of buffer pointer increments we will need\n            var incrementValues = attributes.map(function (attr) { return (attr.size + 1) * vertexBatch; });\n            // Apply all data needed to any registers we need\n            applyAttributeRegisters(attributeBuffers, incrementValues);\n            // Get the method that will perform the update based on number of attributes\n            var updateMethod = updateBufferLookUp[attributes.length];\n            // Execute the update method\n            updateMethod(numBatches + lastBatchRegister, updateAccessor);\n            // Flag each buffer attribute for needing an update\n            bufferAttributes.forEach(function (attr) { return attr.needsUpdate = true; });\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n            return true;\n        }\n        else {\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n        }\n        return false;\n    };\n    /**\n     * This makes all of the typical items used in creating and managing a buffer of items rendered to the screen\n     *\n     * @returns {IBufferItems<T>} An empty object of the particular buffer items needed\n     */\n    BufferUtil.makeBufferItems = function () {\n        return {\n            attributes: [],\n            currentData: [],\n            geometry: null,\n            system: null,\n        };\n    };\n    return BufferUtil;\n}());\nexports.BufferUtil = BufferUtil;\nvar _a;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This deinfes the minimal set of methods that should be implemented to create\n * a reusable buffer object that can be initialized and populated.\n */\nvar BaseBuffer = (function () {\n    function BaseBuffer() {\n    }\n    /**\n     * This initializes the buffer and generates the buffer items object.\n     */\n    BaseBuffer.prototype.init = function (material, unitCount) {\n        // To be implemented by a subclass\n    };\n    /**\n     * This updates the buffer by providing the shape buffer needed to update\n     * the internal buffer items\n     *\n     * @param {T[]} shapeBuffer The shape buffer containing all of the shape data\n     *                          to be placed into the buffer.\n     *\n     * @return {boolean} Retrusn true if this pushed up any updates\n     */\n    BaseBuffer.prototype.update = function (shapeBuffer) {\n        // To be implemented by a subclass\n        return false;\n    };\n    return BaseBuffer;\n}());\nexports.BaseBuffer = BaseBuffer;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n/**\n * Represents a line with a given slope\n */\nvar Line = (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates a new line that passes through the two specified points\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    function Line(p1, p2) {\n        var _this = _super.call(this, 0, 1, 1, 0) || this;\n        _this.setPoints(p1, p2);\n        return _this;\n    }\n    /**\n     * This calculates the distance to a point from the provided line\n     * BUT this ALSO retains the directionality of that distance. So one side of\n     * the line will be positive while the other negative\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.directionTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line, but we won't take the absolute to retain the direction\n        return this.perpendicular.x * vector.x + this.perpendicular.y * vector.y;\n    };\n    /**\n     * This calculates the distance to a point from the provided line\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.distanceTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line\n        return Math.abs(this.perpendicular.x * vector.x +\n            this.perpendicular.y * vector.y);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {Array} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    Line.getClosest = function (lines, p) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(p);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This sets the two endpoints for this line and recalculates the bounds\n     * of the line accordingly\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    Line.prototype.setPoints = function (p1, p2) {\n        this.x = p1.x - 1;\n        this.y = p1.y - 1;\n        this.width = 2;\n        this.height = 2;\n        this.encapsulatePoint(p2);\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        this.slope = dy / dx;\n        this.p1 = p1;\n        this.p2 = p2;\n        this.magnitude = Math.sqrt(dx * dx + dy * dy);\n        this.perpendicular = {\n            x: this.p2.y - this.p1.y,\n            y: -(this.p2.x - this.p1.x),\n        };\n        // Normalize the perpendicular line\n        var mag = Math.sqrt(this.perpendicular.x * this.perpendicular.x +\n            this.perpendicular.y * this.perpendicular.y);\n        this.perpendicular.x /= mag;\n        this.perpendicular.y /= mag;\n    };\n    return Line;\n}(bounds_1.Bounds));\nexports.Line = Line;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} p1 The start of the direction\n     * @param {IPoint} p2 The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.getDirection = function (p1, p2, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.getDirection(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar AtlasTexture = (function () {\n    /**\n     * Generates a new atlas texture that points to a specific image resource.\n     *\n     * @param path The path to the image resource to be loaded into the atlas.\n     */\n    function AtlasTexture(path, label) {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        this.imagePath = path;\n        this.label = label;\n        // Let the label keep track of it's rasterization\n        if (label) {\n            this.label.rasterizedLabel = this;\n        }\n    }\n    return AtlasTexture;\n}());\nexports.AtlasTexture = AtlasTexture;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FrameInfo = (function () {\n    function FrameInfo() {\n    }\n    /** Contains the time the previous frame started */\n    FrameInfo.lastFrameTime = Date.now();\n    /** Contains a theoretical approximation the next frame will start */\n    FrameInfo.nextFrameTime = Date.now();\n    /** Contains how many frames have been played for a given WebGLSurface context */\n    FrameInfo.framesPlayed = new Map();\n    return FrameInfo;\n}());\nexports.FrameInfo = FrameInfo;\n/**\n * This gets an integer time value that can fit within an attribute. Be aware,\n * this only supports up to 7 digits of the millisecond time.\n */\nfunction getAttributeCurrentTime() {\n    var time = FrameInfo.lastFrameTime / 1E7;\n    return Math.floor((time - Math.floor(time)) * 1E7);\n}\nexports.getAttributeCurrentTime = getAttributeCurrentTime;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Does a linear easing of a value\n *\n * @param {number} t The time elapsed: 0 to d\n * @param {number} s The start value\n * @param {number} c The change in value\n * @param {number} d The duration of the change\n *\n * @returns A number linearly progressing from s to s+c depending on the value of\n *          t in relation to d\n */\nfunction linear(t, s, c, d) {\n    return c * t / d + s;\n}\nexports.linear = linear;\nfunction easeInQuad(t, b, c, d) {\n    return c * (t /= d) * t + b;\n}\nexports.easeInQuad = easeInQuad;\nfunction easeOutQuad(t, b, c, d) {\n    return -c * (t /= d) * (t - 2) + b;\n}\nexports.easeOutQuad = easeOutQuad;\nfunction easeInOutQuad(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t + b;\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\n}\nexports.easeInOutQuad = easeInOutQuad;\nfunction easeInCubic(t, b, c, d) {\n    return c * (t /= d) * t * t + b;\n}\nexports.easeInCubic = easeInCubic;\nfunction easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n}\nexports.easeOutCubic = easeOutCubic;\nfunction easeInOutCubic(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n}\nexports.easeInOutCubic = easeInOutCubic;\nfunction easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n}\nexports.easeInQuart = easeInQuart;\nfunction easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n}\nexports.easeOutQuart = easeOutQuart;\nfunction easeInOutQuart(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t + b;\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n}\nexports.easeInOutQuart = easeInOutQuart;\nfunction easeInQuint(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n}\nexports.easeInQuint = easeInQuint;\nfunction easeOutQuint(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n}\nexports.easeOutQuint = easeOutQuint;\nfunction easeInOutQuint(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n}\nexports.easeInOutQuint = easeInOutQuint;\nfunction easeInSine(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n}\nexports.easeInSine = easeInSine;\nfunction easeOutSine(t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n}\nexports.easeOutSine = easeOutSine;\nfunction easeInOutSine(t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n}\nexports.easeInOutSine = easeInOutSine;\nfunction easeInExpo(t, b, c, d) {\n    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nexports.easeInExpo = easeInExpo;\nfunction easeOutExpo(t, b, c, d) {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nexports.easeOutExpo = easeOutExpo;\nfunction easeInOutExpo(t, b, c, d) {\n    if (t === 0)\n        return b;\n    if (t === d)\n        return b + c;\n    if ((t /= d / 2) < 1)\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n}\nexports.easeInOutExpo = easeInOutExpo;\nfunction easeInCirc(t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n}\nexports.easeInCirc = easeInCirc;\nfunction easeOutCirc(t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n}\nexports.easeOutCirc = easeOutCirc;\nfunction easeInOutCirc(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n}\nexports.easeInOutCirc = easeInOutCirc;\nfunction easeInElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n}\nexports.easeInElastic = easeInElastic;\nfunction easeOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n}\nexports.easeOutElastic = easeOutElastic;\nfunction easeInOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return b + c;\n    if (!p)\n        p = d * (.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    if (t < 1)\n        return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n}\nexports.easeInOutElastic = easeInOutElastic;\nfunction easeInBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n}\nexports.easeInBack = easeInBack;\nfunction easeOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n}\nexports.easeOutBack = easeOutBack;\nfunction easeInOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    if ((t /= d / 2) < 1)\n        return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n}\nexports.easeInOutBack = easeInOutBack;\nfunction easeInBounce(t, b, c, d) {\n    return c - easeOutBounce(d - t, 0, c, d) + b;\n}\nexports.easeInBounce = easeInBounce;\nfunction easeOutBounce(t, b, c, d) {\n    if ((t /= d) < (1 / 2.75)) {\n        return c * (7.5625 * t * t) + b;\n    }\n    else if (t < (2 / 2.75)) {\n        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\n    }\n    else if (t < (2.5 / 2.75)) {\n        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\n    }\n    else {\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\n    }\n}\nexports.easeOutBounce = easeOutBounce;\nfunction easeInOutBounce(t, b, c, d) {\n    if (t < d / 2)\n        return easeInBounce(t * 2, 0, c, d) * .5 + b;\n    return easeOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b;\n}\nexports.easeInOutBounce = easeInOutBounce;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar point_1 = __webpack_require__(6);\nvar easing_1 = __webpack_require__(11);\n/**\n * This enum is just a common way to define interpolation types\n */\nvar InterpolationMethod;\n(function (InterpolationMethod) {\n    InterpolationMethod[InterpolationMethod[\"BEZIER2\"] = 0] = \"BEZIER2\";\n    InterpolationMethod[InterpolationMethod[\"BEZIER3\"] = 1] = \"BEZIER3\";\n    InterpolationMethod[InterpolationMethod[\"CIRCULAR\"] = 2] = \"CIRCULAR\";\n})(InterpolationMethod = exports.InterpolationMethod || (exports.InterpolationMethod = {}));\n/**\n * This calculates a quadratic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier2(t, p1, p2, c1) {\n    var t2 = t * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    return {\n        x: p1.x * mt2 + c1.x * 2 * mt * t + p2.x * t2,\n        y: p1.y * mt2 + c1.y * 2 * mt * t + p2.y * t2,\n    };\n}\nexports.bezier2 = bezier2;\n/**\n * This calculates a cubic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The first control point of the curve\n * @param {IPoint} c2 The second control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier3(t, p1, p2, c1, c2) {\n    var t2 = t * t;\n    var t3 = t2 * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    var mt3 = mt2 * mt;\n    return {\n        x: p1.x * mt3 + 3 * c1.x * mt2 * t + 3 * c2.x * mt * t2 + p2.x * t3,\n        y: p1.y * mt3 + 3 * c1.y * mt2 * t + 3 * c2.y * mt * t2 + p2.y * t3,\n    };\n}\nexports.bezier3 = bezier3;\n/**\n * This calculates a point along a path defined as a circular path which is a\n * path moving along the edge of a circle from one point to the next. This will\n * even allow for moving along a circle with a growing radius.\n *\n * @param {number} t The 0 - 1 time interval for the part of the path we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point, or more importantly, the center of the circle\n * @param {EasingMethod} radiusEasing Default easing for the radius growing is linear.\n *                                    Insert a custom easing method to change this.\n *\n * @returns {IPoint}\n */\nfunction circular(t, p1, p2, c1, radiusEasing) {\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(c1, p1);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(c1, p2);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Ensure our theta's are definitely between 0 to Math.PI * 2 after the atan\n    // Calculation\n    if (theta1 < 0)\n        theta1 += Math.PI * 2;\n    if (theta2 < 0)\n        theta2 += Math.PI * 2;\n    var dTheta = theta2 - theta1;\n    // We ALWAYS want our path to be the shortest around the circle\n    if (dTheta > Math.PI) {\n        dTheta = theta1 - theta2;\n    }\n    // We use this to calculate how far we are between the two points in radians\n    // Based on the time parameter provided for the interpolation\n    dTheta *= t;\n    // We must have the radial distance of both points to properly calculate\n    // An easing between the two radii\n    var radius1 = point_1.Point.getDistance(p1, c1);\n    var radius2 = point_1.Point.getDistance(p2, c1);\n    // We control how the radius eases out for the path, which is determined by\n    // The easing method, otherwise, it just linearly radiates out\n    var radius = (radiusEasing || easing_1.linear)(t, radius1, radius2 - radius1, 1.0);\n    return {\n        x: Math.cos(theta1 + dTheta) * radius + c1.x,\n        y: Math.sin(theta1 + dTheta) * radius + c1.y,\n    };\n}\nexports.circular = circular;\nexports.pickInterpolation = (_a = {},\n    _a[InterpolationMethod.BEZIER2] = bezier2,\n    _a[InterpolationMethod.BEZIER3] = bezier3,\n    _a[InterpolationMethod.CIRCULAR] = circular,\n    _a);\nvar _a;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = __webpack_require__(8);\nvar three_1 = __webpack_require__(0);\nvar bounds_1 = __webpack_require__(1);\nvar pack_node_1 = __webpack_require__(14);\nvar label_1 = __webpack_require__(15);\nvar atlas_texture_1 = __webpack_require__(9);\nvar debug = __webpack_require__(2)('webgl-surface:Atlas');\nvar debugLabels = __webpack_require__(2)('webgl-surface:Labels');\nvar ZERO_IMAGE = {\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    label: new label_1.Label({ text: ' ' }),\n    pixelHeight: 0,\n    pixelWidth: 0,\n};\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = (function () {\n    /**\n     * Generates a new manager for atlas'. This will create and destroy atlas' and\n     * ensure they have the correct settings applied. A manager will also aid in\n     * packing images into the atlas indicated.\n     *\n     * @param {number} width The width of all atlas' generated\n     * @param {number} height The height of all atlas' generated\n     */\n    function AtlasManager(width, height) {\n        /** Gives a reference of all of the images loaded for the atlas */\n        this.atlasImages = {};\n        /** Stores the current mapping of the atlas */\n        this.atlasMap = {};\n        /** Stores all of the textures that are our atlases */\n        this.atlasTexture = {};\n        this.textureWidth = width;\n        this.textureHeight = height;\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param atlasName The unique name of the atlas so it can be retrieved/referenced easily\n     * @param images The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (atlasName, images, colors) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlasMap, canvas, _i, images_1, image, image, texture, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        atlasMap = new pack_node_1.PackNode(0, 0, this.textureWidth, this.textureHeight);\n                        // Create the mapping element for the new atlas so we can track insertions / deletions\n                        this.atlasMap[atlasName] = atlasMap;\n                        // Make a listing of images that is within the atlas\n                        this.atlasImages[atlasName] = [];\n                        canvas = document.createElement('canvas').getContext('2d');\n                        // Size the canvas to the atlas size\n                        canvas.canvas.width = this.textureWidth;\n                        canvas.canvas.height = this.textureHeight;\n                        if (!images) return [3 /*break*/, 4];\n                        _i = 0, images_1 = images;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < images_1.length)) return [3 /*break*/, 4];\n                        image = images_1[_i];\n                        return [4 /*yield*/, this.draw(image, atlasName, canvas)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        if (!colors) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.drawColors(colors, atlasName, canvas)];\n                    case 5:\n                        image = _b.sent();\n                        // Add the dummy texture info as an image to our list of images\n                        if (image) {\n                            this.atlasImages[atlasName].push(image);\n                        }\n                        _b.label = 6;\n                    case 6:\n                        texture = new three_1.Texture(canvas.canvas);\n                        texture.premultiplyAlpha = true;\n                        texture.generateMipmaps = true;\n                        // Store the texture as the atlas.\n                        this.atlasTexture[atlasName] = texture;\n                        // Store the images as images within the atlas\n                        if (images) {\n                            (_a = this.atlasImages[atlasName]).push.apply(_a, images);\n                        }\n                        debug('Atlas Created-> texture: %o mapping: %o images: %o', texture, atlasMap, images);\n                        return [2 /*return*/, texture];\n                }\n            });\n        });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        if (this.atlasTexture[atlasName]) {\n            this.atlasTexture[atlasName].dispose();\n            this.atlasTexture[atlasName] = null;\n        }\n        if (this.atlasMap[atlasName]) {\n            this.atlasMap[atlasName].destroy();\n            this.atlasMap[atlasName] = null;\n        }\n        if (this.atlasImages[atlasName]) {\n            var none_1 = { x: 0, y: 0 };\n            this.atlasImages[atlasName].forEach(function (image) {\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                image.pixelHeight = 0;\n                image.atlasBL = none_1;\n                image.atlasBR = none_1;\n                image.atlasTL = none_1;\n                image.atlasTR = none_1;\n            });\n            this.atlasImages[atlasName] = null;\n        }\n    };\n    AtlasManager.prototype.isValidImage = function (image) {\n        var isValid = false;\n        if (image && (image.imagePath || (image.label && image.label.text))) {\n            if (image.pixelWidth && image.pixelHeight) {\n                isValid = true;\n            }\n        }\n        return isValid;\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param image The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (image, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var loadedImage, rect, dimensions, node, insertedNode, ux, uy, uw, uh, atlasDimensions;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Validate the index\n                        if (!this.atlasMap[atlasName]) {\n                            debug('Can not load image, invalid Atlas Name: %o for atlasMaps: %o', atlasName, this.atlasMap);\n                            return [2 /*return*/, false];\n                        }\n                        return [4 /*yield*/, this.loadImage(image)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Make sure at this point the image knows it is not affiliated with an atlas\n                        // If something goes wrong with loading or insertting this image, then a null\n                        // Atlas value will indicate the image can not be used appropriately\n                        image.atlasReferenceID = null;\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && this.isValidImage(image)) {\n                            debug('Image loaded: %o', image.imagePath);\n                            rect = new bounds_1.Bounds(0, image.pixelWidth, image.pixelHeight, 0);\n                            dimensions = {\n                                first: image,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            node = this.atlasMap[atlasName];\n                            insertedNode = node.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                if (image.label) {\n                                    debugLabels('Atlas location determined. PackNode: %o Dimensions: %o', insertedNode, dimensions);\n                                }\n                                // Apply the image to the node\n                                insertedNode.nodeImage = image;\n                                ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                                uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                                uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                                uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                                debugLabels('uy is %o', uy);\n                                atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                                image.atlasReferenceID = atlasName;\n                                image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                                image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                                // Now draw the image to the indicated canvas\n                                canvas.drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit image into atlas \" + image.imagePath);\n                                image = this.setDefaultImage(image, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default image\n                            console.error(\"Could not load image \" + image.imagePath);\n                            image = this.setDefaultImage(image, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders a list of colors to the canvas. This using the same packing\n     * algorithm as any image so the rendering is placed correctly or determines\n     * if enough space is not available.\n     *\n     * @param {AtlasColor[]} colors The list of colors to be rendered to the atlas\n     * @param {string} atlasName The name of the atlas being rendered to\n     * @param {CanvasRenderingContext2D} canvas The canvas of the atlas being rendered to\n     *\n     * @returns {Promise<boolean>} Resolves to true if the operation was successful\n     */\n    AtlasManager.prototype.drawColors = function (colors, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var colorWidth, colorHeight, maxPerRow, rowWidth, rowCount, colCount, renderHeight, dimensions, node, insertedNode, image, ux, uy, uw, uh, atlasDimensions, renderSpace, startX, startY, nextX, nextY, beginX, beginY, col, row, _i, colors_1, color, _a, r, g, b;\n            return __generator(this, function (_b) {\n                debug('Finding space for colors on the atlas: %o', colors);\n                colorWidth = 2;\n                colorHeight = 2;\n                maxPerRow = 1024 / colorWidth;\n                rowWidth = Math.min(this.textureWidth, maxPerRow * colorWidth);\n                rowCount = Math.ceil((colors.length * colorWidth) / rowWidth);\n                colCount = Math.ceil(rowWidth / colorWidth);\n                renderHeight = rowCount * colorHeight;\n                dimensions = {\n                    // Since the algorithm requires something to fill this slot, just make a\n                    // Dummy object\n                    first: new atlas_texture_1.AtlasTexture(null, null),\n                    // Set the dimensions we calculated for the space our colors will take up\n                    // Within the atlas\n                    second: new bounds_1.Bounds(0, rowWidth, renderHeight, 0),\n                };\n                // Auto add a buffer in\n                dimensions.second.width += 1;\n                dimensions.second.height += 1;\n                node = this.atlasMap[atlasName];\n                insertedNode = node.insert(dimensions);\n                // If the result was NULL we did not successfully insert the image into any map\n                if (insertedNode) {\n                    debug('Atlas location determined for colors: %o', insertedNode);\n                    image = insertedNode.nodeImage = dimensions.first;\n                    ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                    uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                    uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                    uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                    atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                    image.atlasReferenceID = atlasName;\n                    image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                    image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                    renderSpace = insertedNode.nodeDimensions;\n                    startX = renderSpace.x;\n                    startY = renderSpace.y;\n                    nextX = colorWidth / this.textureWidth;\n                    nextY = -colorHeight / this.textureHeight;\n                    beginX = (startX / this.textureWidth) + (nextX / 2.0);\n                    beginY = 1.0 - (startY / this.textureHeight) + (nextY / 2.0);\n                    col = 0;\n                    row = 0;\n                    // Loop through each color, establish metrics, draw to the atlas\n                    for (_i = 0, colors_1 = colors; _i < colors_1.length; _i++) {\n                        color = colors_1[_i];\n                        // Staore the info needed to make the color referenceable again\n                        color.atlasReferenceID = atlasName;\n                        color.colorIndex = col + (row * colCount);\n                        color.colorsPerRow = colCount;\n                        // The location of the middle of the first color\n                        color.firstColor = {\n                            x: beginX,\n                            y: beginY,\n                        };\n                        color.nextColor = {\n                            x: nextX,\n                            y: nextY,\n                        };\n                        _a = color.color, r = _a.r, g = _a.g, b = _a.b;\n                        // Draw the color to the canvas\n                        canvas.fillStyle = \"rgba(\" + Math.round(r * 255.0) + \", \" + Math.round(g * 255.0) + \", \" + Math.round(b * 255.0) + \", \" + color.opacity + \")\";\n                        canvas.fillRect(col * colorWidth + startX, row * colorHeight + startY, colorWidth, colorHeight);\n                        col++;\n                        if (col === colCount) {\n                            col = 0;\n                            row++;\n                        }\n                    }\n                    // We have finished inserting\n                    return [2 /*return*/, image];\n                }\n                else {\n                    // Log an error\n                    throw new Error('Could not fit colors into atlas');\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.atlasTexture[atlasName];\n    };\n    /**\n     * This reads the input path and loads the image specified by the path\n     *\n     * @param {AtlasTexture} texture This is an atlas texture with the path set\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (texture) {\n        if (texture.imagePath) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    texture.pixelWidth = image.width;\n                    texture.pixelHeight = image.height;\n                    texture.aspectRatio = image.width / image.height;\n                    resolve(image);\n                };\n                image.onerror = function () {\n                    resolve(null);\n                };\n                image.src = texture.imagePath;\n            });\n        }\n        else if (texture.label) {\n            return new Promise(function (resolve, reject) {\n                var label = texture.label;\n                var labelSize = label.getSize();\n                var canvas = document.createElement('canvas');\n                var ctx = canvas.getContext('2d');\n                // Set the dimensions of the canvas/texture space we will be using to rasterize\n                // The label. Use the label's rasterization controls to aid in rendering the label\n                canvas.width = labelSize.width + texture.label.rasterizationPadding.width;\n                canvas.height = labelSize.height + texture.label.rasterizationPadding.height;\n                if (ctx) {\n                    var fontSize = label.fontSize;\n                    var color = d3_color_1.rgb(label.color.base.color.r * 255, label.color.base.color.g * 255, label.color.base.color.b * 255, label.color.base.opacity);\n                    ctx.font = label.makeCSSFont(fontSize);\n                    ctx.textAlign = label.textAlign;\n                    ctx.textBaseline = label.textBaseline;\n                    ctx.fillStyle = color.toString();\n                    // Render the label to the canvas/texture space. This utilizes the label's\n                    // Rasterization metrics to aid in getting a clean render.\n                    ctx.fillText(label.text, texture.label.rasterizationOffset.x, texture.label.height / 2 + texture.label.rasterizationOffset.y);\n                    var image_1 = new Image();\n                    image_1.onload = function () {\n                        // Here we use the canvas dimensions and NOT the image dimensions\n                        // As the image dimensions are unreliable here when setting the src\n                        // To a data url\n                        texture.pixelWidth = image_1.width;\n                        texture.pixelHeight = image_1.height;\n                        texture.aspectRatio = image_1.width / image_1.height;\n                        debugLabels('Applying size based on rasterization to the Label: w: %o h: %o', image_1.width, image_1.height);\n                        label.setSize({\n                            height: image_1.height,\n                            width: image_1.width,\n                        });\n                        resolve(image_1);\n                    };\n                    image_1.onerror = function () {\n                        resolve(null);\n                    };\n                    image_1.src = canvas.toDataURL('image/png');\n                }\n            });\n        }\n        return Promise.resolve(null);\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds(x, x + width, y, y - height);\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        this.nodeImage = null;\n        if (this.child[0]) {\n            this.child[0].destroy();\n        }\n        if (this.child[1]) {\n            this.child[1].destroy();\n        }\n        this.child[0] = undefined;\n        this.child[1] = undefined;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        if (this.child[0] && !this.child[0].nodeImage) {\n            return !this.child[0].isLeaf;\n        }\n        if (this.child[1] && !this.child[1].nodeImage) {\n            return !this.child[1].isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        if (!this.isLeaf) {\n            // Try inserting into first child\n            var newNode = this.child[0].insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return this.child[1].insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = __webpack_require__(7);\nvar rotateable_quad_1 = __webpack_require__(16);\nvar sprite_1 = __webpack_require__(17);\nvar measurement = new sprite_1.Sprite(200, 200, 1, 1);\nvar Label = (function (_super) {\n    __extends(Label, _super);\n    /**\n     * Creates an instance of Label.\n     *\n     * @param {Partial<Label<T>>} [options={}]\n     */\n    function Label(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, { x: 0, y: 1 }, { width: 1, height: 1 }, 0, rotateable_quad_1.AnchorPosition.TopLeft) || this;\n        _this.depth = 0;\n        _this.direction = 'inherit';\n        _this.font = 'serif';\n        _this.fontSize = 10;\n        _this.fontWeight = 400;\n        _this.maxWidth = undefined;\n        _this.text = '';\n        _this.id = '';\n        _this.textAlign = 'start';\n        _this.textBaseline = 'alphabetic';\n        _this.zoomable = false;\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to offset the rasterization if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationOffset = { x: 0, y: 12 };\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to pad the rasterization space if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationPadding = { width: 0, height: 0 };\n        // Set props\n        Object.assign(_this, options);\n        // Make sure our dimensions are set\n        _this.setFontSize(options.fontSize || 12);\n        return _this;\n    }\n    Object.defineProperty(Label.prototype, \"baseLabel\", {\n        get: function () {\n            return this._baseLabel;\n        },\n        set: function (value) {\n            this._baseLabel = value;\n            this.text = value.text;\n            this.fontSize = value.fontSize;\n            this.font = value.font;\n            this.textAlign = value.textAlign;\n            this.textBaseline = value.textBaseline;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Label.prototype, \"rasterizedLabel\", {\n        /**\n         * This getter ensures the rasterized label retrieved is either this labels own rasterization\n         * or from a base.\n         */\n        get: function () {\n            if (this.baseLabel) {\n                return this.baseLabel.rasterizedLabel;\n            }\n            return this._rasterizedLabel;\n        },\n        set: function (value) {\n            this._rasterizedLabel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies all of the properties of a label and makes this label use them\n     *\n     * @param {Label} label The labels whose properties we wish to copy\n     */\n    Label.prototype.copyLabel = function (label) {\n        // Assign the properties of the other label to this\n        // Specifically, ONLY label properties\n        Object.assign(this, ramda_1.omit(['x', 'y', 'width', 'height'], label));\n        // Use this to set the text to make sure all of the metrics are re-calculated\n        this.setText(label.text);\n    };\n    /**\n     * This gets the actual text this label is capable of rendering\n     */\n    Label.prototype.getText = function () {\n        if (this._baseLabel) {\n            return this._baseLabel.getText();\n        }\n        return this.text;\n    };\n    /**\n     * Takes all of the current settings and makes a CSS font string\n     */\n    Label.prototype.makeCSSFont = function (fontSize) {\n        return this.fontWeight + \" \" + (fontSize || this.fontSize) + \"px \" + this.font;\n    };\n    /**\n     * Change the position this text is rendered to\n     *\n     * @param x X world coordinate\n     * @param y Y world coordinate\n     */\n    Label.prototype.position = function (x, y) {\n        this.x = x;\n        this.y = y;\n    };\n    /**\n     * This sets the font size for the label based on the base text dimensions\n     *\n     * @param {number} fontSize\n     */\n    Label.prototype.setFontSize = function (fontSize) {\n        var lbl = this.getText();\n        var size = this.getSize();\n        var width = size.width;\n        var height = size.height;\n        if (this.baseLabel) {\n            var baseSize = this.baseLabel.getSize();\n            var scale = fontSize / this.baseLabel.fontSize;\n            height = baseSize.height * scale;\n            width = baseSize.width * scale;\n        }\n        else {\n            measurement.context.font = this.makeCSSFont();\n            var size_1 = measurement.context.measureText(lbl);\n            // Set our properties based on the calculated size\n            height = fontSize;\n            width = size_1.width;\n        }\n        this.fontSize = fontSize;\n        this.setSize({ width: width, height: height });\n    };\n    /**\n     * Change the text and the calculated bounding box for this label\n     */\n    Label.prototype.setText = function (lbl) {\n        this.text = lbl;\n        this.setFontSize(this.fontSize);\n    };\n    Label.prototype.update = function () {\n        this.setFontSize(this.fontSize);\n        _super.prototype.update.call(this);\n    };\n    return Label;\n}(rotateable_quad_1.RotateableQuad));\nexports.Label = Label;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar bounds_1 = __webpack_require__(1);\nvar AnchorPosition;\n(function (AnchorPosition) {\n    AnchorPosition[AnchorPosition[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorPosition[AnchorPosition[\"BottomRight\"] = 1] = \"BottomRight\";\n    AnchorPosition[AnchorPosition[\"Custom\"] = 2] = \"Custom\";\n    AnchorPosition[AnchorPosition[\"Middle\"] = 3] = \"Middle\";\n    AnchorPosition[AnchorPosition[\"MiddleBottom\"] = 4] = \"MiddleBottom\";\n    AnchorPosition[AnchorPosition[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorPosition[AnchorPosition[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorPosition[AnchorPosition[\"MiddleTop\"] = 7] = \"MiddleTop\";\n    AnchorPosition[AnchorPosition[\"TopLeft\"] = 8] = \"TopLeft\";\n    AnchorPosition[AnchorPosition[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorPosition = exports.AnchorPosition || (exports.AnchorPosition = {}));\nvar anchorCalculations = (_a = {},\n    _a[AnchorPosition.BottomLeft] = function (quad) { return ({\n        x: 0,\n        y: 0,\n    }); },\n    _a[AnchorPosition.BottomRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: 0,\n    }); },\n    _a[AnchorPosition.Custom] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.Middle] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleBottom] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: 0,\n    }); },\n    _a[AnchorPosition.MiddleLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleTop] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height,\n    }); },\n    _a);\nvar RotateableQuad = (function (_super) {\n    __extends(RotateableQuad, _super);\n    /**\n     * Generates a quad\n     *\n     * @param {IPoint} location The location of the quad (it's anchorpoint will be placed here)\n     * @param {number} width The width of the quad\n     * @param {number} height The height of the quad\n     * @param {AnchorPosition} anchor The anchor location of the quad.\n     *                                Location and rotation will be relative to this.\n     */\n    function RotateableQuad(location, size, rotation, anchor) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        // Apply our properties\n        _this.setSize(size);\n        _this.setAnchor(anchor);\n        _this.setLocation(location);\n        _this.setRotation(rotation);\n        // Update the transform and the corner vertices\n        _this.update();\n        return _this;\n    }\n    /**\n     * @private\n     * Recalculates this anchor position based on the anchor type\n     *\n     * @param {AnchorPosition} anchor\n     */\n    RotateableQuad.prototype.calculateAnchor = function (anchor) {\n        this.anchor = anchorCalculations[anchor](this);\n    };\n    /**\n     * Get the base size of the quad\n     *\n     * @returns {ISize} The base size of this quad\n     */\n    RotateableQuad.prototype.getSize = function () {\n        return this.size;\n    };\n    /**\n     * Sets the specified anchor position on the quad\n     *\n     * @param {AnchorPosition} anchor This specifies an auto calculated position for the anchor\n     * @param {IPoint} custom If specified, will set a custom anchor location rather\n     *                        than the calculated version.\n     */\n    RotateableQuad.prototype.setAnchor = function (anchor, custom) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        this.anchorType = anchor;\n        // Apply the custom position if present\n        if (custom) {\n            this.anchorType = AnchorPosition.Custom;\n            this.anchor = custom;\n            return;\n        }\n        this.calculateAnchor(anchor);\n    };\n    RotateableQuad.prototype.getAnchor = function () {\n        return this.anchor;\n    };\n    RotateableQuad.prototype.getAnchorType = function () {\n        return this.anchorType;\n    };\n    /**\n     * This sets the location of this quad to a given position where the anchor\n     * point will be located on top of the location provided.\n     *\n     * @param {IPoint} location The location to place the quad\n     */\n    RotateableQuad.prototype.setLocation = function (location) {\n        this.location = location;\n    };\n    RotateableQuad.prototype.getLocation = function () {\n        return this.location;\n    };\n    /**\n     * Sets the rotation of this quad, in radians, rotated around the anchor point.\n     *\n     * @param {number} rotation The rotation of the quad\n     */\n    RotateableQuad.prototype.setRotation = function (rotation) {\n        this.rotation = rotation;\n    };\n    /**\n     * get Rotation\n     */\n    RotateableQuad.prototype.getRotation = function () {\n        return this.rotation;\n    };\n    /**\n     * get direction as a point\n     */\n    RotateableQuad.prototype.getDirection = function () {\n        var angle = this.rotation;\n        return {\n            x: Math.cos(angle),\n            y: Math.sin(angle),\n        };\n    };\n    /**\n     * Applies the size to the base\n     *\n     * @param {ISize} size The size of the base quad\n     */\n    RotateableQuad.prototype.setSize = function (size) {\n        this.size = size;\n        this.base = [\n            new three_1.Vector4(0, size.height, 0, 1),\n            new three_1.Vector4(size.width, size.height, 0, 1),\n            new three_1.Vector4(0, 0, 0, 1),\n            new three_1.Vector4(size.width, 0, 0, 1),\n        ];\n        if (this.anchorType) {\n            this.calculateAnchor(this.anchorType);\n        }\n    };\n    /**\n     * This re-calculates the transform for this quad and applies the transform to\n     * the corners.\n     */\n    RotateableQuad.prototype.update = function () {\n        // Calculate the pieces of the transformation\n        var anchorMat = new three_1.Matrix4().makeTranslation(this.anchor.x, -this.anchor.y, 0);\n        var rotationMat = new three_1.Matrix4().makeRotationZ(this.rotation);\n        var locationMat = new three_1.Matrix4().makeTranslation(this.location.x, this.location.y, 0);\n        // Compose the transform based on the pieces and apply them\n        // In the proper compositing order\n        this.transform = new three_1.Matrix4()\n            .multiply(locationMat)\n            .multiply(rotationMat)\n            .multiply(anchorMat);\n        // Apply the transform to all of our base vertices\n        this.TL = this.base[0].clone().applyMatrix4(this.transform);\n        this.TR = this.base[1].clone().applyMatrix4(this.transform);\n        this.BL = this.base[2].clone().applyMatrix4(this.transform);\n        this.BR = this.base[3].clone().applyMatrix4(this.transform);\n        // Update the bounds of this object\n        this.x = this.TL.x;\n        this.y = this.TL.y;\n        this.width = 1;\n        this.height = 1;\n        this.encapsulatePoints([this.TR, this.BL, this.BR]);\n    };\n    return RotateableQuad;\n}(bounds_1.Bounds));\nexports.RotateableQuad = RotateableQuad;\nvar _a;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A canvas element wrapper that aids in tracking a canvas element along with\n * content scaling properties.\n *\n * @class Sprite\n */\nvar Sprite = (function () {\n    //\n    // Ctor at the top below props\n    //\n    /**\n     * Creates an instance of Sprite.\n     *\n     * @param w             The width of the context to create\n     * @param h             The height of the context to create\n     * @param contentScaleX The content scaling of the content\n     * @param contentScaleY The content scaling of the content\n     *\n     * @memberOf Sprite\n     */\n    function Sprite(w, h, contentScaleX, contentScaleY) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n        var canvas = document.createElement('canvas');\n        if (canvas) {\n            this.scaleX = contentScaleX || this.scaleX;\n            this.scaleY = contentScaleY || this.scaleY;\n            canvas.width = w * this.scaleX;\n            canvas.height = h * this.scaleY;\n            this.context = canvas.getContext('2d');\n            this.canvas = canvas;\n        }\n    }\n    /**\n     * Retrieves the content scaling of this object\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentScale = function () {\n        return {\n            x: this.scaleX,\n            y: this.scaleY,\n        };\n    };\n    /**\n     * Retrieves the size of the content ignoring scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentSize = function () {\n        return {\n            height: this.canvas.height,\n            width: this.canvas.width,\n        };\n    };\n    /**\n     * Retrieves the dimensional width of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getWidth = function () {\n        return this.canvas.width / this.scaleX;\n    };\n    /**\n     * Retrieves the dimensional height of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getHeight = function () {\n        return this.canvas.height / this.scaleY;\n    };\n    return Sprite;\n}());\nexports.Sprite = Sprite;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = __webpack_require__(31);\nvar three_1 = __webpack_require__(0);\nvar debug = __webpack_require__(2)('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e.nativeEvent;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || e.nativeEvent.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.bounds = null;\n        this.children = [];\n        this.childrenProps = [];\n        this.depth = 0;\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds(left, right, top, bottom);\n        }\n        else {\n            this.bounds = new bounds_1.Bounds(0, 1, 1, 0);\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        this.children = null;\n        this.bounds = null;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom < minY) {\n                minY = child.bottom;\n            }\n            if (child.y > maxY) {\n                maxY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds(minX, maxX, maxY, minY));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y += 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Collects all props associated with the children. This array of props will\n     * mirror the list retrieved with gatherChildren.\n     *\n     * @param list\n     *\n     * @returns The list specified as the list paramter\n     *\n     * @memberOf Node\n     */\n    Node.prototype.gatherProps = function (list) {\n        var _this = this;\n        this.children.forEach(function (c, index) {\n            list.push(_this.childrenProps[index]);\n        });\n        if (this.nodes) {\n            this.nodes.TL.gatherProps(list);\n            this.nodes.TR.gatherProps(list);\n            this.nodes.BL.gatherProps(list);\n            this.nodes.BR.gatherProps(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        this.childrenProps = [];\n        while (allChildren.length > 0) {\n            this.doAdd(allChildren.pop());\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar curved_line_1 = __webpack_require__(21);\nvar line_1 = __webpack_require__(5);\nvar point_1 = __webpack_require__(6);\n/**\n * This defines a drawable curved line shape. It contains the information necessary\n * to efficiently render the line.\n *\n * @export\n * @class CurvedLineShape\n * @extends {CurvedLine<T>}\n * @template T An associated data type that can be linked to this shape to make data retrieval from interacting\n *             with the shape easier.\n */\nvar CurvedLineShape = (function (_super) {\n    __extends(CurvedLineShape, _super);\n    /**\n     * Creates an instance of CurvedLineShape.\n     *\n     * @param {ICurvedLineShapeOptions} options The options for creating this line\n     */\n    function CurvedLineShape(options) {\n        var _this = \n        // We pass our properties to the curve line but we do not let it cache it's version of the line segments\n        // As we will be constructing our own segmentation requiring a new type of cache\n        _super.call(this, options) || this;\n        /** Depeth of draw location */\n        _this.depth = 0;\n        /** How thick the line should be */\n        _this.lineWidth = 1;\n        _this.encapsulatePoints(_this.getTriangleStrip());\n        _this.cachesQuadSegments = options.cacheSegments;\n        _this.depth = options.depth || 0;\n        _this.lineWidth = options.lineWidth || 1;\n        _this.startColor = options.startColor;\n        _this.endColor = options.endColor;\n        return _this;\n    }\n    /**\n     * Returns a new instance of this object that mimicks the properties of this Object\n     *\n     * @returns {CurvedLineShape<T>} The cloned object\n     */\n    CurvedLineShape.prototype.clone = function () {\n        // Perform the clone\n        var clone = new CurvedLineShape({\n            cacheSegments: this.cachesSegments,\n            controlPoints: this.controlPoints,\n            end: this.end,\n            endColor: this.endColor,\n            lineWidth: this.lineWidth,\n            resolution: this.resolution,\n            start: this.start,\n            startColor: this.startColor,\n            type: this.type,\n        });\n        clone.d = this.d;\n        return clone;\n    };\n    /**\n     * @override\n     * See base definition\n     */\n    CurvedLineShape.prototype.distanceTo = function (point) {\n        return Math.max(0, _super.prototype.distanceTo.call(this, point) - (this.lineWidth / 2.0));\n    };\n    /**\n     * This produces a triangle strip that represents the quads that composes this line. If caching is present,\n     * subsequent calls to this method will be much faster unless the cache gets invalidated.\n     *\n     * @return {IPoint[]} The Triangle Strip of points to create the quads that make each segment of the curve\n     */\n    CurvedLineShape.prototype.getTriangleStrip = function () {\n        if (this.cachesSegments && this.cachedQuadSegments) {\n            return this.cachedQuadSegments;\n        }\n        // Make a container to hold our triangle strip info\n        var strip = [];\n        var normal = [];\n        // Start with calculating the line strip so we can use the line segments\n        // To produce the quads we need to render\n        var lineStrip = this.getLineStrip();\n        var lineWidthHalf = this.lineWidth / 2.0;\n        var line = new line_1.Line(point_1.Point.zero(), point_1.Point.zero());\n        // We make a container point for the scaling operation to reduce allocations\n        var scaledPoint = point_1.Point.zero();\n        // If the line strip is empty, then there is nothing to produce and makes\n        // Us unable to reduce the lineStrip, so return empty here\n        if (lineStrip.length < 2) {\n            return [];\n        }\n        // Calculate bisecting normal or each node\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            line.setPoints(lineStrip[i], lineStrip[i + 1]);\n            if (normal.length === 0) {\n                normal.push(line.perpendicular);\n            }\n            else {\n                // Sum of two normals of a point\n                var temp = {\n                    x: normal[i].x + line.perpendicular.x,\n                    y: normal[i].y + line.perpendicular.y,\n                };\n                // Normalize the sum of two normals\n                var sqrt = Math.sqrt(temp.x * temp.x + temp.y * temp.y);\n                temp.x = temp.x / sqrt;\n                temp.y = temp.y / sqrt;\n                normal[i] = temp;\n            }\n            normal.push(line.perpendicular);\n        }\n        // Use the new normals to generate quads\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            var previous = lineStrip[i];\n            var current = lineStrip[i + 1];\n            // TR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], -lineWidthHalf, scaledPoint), current));\n            // BR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], lineWidthHalf, scaledPoint), current));\n            // TL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], -lineWidthHalf, scaledPoint), previous));\n            // BL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], lineWidthHalf, scaledPoint), previous));\n        }\n        return strip;\n    };\n    /**\n     * @override\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     */\n    CurvedLineShape.prototype.setPoints = function (start, end, controlPoints) {\n        _super.prototype.setPoints.call(this, start, end, controlPoints);\n        this.cachedQuadSegments = [];\n    };\n    return CurvedLineShape;\n}(curved_line_1.CurvedLine));\nexports.CurvedLineShape = CurvedLineShape;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = __webpack_require__(7);\nvar interpolation_1 = __webpack_require__(12);\nvar bounds_1 = __webpack_require__(1);\nvar line_1 = __webpack_require__(5);\nvar point_1 = __webpack_require__(6);\nvar debug = __webpack_require__(2)('bezier');\n/**\n * This enum covers the type of curved lines that can be made. Making a specific curve\n *\n * @export\n * @enum {number}\n */\nvar CurveType;\n(function (CurveType) {\n    /** This will make the curve be generated from interpolating between the end points and provided control points */\n    CurveType[CurveType[\"Bezier\"] = 0] = \"Bezier\";\n    /**\n     * This will draw a curve as though there is a circular arc passing over the two end points. The radius of the\n     * circular arc is determined by how far the control point is from the straight line that can be made from the two\n     * end points.\n     */\n    CurveType[CurveType[\"CircularCCW\"] = 1] = \"CircularCCW\";\n    CurveType[CurveType[\"CircularCW\"] = 2] = \"CircularCW\";\n    /**\n     * This ignores the control points altogether and just created a straight line with a single segment that consists\n     * of the specified endpoints\n     */\n    CurveType[CurveType[\"Straight\"] = 3] = \"Straight\";\n})(CurveType = exports.CurveType || (exports.CurveType = {}));\n// -------[ Distance Calculating Methods ]----------------------------\n/**\n * Calculates the distance to the bezier curve by testing all of the bezier curve's segment lines\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction bezierDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a circle\n * TODO: Using the segment approach for now. Can be sped up by using circle math\n * instead\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction circularDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a straight line\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction straightDistance(line, testPoint) {\n    return new line_1.Line(line.start, line.end).distanceTo(testPoint);\n}\n// -------[ Segment Generating Methods ]----------------------------\n/**\n * Uses quadratic bezier principles to create the segments for a quadratic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier2Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var end = line.end;\n    var c1 = line.controlPoints[0];\n    for (var i = 0, end_1 = line.resolution; i <= end_1; ++i) {\n        segments.push(interpolation_1.bezier2(dt * i, start, end_1, c1));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Uses cubic bezier principles to create the segments for a cubic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier3Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var end = line.end;\n    var c1 = line.controlPoints[0];\n    var c2 = line.controlPoints[1];\n    for (var i = 0, end_2 = line.resolution; i <= end_2; ++i) {\n        segments.push(interpolation_1.bezier3(dt * i, start, end_2, c1, c2));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that follows along a circular path on the line.\n * The distance the control point is from the straight line that flows through the two\n * end points of the line determines the radius of the curvature of the line\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeCircularCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    debug('CW');\n    // Generate a line so we can have a perpendicular calculation\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    // We get the midpoint of the line as we want to align the center of the circle with this point\n    var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n    var minRadius = point_1.Point.getDistance(midPoint, line.start);\n    // The shortest the radius can be is the distance from the line to the mid point\n    // Anything shorter will just result in a hemisphere being rendered\n    if (radius < minRadius) {\n        radius = point_1.Point.getDistance(midPoint, line.start);\n    }\n    // Get the perpendicular direction to the line so we can calculate the center of our circle\n    // From the mid point\n    var perpendicular = straightLine.perpendicular;\n    var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n    // Calculate the location of the center of the circle\n    var circleCenter = {\n        x: perpendicular.x * distance + midPoint.x,\n        y: perpendicular.y * distance + midPoint.y,\n    };\n    // Store the circle center as an extra control point in case the value is needed\n    // (which it often is)\n    line.controlPoints[1] = circleCenter;\n    debug(' center of circle is %o  %o', circleCenter.x, circleCenter.y);\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Calculate how much to increment theta in our parametric circular equation\n    if (theta1 < theta2)\n        theta1 += Math.PI * 2;\n    var dTheta = (theta1 - theta2) / line.resolution;\n    debug('theta1 is %o, theta2 is %o', theta1, theta2);\n    // Compute the segments based on the information we have gathered by applying it to a circular\n    // Parametric equation\n    var segments = [];\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 - (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 - (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    // Cache the segments if specified by the curved line\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    debug('Generated Circular Segments: %o dTheta: %o radius: %o', segments, dTheta, radius);\n    return segments;\n}\nfunction makeCircularCCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n    var minRadius = point_1.Point.getDistance(midPoint, line.start);\n    if (radius < minRadius) {\n        radius = point_1.Point.getDistance(midPoint, line.start);\n    }\n    var perpendicular = straightLine.perpendicular;\n    var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n    var circleCenter = {\n        x: -perpendicular.x * distance + midPoint.x,\n        y: -perpendicular.y * distance + midPoint.y,\n    };\n    // Store the circle center as an extra control point in case the value is needed\n    // (which it often is)\n    line.controlPoints[1] = circleCenter;\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    if (theta2 < theta1)\n        theta2 += Math.PI * 2;\n    var dTheta = (theta2 - theta1) / line.resolution;\n    var segments = [];\n    // CCW, from end to start\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 + (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 + (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    if (line.cachedSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that is straight, thus only 1 segments is needed\n * and will be generated.\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeStraightSegments(line) {\n    return [line.start, line.end];\n}\n/** A quick lookup for a proper segment creating method for a curved line  */\nvar pickSegmentMethod = (_a = {},\n    _a[CurveType.Bezier] = [\n        null,\n        makeBezier2Segments,\n        makeBezier3Segments,\n    ],\n    _a[CurveType.CircularCW] = [\n        null,\n        makeCircularCWSegments,\n        makeCircularCWSegments,\n    ],\n    _a[CurveType.CircularCCW] = [\n        null,\n        makeCircularCCWSegments,\n        makeCircularCCWSegments,\n    ],\n    _a[CurveType.Straight] = [\n        makeStraightSegments,\n    ],\n    _a);\n/** A quick lookup for a proper distance calculating method for a curved line  */\nvar pickDistanceMethod = (_b = {},\n    _b[CurveType.Bezier] = bezierDistance,\n    _b[CurveType.CircularCW] = circularDistance,\n    _b[CurveType.CircularCCW] = circularDistance,\n    _b[CurveType.Straight] = straightDistance,\n    _b);\n/**\n * Defines an object which illustrates a curved line. Curved lines can be formed in many\n * ways but most often from two end points and some provided control points.\n *\n * @export\n * @class CurvedLine\n * @extends {Bounds<T>}\n * @template T An associated data type with this object. Use <never> if no data type is ever associated\n */\nvar CurvedLine = (function (_super) {\n    __extends(CurvedLine, _super);\n    /**\n     * Generates a primitive that describes a curved line, which is defined by the lines end points, type, and control points\n     *\n     * @param {ICurvedLineOptions} options The configuration options of this curved line\n     */\n    function CurvedLine(options) {\n        var _this = this;\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        _this = _super.call(this, minX, maxX, maxY, minY) || this;\n        // Apply the relevant properties to the curve\n        _this.cachesSegments = options.cacheSegments || false;\n        _this.type = options.type;\n        _this.resolution = options.resolution || 20;\n        // Set the metrics for this curved line\n        _this.setPoints(options.start, options.end, options.controlPoints);\n        // Set the method that will be used for calculating distance from a point\n        _this.distanceMethod = pickDistanceMethod[options.type];\n        return _this;\n    }\n    Object.defineProperty(CurvedLine.prototype, \"values\", {\n        get: function () {\n            return {\n                controlPoints: this.controlPoints,\n                end: this.end,\n                start: this.start,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the nearest distance from the provided point to this curved line\n     *\n     * @param {IPoint} point The point to test the distance from\n     *\n     * @returns {number} The calculated nearest distance from this curve to the point\n     */\n    CurvedLine.prototype.distanceTo = function (point) {\n        return this.distanceMethod(this, point);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {CurvedLine<any>[]} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    CurvedLine.getClosest = function (lines, point) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(point);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This returns the line strip that represents the curve. A line strip is specifically a group of points\n     * that forms line segments by taking the current point as one end and the previous point as the second end\n     * thus, you would start at index 1 and loop to the end to generate all of the lines composing this single\n     * line.\n     *\n     * @return {IPoint[]} All of the points in the line strip\n     */\n    CurvedLine.prototype.getLineStrip = function () {\n        return this.segmentMethod(this);\n    };\n    /**\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     * @param {boolean} preventRebounding If set, this will prevent the bounds from being recalculated\n     */\n    CurvedLine.prototype.setPoints = function (start, end, controlPoints) {\n        // Apply the points\n        this.start = start;\n        this.end = end;\n        if (controlPoints.length === 0)\n            debug('start: %o, end:%o', start, end);\n        // Get the available segment methods for the given type\n        var segmentMethods = pickSegmentMethod[this.type];\n        // If we adjust the control points we need to re-evaluate the type of segment creation method we use\n        if (controlPoints) {\n            this.controlPoints = ramda_1.clone(controlPoints);\n            // Get the number of control points we want to base the curve off of\n            var numControlPoints = controlPoints.length;\n            // If we have more control points than the methods available, then we use the greatest method available to best\n            // Handle as many control points as possible\n            if (numControlPoints > segmentMethods.length) {\n                numControlPoints = segmentMethods.length - 1;\n            }\n            // Set the method that will be used for generating segments\n            this.segmentMethod = segmentMethods[numControlPoints];\n            // Make sure the input wasn't bad\n            if (!this.segmentMethod) {\n                throw new Error('An Invalid number of control points was provided to a curved line. You must have at LEAST 1 control point. Or 0 for a straight line');\n            }\n            if (this.type === CurveType.Bezier) {\n                this.encapsulatePoints(controlPoints);\n            }\n            else if (this.type === CurveType.CircularCCW || this.type === CurveType.CircularCW) {\n                this.encapsulatePoints(this.getLineStrip());\n            }\n        }\n        this.encapsulatePoint(start);\n        this.encapsulatePoint(end);\n        // Invalidate caches if they exist\n        this.cachedSegments = null;\n    };\n    return CurvedLine;\n}(bounds_1.Bounds));\nexports.CurvedLine = CurvedLine;\nvar _a, _b;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\nvar UID = 0;\nvar Circle = (function (_super) {\n    __extends(Circle, _super);\n    /**\n     * Generate a new Circle object\n     *\n     * @param x The center of the circle\n     * @param y The center of the circle\n     * @param r The radius of the circle\n     * @param d A data object to associate with the circle\n     */\n    function Circle(x, y, r, d) {\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        /** a UID of the circle */\n        _this._id = ++UID;\n        /** Radius of the circle */\n        _this._radius = 0;\n        /** X coord of the center of the circle */\n        _this._centerX = 0;\n        /** Y coord of the center of the circle */\n        _this._centerY = 0;\n        _this._centerX = x;\n        _this._centerY = y;\n        _this._radius = r;\n        _this.d = d;\n        _this.updateBounds();\n        return _this;\n    }\n    Object.defineProperty(Circle.prototype, \"values\", {\n        get: function () {\n            return {\n                radius: this._radius,\n                x: this._centerX,\n                y: this._centerY,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"radius\", {\n        get: function () {\n            return this._radius;\n        },\n        set: function (val) {\n            this._radius = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerX\", {\n        get: function () {\n            return this._centerX;\n        },\n        set: function (val) {\n            this._centerX = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerY\", {\n        get: function () {\n            return this._centerY;\n        },\n        set: function (val) {\n            this._centerY = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Tests if the specified bounds is inside this circle\n     *\n     * @param b The bounds to test against\n     */\n    Circle.prototype.boundsInside = function (b) {\n        var r2 = this._radius * this._radius;\n        var dx = b.x - this._centerX;\n        var dy = b.y - this._centerY;\n        var dy2 = dy * dy;\n        var dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.right - this._centerX;\n        dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dy = b.bottom - this._centerY;\n        dy2 = dy * dy;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.x - this._centerX;\n        dx2 = dx * dx;\n        return (dx2 + dy2) < r2;\n    };\n    /**\n     * Calculates the distance to a provided point\n     *\n     * @param {IPoint} p The point to calculate the distance of the middle of the\n     *                   circle to\n     * @param {boolean} notSquared Flag true to prevent the Math.sqrt operation, leaving\n     *                             the result as distance^2\n     *\n     * @return {number} The distance from mid circle to the point\n     */\n    Circle.prototype.distanceTo = function (p, notSquared) {\n        var dx = this._centerX - p.x;\n        var dy = this._centerY - p.y;\n        if (notSquared) {\n            return dx * dx + dy * dy;\n        }\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n    /**\n     * Retrieves the closest circle to a provided point\n     *\n     * @param {Array} circles The circles to see who is the nearest\n     * @param {IPoint} p The point to compare the circles against for nearness\n     *\n     * @return {Circle} The nearest circle\n     */\n    Circle.getClosest = function (circles, p) {\n        var closestCircle;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        circles.forEach(function (circle) {\n            distance = circle.distanceTo(p, true);\n            if (distance < closestDistance) {\n                closestCircle = circle;\n                closestDistance = distance;\n            }\n        });\n        return closestCircle;\n    };\n    /**\n     * Tests if this circle is colliding with the specified circle\n     *\n     * @param c The circle to test against\n     *\n     * @return {boolean} True if colliding\n     */\n    Circle.prototype.hitCircle = function (c) {\n        var totalDistance = c._radius + this._radius;\n        totalDistance *= totalDistance;\n        return this.distanceTo({ x: c._centerX, y: c._centerY }, true) < totalDistance;\n    };\n    /**\n     * @override\n     * This makes it so the test of a point tests based on a Circle shape\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.hitPoint = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * If there are multiple metrics to update for the circle, this is the most\n     * efficient way to do that as it will update it's bounds only once.\n     *\n     * @param x\n     * @param y\n     * @param r\n     */\n    Circle.prototype.position = function (x, y, r) {\n        this._centerX = x;\n        this._centerY = y;\n        this._radius = r;\n        this.updateBounds();\n    };\n    /**\n     * @override\n     * Tests if a point is inside the circle\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.pointInside = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * When the circle gains different circle metrics, it's Bounds must adjust\n     * accordingly, which is what this method recalculates.\n     */\n    Circle.prototype.updateBounds = function () {\n        var radius = this._radius;\n        this.x = this._centerX - radius;\n        this.y = this._centerY - radius;\n        this.height = radius * 2;\n        this.width = radius * 2;\n    };\n    /**\n     * Pretty print the metrics of this circle\n     */\n    Circle.prototype.toString = function () {\n        return \"[Circle {x: \" + this._centerX + \", y: \" + this._centerY + \", r: \" + this._radius + \"}]\";\n    };\n    return Circle;\n}(bounds_1.Bounds));\nexports.Circle = Circle;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar line_1 = __webpack_require__(5);\n/**\n * Defines a line that can be drawn\n */\nvar LineShape = (function (_super) {\n    __extends(LineShape, _super);\n    /**\n     * Generate a new line that can be drawn\n     */\n    function LineShape(p1, p2, d, r, g, b, a, r2, g2, b2, a2, thickness) {\n        var _this = _super.call(this, p1, p2) || this;\n        // Color 1\n        _this.a = 0;\n        _this.b = 0;\n        _this.g = 0;\n        _this.r = 1;\n        // Color 2 ?\n        _this.a2 = 0;\n        _this.b2 = 0;\n        _this.g2 = 0;\n        _this.r2 = 1;\n        // Other properties\n        _this.cull = true;\n        _this.thickness = 1;\n        Object.assign(_this, {\n            a: a,\n            a2: a2,\n            b: b,\n            b2: b2,\n            d: d,\n            g: g,\n            g2: g2,\n            r: r,\n            r2: r2,\n        });\n        if (thickness !== undefined) {\n            _this.thickness = thickness;\n        }\n        return _this;\n    }\n    /**\n     * Clones this instance of the line shape and creates a new instance of a line shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this line shape\n     */\n    LineShape.prototype.clone = function (newProperties) {\n        return Object.assign(new LineShape(this.p1, this.p2, this.d, this.r, this.g, this.b, this.a, this.r2, this.g2, this.b2, this.a2), this, newProperties);\n    };\n    return LineShape;\n}(line_1.Line));\nexports.LineShape = LineShape;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar ShapeBufferCache = (function () {\n    function ShapeBufferCache() {\n        this.buffer = [];\n        this.bustCache = true;\n    }\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    ShapeBufferCache.prototype.generate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this.bustCache) {\n            this.buildCache.apply(this, args);\n            this.bustCache = false;\n        }\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    ShapeBufferCache.prototype.buildCache = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Get the buffer the cache has generated\n     */\n    ShapeBufferCache.prototype.getBuffer = function () {\n        return this.buffer;\n    };\n    return ShapeBufferCache;\n}());\nexports.ShapeBufferCache = ShapeBufferCache;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(26));\n__export(__webpack_require__(32));\n__export(__webpack_require__(39));\n__export(__webpack_require__(47));\n__export(__webpack_require__(48));\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = __webpack_require__(7);\nvar React = __webpack_require__(27);\nvar three_1 = __webpack_require__(0);\nvar atlas_manager_1 = __webpack_require__(13);\nvar atlas_texture_1 = __webpack_require__(9);\nvar bounds_1 = __webpack_require__(1);\nvar frame_info_1 = __webpack_require__(10);\nvar mouse_1 = __webpack_require__(18);\nvar quad_tree_1 = __webpack_require__(19);\nvar debug = __webpack_require__(2)('webgl-surface:GPU');\nvar debugCam = __webpack_require__(2)('webgl-surface:Camera');\nvar debugLabels = __webpack_require__(2)('webgl-surface:Labels');\nvar debugColors = __webpack_require__(2)('webgl-surface:Colors');\n/**\n * This enum names the base methods that are passed into the applyPropsMethods\n * method. This allows subclasses to easily pick the property setting methods they need\n * from the base\n */\nvar BaseApplyPropsMethods;\n(function (BaseApplyPropsMethods) {\n    /** Initializes any context that needs to be set up before the props are set */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"INITIALIZE\"] = 0] = \"INITIALIZE\";\n    /** Moment when any buffer changes should be applied */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"BUFFERCHANGES\"] = 1] = \"BUFFERCHANGES\";\n    /** Initializes camera properties to facilitate smoothe start up */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"CAMERA\"] = 2] = \"CAMERA\";\n    /** Generates the labels as images within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"LABELS\"] = 3] = \"LABELS\";\n    /** Generates the colors within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"COLORS\"] = 4] = \"COLORS\";\n})(BaseApplyPropsMethods = exports.BaseApplyPropsMethods || (exports.BaseApplyPropsMethods = {}));\n/**\n * This enum names the base methods that are passed into the animatedMethods\n * method. This allows subsclasses to easily pick the animated methods they need\n * from the base\n */\nvar BaseAnimatedMethods;\n(function (BaseAnimatedMethods) {\n    /** Sets up the base context needed to execute most methods */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"CONTEXT\"] = 0] = \"CONTEXT\";\n    /** Sets up the inertia method for inertial panning */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"INERTIA\"] = 1] = \"INERTIA\";\n    /** Animates the postion of the camera to a destination */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"POSITION\"] = 2] = \"POSITION\";\n    /** Zooms the camera based on a point of focus */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"ZOOM\"] = 3] = \"ZOOM\";\n})(BaseAnimatedMethods = exports.BaseAnimatedMethods || (exports.BaseAnimatedMethods = {}));\nfunction isAnimatedWithOptions(value) {\n    if (value.options) {\n        return true;\n    }\n    return false;\n}\nfunction isAnimated(value) {\n    if (!value.options) {\n        return true;\n    }\n    return false;\n}\n/** This is the smallest increment the zoom can make. Anything less and nothing will happen */\nvar MIN_ZOOM_INCREMENT = 0.001;\nvar BYTE_MAX = 0xFF;\nvar BACKGROUND_COLOR = new three_1.Color().setRGB(38 / BYTE_MAX, 50 / BYTE_MAX, 78 / BYTE_MAX);\n// --[ CONSTANTS ]-------------------------------------------\n// Make a container vector for performing operations within\nvar vector = new three_1.Vector3();\n// --[ SHADERS ]-------------------------------------------\n/**\n * Equivalent of Math.sign, but faster, and works in all browsers\n *\n * @param {number} value The number to determine the sign\n *\n * @return {number} Returns zero if a sign can not be determined, -1 for a negative, 1 for a positive\n */\nfunction sign(value) {\n    if (!value) {\n        return 0;\n    }\n    if (value > 0) {\n        return 1;\n    }\n    if (value < 0) {\n        return -1;\n    }\n    return 0;\n}\nfunction isWebGLSupported() {\n    try {\n        var canvas = document.createElement('canvas');\n        return !!window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n    }\n    catch (e) {\n        return false;\n    }\n}\nvar WEBGL_SUPPORTED = isWebGLSupported();\n/**\n * The base component for the communications view\n */\nvar WebGLSurface = (function (_super) {\n    __extends(WebGLSurface, _super);\n    function WebGLSurface() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** This is the atlas manager for managing images and labels rendered as textures */\n        _this.atlasManager = new atlas_manager_1.AtlasManager(2048, 2048);\n        /** Tracks the names of the atlas' generated */\n        _this.atlasNames = {\n            colors: 'colors',\n            labels: 'labels',\n        };\n        /**\n         * List of methods that execute within the animation loop. Makes adding and removing these methods\n         * simpler to manage, as well as gives a clear and optimized way of overriding existing methods\n         * or reordering their execution\n         */\n        _this.animatedMethodList = [];\n        /**\n         * If this is set to true during an animated method's lifecycle, then all subsequent animated methods\n         * will not be executed for the current frame. Upon reaching the end of the frame, the break will reset\n         * and the animated methods will attempt executing again\n         */\n        _this.animatedMethodBreak = false;\n        /** Used to aid in mouse interactions */\n        _this.distance = 0;\n        /**\n         * The camera that 'looks' at our world and gives us the ability to convert\n         * screen coordinates to world coordinates, and vice versa\n         */\n        _this.camera = null;\n        /**\n         * While this number is positive it will be decremented every frame.\n         * While positive, mouse interactions will not occur. This utilizes frame ticks\n         * as SOME values and numbers settle per frame, not necessarily within timelapses.\n         * More often than not, there will only be a need for 1-2 frames of mouse disable to\n         * allow the camera to be positioned in a correct location before screen to world projections\n         * start taking place.\n         */\n        _this.disableMouseInteraction = 0;\n        _this.sizeCamera = null;\n        /** Keep track of the current zoom so it can be set in requestAnimationFrame */\n        _this.currentZoom = 1;\n        /** Horizontal destination the camera will pan to */\n        _this.destinationX = 0;\n        /** Vertical position the camera will pan to */\n        _this.destinationY = 0;\n        /** The destination zoom level the camera used during panning */\n        _this.destinationZoom = 1;\n        /** Is the camera currently in a panning state */\n        _this.isPanning = false;\n        /** Last known screen position of the mouse */\n        _this.lastMousePosition = { x: 0, y: 0 };\n        /** List of methods to execute when applying props */\n        _this.propsMethodList = [];\n        /** Inertial values for drag panning */\n        _this.inertia = null;\n        _this.inertiaBuild = 1.5;\n        _this.inertiaDecay = .9;\n        _this.inertiaMax = 100;\n        /**\n         * All data is put into this quad tree so we can query spatial regions for\n         * items\n         */\n        _this.quadTree = null;\n        /**\n         * True if the shift key is currently being held\n         *\n         * Panning is affected by whether or not the shift key is being held down, but\n         * I don't know how yet.\n         */\n        _this.shiftIsDown = false;\n        _this.stop = false;\n        /** The current rendered position and zoom */\n        _this.currentX = 0;\n        _this.currentY = 0;\n        _this.targetZoom = 1;\n        /** The (world) position the focus will zoom in and out of */\n        _this.previousZoomToFit = 0;\n        _this.zoomTargetX = 0;\n        _this.zoomTargetY = 0;\n        /** When this is set, the draw loop continues to run. Used by the draw loop to complete animations */\n        _this.animating = false;\n        _this.labels = [];\n        _this.labelsReady = false;\n        /**\n         * This is the latest labels loading identifier, used to determine if the labels\n         * last loaded matches the labels currently needing to be rendered.\n         */\n        _this.labelsCurrentLoadedId = 0;\n        _this.labelsLoadId = 0;\n        /** When this is set to true, the atlas with the colors is now ready to be referenced */\n        _this.colors = [];\n        _this.colorsReady = false;\n        /** Holds the items currently hovered over */\n        _this.currentHoverItems = [];\n        /** Flag for detecting whether or not webgl is supported at all */\n        /**\n         * This is the update loop that operates at the requestAnimationFrame speed.\n         * This updates the cameras current position and causes changes over time for\n         * any property that has a start and a destination.\n         */\n        _this.animate = function () {\n            if (_this.stop) {\n                return;\n            }\n            frame_info_1.FrameInfo.lastFrameTime = Date.now();\n            frame_info_1.FrameInfo.framesPlayed.set(_this, (frame_info_1.FrameInfo.framesPlayed.get(_this) || 0) + 1);\n            requestAnimationFrame(function () { return _this.animate(); });\n            var response;\n            var doDraw = false;\n            var didBreak = _this.animatedMethodList.some(function (method) {\n                if (isAnimatedWithOptions(method)) {\n                    if (method.options.labelsReady && method.options.colorsReady) {\n                        if (_this.labelsReady && _this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.labelsReady) {\n                        if (_this.labelsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.colorsReady) {\n                        if (_this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                }\n                else if (isAnimated(method)) {\n                    response = method();\n                }\n                // Update our draw status based on response\n                if (!doDraw) {\n                    doDraw = response.doDraw;\n                }\n                // Stop the system if needed\n                if (response.stop) {\n                    _this.stop = true;\n                }\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            // We prevent any animation loop execution if we did break\n            if (didBreak) {\n                return;\n            }\n            // Make sure all camera related uniforms are up to date\n            _this.updateCameraUniforms();\n            // Handle the deactivation period of mouse interactions by decrementing it\n            // If it's positive\n            if (_this.disableMouseInteraction > 0) {\n                _this.disableMouseInteraction--;\n            }\n            if (doDraw || _this.forceDraw) {\n                _this.forceDraw = false;\n                _this.emitViewport();\n                _this.draw();\n            }\n        };\n        /**\n         * Applies new props injected into this component.\n         *\n         * Applying new props does not entail that a re-render will happen so we\n         * handle application of props as a separate concept. Here we:\n         *\n         * set up zoom targetting and apply quested zoom levels\n         *\n         * Create our quad tree and associate properties to objects if a new dataset\n         * is provided\n         *\n         * Analyze our dataset for interesting and useful metrics such as max and mins\n         * to aid in visualization normalization\n         *\n         * @param {T} props The new properties for this component\n         */\n        _this.applyProps = function (props) {\n            debug('Applying props');\n            var response;\n            _this.propsMethodList.some(function (method) {\n                response = method(props);\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            debugCam('current cam', _this.currentX, _this.currentY, _this.destinationX, _this.destinationY);\n            debugCam('Zoom Target: [%o, %o]', _this.zoomTargetX, _this.zoomTargetY);\n            debugCam('Last Mouse: [%o, %o]', _this.lastMousePosition.x, _this.lastMousePosition.y);\n        };\n        /**\n         * This is the draw method executed from the animation loop. Everytime, this is\n         * called, the webgl surface will be redrawn.\n         */\n        _this.draw = function () {\n            // Draw the 3D scene\n            _this.renderer.render(_this.scene, _this.camera);\n        };\n        /**\n         * This initializes the surface and calls for sub class classes to initialize\n         * their buffers\n         *\n         * @param {HTMLElement} el The DOM element this component is contained in\n         * @param {number} w The width of the rendering\n         * @param {number} h The height of the rendering\n         */\n        _this.init = function (el, w, h) {\n            if (!el || _this.scene) {\n                return;\n            }\n            _this.renderEl = el;\n            if (w === 0 || h === 0) {\n                return;\n            }\n            debug('Initializing GPU objects el: %o width: %o height: %o', el, w, h);\n            // Set up a ctx for our render space\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2.0,\n                width: w,\n                widthHalf: w / 2.0,\n            };\n            // Set up the camera now that the ctx is set up\n            _this.initCamera();\n            // Create a scene so we can add our buffer objects to it\n            // We also add the scene to the window to make threejs tools available\n            window.scene = _this.scene = new three_1.Scene();\n            // Fire our hook for starting up our specific buffer implementation\n            _this.initBuffers();\n            // FINALIZE SET UP\n            // Generate the renderer along with it's properties\n            _this.renderer = new three_1.WebGLRenderer({\n                antialias: true,\n            });\n            debug('Window Pixel Ratio: %o', window.devicePixelRatio);\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            _this.renderer.setClearColor(BACKGROUND_COLOR);\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            // Set up DOM interaction with the renderer\n            var container = el;\n            container.appendChild(_this.renderer.domElement);\n        };\n        /**\n         * Initializes the camera and any contexts associated with it\n         */\n        _this.initCamera = function () {\n            debug('Initializing Camera');\n            // INITIALIZE THE CAMERA\n            var h = _this.ctx.height;\n            var viewSize = h;\n            var w = _this.ctx.width;\n            var aspectRatio = w / h;\n            var viewport = {\n                aspectRatio: aspectRatio,\n                bottom: -viewSize / 2,\n                far: 10000000,\n                left: (-aspectRatio * viewSize) / 2,\n                near: -100,\n                right: (aspectRatio * viewSize) / 2,\n                top: viewSize / 2,\n                viewSize: viewSize,\n            };\n            _this.camera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.sizeCamera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.camera.position.z = 300;\n            _this.sizeCamera.position.set(0, 0, 300);\n        };\n        /**\n         * This is executed when our rendering surface (the canvas) changes in size in any\n         * way. It will make sure our renderer matches the context to prevent scaling\n         * and other deformations.\n         */\n        _this.resizeContext = function () {\n            var w = _this.props.width;\n            var h = _this.props.height;\n            // See if a renderer even exists yet\n            if (!_this.renderer) {\n                return false;\n            }\n            var renderSize = _this.renderer.getSize();\n            // Check if the resize is needed\n            if (renderSize.width === w && renderSize.height === h) {\n                return false;\n            }\n            debug('RENDERER RESIZE');\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2,\n                width: w,\n                widthHalf: w / 2,\n            };\n            var zoom = _this.camera.zoom;\n            var position = _this.camera.position.clone();\n            _this.initCamera();\n            _this.camera.zoom = zoom;\n            _this.camera.position.set(position.x, position.y, position.z);\n            _this.camera.updateProjectionMatrix();\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            _this.renderer.setClearColor(new three_1.Color().setRGB(38 / 255, 50 / 255, 78 / 255));\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            return true;\n        };\n        /**\n         * This method handles emitting the viewport and the current visible elements\n         * to the subclass that needs detailed information regarding the viewport.\n         */\n        _this.emitViewport = function () {\n            var tl = _this.screenToWorld(0, 0);\n            var br = _this.screenToWorld(_this.ctx.width, _this.ctx.height);\n            _this.camera.updateMatrixWorld(true);\n            var visible = _this.quadTree.query(new bounds_1.Bounds(tl.x, br.x, tl.y, br.y));\n            _this.onViewport(visible, _this.projection, _this.ctx);\n        };\n        /**\n         * Handles mouse interactions when the mouse is pressed on the canvas. This\n         * engages panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseDown = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = true;\n            _this.distance = 0;\n            _this.onMouseDown();\n        };\n        /**\n         * Handles mouse interactions when the mouse is release or left the canvas. This\n         * stops panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseOut = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            _this.distance = 0;\n            _this.onMouseOut();\n        };\n        /**\n         * Handles mouse interactions when the mouse is released on the canvas. This\n         * stops panning and engages click events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseUp = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            // Handle mouse interaction\n            if (_this.distance < 5) {\n                var hitInside = [];\n                // Circle Interaction\n                var hitItems = _this.quadTree.query(world);\n                for (var _i = 0, hitItems_1 = hitItems; _i < hitItems_1.length; _i++) {\n                    var item = hitItems_1[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                    }\n                }\n                // Tell the listener that the user clicked on some items\n                if (hitInside.length) {\n                    _this.onMouseUp(e, hitInside, mouse, world, _this.projection);\n                }\n                else {\n                    _this.onMouseUp(e, null, mouse, world, _this.projection);\n                }\n            }\n        };\n        /**\n         * Handles mouse interactions when the mouse is moving on the canvas. This\n         * causes panning and hover events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseMove = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            var onMouse = _this.props.onMouse;\n            var zoom = _this.props.zoom;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            _this.distance++;\n            // Handle panning\n            if (_this.isPanning) {\n                var xDistance = (mouse.x - _this.lastMousePosition.x) / _this.targetZoom;\n                var yDistance = -(mouse.y - _this.lastMousePosition.y) / _this.targetZoom;\n                // Execute the hook to allow subclasses\n                var pan = _this.willPan(xDistance, yDistance);\n                xDistance = pan.x;\n                yDistance = pan.y;\n                _this.destinationX -= xDistance;\n                _this.destinationY -= yDistance;\n                _this.inertia = _this.inertia || { x: 0, y: 0 };\n                if (sign(xDistance) !== sign(_this.inertia.x)) {\n                    _this.inertia.x = 0;\n                }\n                if (sign(yDistance) !== sign(_this.inertia.y)) {\n                    _this.inertia.y = 0;\n                }\n                _this.inertia.x = xDistance * _this.inertiaBuild;\n                _this.inertia.y = yDistance * _this.inertiaBuild;\n                var maxInertia = _this.inertiaMax / zoom;\n                var mag = Math.sqrt(_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y);\n                // Make sure the magnitude of the inertia is less than our max allowed\n                if (mag > maxInertia) {\n                    // Since it's greater, let's confine the inertia's magnitude to the max magnitude\n                    // By normalizing the intertia vector and multilying it by the max\n                    _this.inertia.x = (_this.inertia.x / mag) * maxInertia;\n                    _this.inertia.y = (_this.inertia.y / mag) * maxInertia;\n                }\n            }\n            if (_this.quadTree && !_this.isPanning) {\n                // Empty the last hovered items to populate a new list\n                var currentHoverItems = [];\n                // Handle mouse interaction with items\n                // Interaction with circles\n                var hitItems = _this.quadTree.query(world);\n                var hitInside = [];\n                for (var _i = 0, hitItems_2 = hitItems; _i < hitItems_2.length; _i++) {\n                    var item = hitItems_2[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                        currentHoverItems.push(item);\n                    }\n                }\n                // Inform of all items hit or hovered\n                _this.onMouseHover(hitInside, mouse, world, _this.projection);\n                // Diff the currently hovered items with the old ones to see what is\n                // No longer hit\n                var left = [];\n                for (var _a = 0, _b = _this.currentHoverItems; _a < _b.length; _a++) {\n                    var item = _b[_a];\n                    if (currentHoverItems.indexOf(item) < 0) {\n                        left.push(item);\n                    }\n                }\n                // Inform of all items no longer hovered\n                _this.onMouseLeave(left, mouse, world, _this.projection);\n                _this.currentHoverItems = currentHoverItems;\n            }\n            if (onMouse) {\n                _this.onMouse(mouse, world, _this.isPanning);\n            }\n            _this.lastMousePosition = mouse;\n        };\n        /**\n         * We make the ref application be a declared function so react does not find the need to execute the\n         * application numerous times for a detected changed method\n         *\n         * @param {HTMLElement} n This is the canvas element from the dom\n         */\n        _this.applyRef = function (n) {\n            _this.init(n, _this.props.width, _this.props.height);\n            _this.applyProps(_this.props);\n        };\n        return _this;\n    }\n    /**\n     * This is a hook so subclasses can contribute animated methods to the animation loop and organize the base methods\n     * as desired.\n     *\n     * @param {AnimatedMethodLookup} baseAnimatedMethods The base animated methods referenceable by name\n     * @param {AnimatedMethod[]} orderedBaseAnimatedMethods The base animated methods in their default order for ease of use\n     *\n     * @return {AnimatedMethods[]} The list of animated methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.animatedMethods = function (baseAnimatedMethods, orderedBaseAnimatedMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBaseAnimatedMethods;\n    };\n    /**\n     * This generates the base animated methods lookup.\n     * We do not make these methods a part of the class as this is the base class\n     * We want the start up methods to be inconsequential to sub classes, thus allowing\n     * us to override, sort, or replace the initial methods and have the method get garbage\n     * collected and no longer a part of the object. It is recommended to make the sub classes\n     * actually point to class methods for better clarity\n     *\n     * @return {ANimatedMethodLookup} The base animated methods in a lookup\n     */\n    WebGLSurface.prototype.animatedMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            // Context changes and early checks\n            _a[BaseAnimatedMethods.CONTEXT] = function () {\n                var response = {\n                    break: false,\n                    doDraw: false,\n                };\n                if (_this.resizeContext()) {\n                    response.doDraw = true;\n                }\n                // Quadtree MUST be present to do proper computations\n                if (!_this.quadTree) {\n                    response.break = true;\n                }\n                return response;\n            },\n            // Apply inertia\n            _a[BaseAnimatedMethods.INERTIA] = function () {\n                if (!_this.isPanning) {\n                    if (_this.inertia) {\n                        // Disabled inertia for now\n                        // This.destinationX -= this.inertia.x\n                        // This.destinationY -= this.inertia.y\n                        _this.inertia.x *= _this.inertiaDecay;\n                        _this.inertia.y *= _this.inertiaDecay;\n                        if (_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y < 1) {\n                            _this.inertia = null;\n                        }\n                    }\n                }\n                // A non response\n                return {\n                    doDraw: false,\n                };\n            },\n            // Apply position\n            _a[BaseAnimatedMethods.POSITION] = function () {\n                // If values are transitioned rather than immediately applied, this is\n                // The value you would want the minimum change to be before cutting off\n                // The transition\n                // Const minAdjust = 1 / this.props.zoom\n                // If there is change in X apply the new position to the old\n                // This is where animated values were originally placed and can be placed\n                // Again if a transition is desired\n                var response = {\n                    doDraw: (_this.currentX !== _this.destinationX) || (_this.currentY !== _this.destinationY),\n                };\n                _this.currentX = _this.destinationX;\n                _this.currentY = _this.destinationY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            // Apply zooming\n            _a[BaseAnimatedMethods.ZOOM] = function () {\n                var response = {\n                    doDraw: false,\n                };\n                // Apply Zoom\n                // Const zoomToFitH = this.ctx.width / Math.max(this.quadTree.bounds.width, this.props.viewport.width);\n                // Const zoomToFitV = this.ctx.height / Math.max(this.quadTree.bounds.height, this.props.viewport.height);\n                // Const zoomToFit = Math.min(zoomToFitH, zoomToFitV);\n                var zoomToFit = 1;\n                var destZoom = _this.destinationZoom * zoomToFit;\n                var dZoom = Math.abs(destZoom - _this.targetZoom);\n                var minDZoom = MIN_ZOOM_INCREMENT;\n                var zoomRate = 3;\n                if (dZoom > minDZoom) {\n                    _this.targetZoom = _this.targetZoom + ((destZoom - _this.targetZoom) / zoomRate);\n                    response.doDraw = true;\n                }\n                else if (dZoom !== 0) {\n                    _this.targetZoom = destZoom;\n                    response.doDraw = true;\n                }\n                // Get the zoom target metrics before zooming\n                var zoomTargetX = _this.zoomTargetX;\n                var zoomTargetY = _this.zoomTargetY;\n                var screenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Update the camera zoom level\n                _this.zoomCamera(_this.targetZoom);\n                // After we have zoomed we see how much our target location moved on screen\n                var newScreenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Now we move our screen by the moved delta to keep it exactly where it was before hand\n                var zoomDX = -(newScreenZoomTarget.x - screenZoomTarget.x) / _this.targetZoom;\n                var zoomDY = (newScreenZoomTarget.y - screenZoomTarget.y) / _this.targetZoom;\n                _this.currentX -= zoomDX;\n                _this.currentY -= zoomDY;\n                _this.destinationX -= zoomDX;\n                _this.destinationY -= zoomDY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for subclasses to be able to apply buffer changes that rely\n     * on colors rendered into the atlas after the system has prepped the colors for render.\n     */\n    WebGLSurface.prototype.applyColorBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * This is a hook for subclasses to be able to apply label buffer changes after the system has\n     * prepped the labels for render.\n     */\n    WebGLSurface.prototype.applyLabelBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * @override\n     * This is a hook so subclasses can contribute property application methods to the applyProps process and organize the base methods\n     * as desired.\n     *\n     * @param {ApplyPropsMethodLookup<T>} basePropsMethods The base props methods referenceable by name\n     * @param {ApplyPropsMethod<T>[]} orderedBasePropsMethods The base animated methods in their default order for ease of use\n     *\n     * @return {ApplyPropsMethod<T>[]} The list of property application methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.applyPropsMethods = function (basePropsMethods, orderedBasePropsMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBasePropsMethods;\n    };\n    /**\n     * This is a hook so subclasses can contribute methods to the applying props procedure and organize the base methods\n     * as desired.\n     *\n     * @return {ApplyPropsMethodLookup<T>} The base apply props method that are indexed for ease of reference\n     */\n    WebGLSurface.prototype.applyPropsMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            _a[BaseApplyPropsMethods.INITIALIZE] = function (props) {\n                var height = props.height, width = props.width;\n                _this.init(_this.renderEl, width, height);\n                if (!_this.renderEl || width === 0 || height === 0) {\n                    return {\n                        break: true,\n                    };\n                }\n                // Get the target for zooming\n                if (_this.camera) {\n                    var world = _this.screenToWorld(_this.lastMousePosition.x, _this.lastMousePosition.y);\n                    _this.zoomTargetX = world.x;\n                    _this.zoomTargetY = world.y;\n                }\n                debug('props', props);\n                return {};\n            },\n            _a[BaseApplyPropsMethods.LABELS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.labels && props.labels !== _this.labels) {\n                    debugLabels('Labels are being comitted to an Atlas %o', props.labels);\n                    // Flag the labels as incapable of rendering\n                    _this.labelsReady = false;\n                    _this.labelsLoadId++;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.labels = props.labels;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.labels)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.labels);\n                    }\n                    var textures = props.labels.map(function (label) { return new atlas_texture_1.AtlasTexture(null, label); });\n                    debugLabels('Creating the atlas for labels based on these textures %o', textures);\n                    _this.atlasManager.createAtlas(_this.atlasNames.labels, textures)\n                        .then(function () {\n                        debugLabels('Labels rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.labels));\n                        _this.forceDraw = true;\n                        _this.labelsCurrentLoadedId++;\n                        // If we are done loading AND we match up with the current load id, then labels\n                        // For the latest labels update are indeed ready for display\n                        if (_this.labelsCurrentLoadedId === _this.labelsLoadId) {\n                            _this.labelsReady = true;\n                        }\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.COLORS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.colors && props.colors !== _this.colors) {\n                    debugColors('Colors are being comitted to an Atlas %o', props.colors);\n                    // Flag the labels as incapable of rendering\n                    _this.colorsReady = false;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.colors = props.colors;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.colors)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.colors);\n                    }\n                    debugColors('Creating the atlas for colors based on these colors %o', _this.colors);\n                    _this.atlasManager.createAtlas(_this.atlasNames.colors, null, _this.colors)\n                        .then(function () {\n                        debugColors('Colors rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.colors));\n                        _this.forceDraw = true;\n                        _this.colorsReady = true;\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.BUFFERCHANGES] = function (props) {\n                // Call the hook to allow sub componentry to have a place to update it's buffers\n                _this.applyBufferChanges(props);\n                // We call the label buffering when the labels are ready to render.\n                // Labels now utilize the color atlas as well, thus requiring colors\n                // To be loaded\n                if (_this.labelsReady && _this.colorsReady) {\n                    debugLabels('labels changed %o', props);\n                    _this.applyLabelBufferChanges(props);\n                }\n                // For resources that only need the color atlas to be ready\n                if (_this.colorsReady) {\n                    _this.applyColorBufferChanges(props);\n                }\n                return {};\n            },\n            _a[BaseApplyPropsMethods.CAMERA] = function (props) {\n                _this.destinationZoom = props.zoom;\n                // On initialization this should start with some base camera metrics\n                if (props.viewport && props.viewport !== _this.appliedViewport && _this.quadTree) {\n                    debugCam('Applying viewport to camera: %o World Space Bounds: %o Screen context: %o', props.viewport, _this.quadTree.bounds, { width: props.width, height: props.height });\n                    // Position the camera over the mid of the specified viewport\n                    var mid = props.viewport.mid;\n                    _this.currentX = _this.destinationX = mid.x;\n                    _this.currentY = _this.destinationY = mid.y;\n                    // Calculate the zoom level when the input zoom is at 1\n                    var zoomAtOne = 1;\n                    // Calculate the zoom needed for the viewport\n                    var zoomToFitViewH = props.width / props.viewport.width;\n                    var zoomToFitViewV = props.height / props.viewport.height;\n                    var zoomToFit = Math.min(zoomToFitViewH, zoomToFitViewV);\n                    // This adjusts the destination zxoom by a tiny amount so the view will redraw\n                    var microAdjustment = 1.001;\n                    // Make our destination zoom a zoom that will fit the dimensions of the viewport\n                    // Relative to the zoom at one level\n                    _this.destinationZoom = zoomToFit / zoomAtOne;\n                    _this.targetZoom = (_this.destinationZoom * zoomAtOne) * microAdjustment;\n                    // Make sure any zooming that happens occurs over the middle of the initial viewport\n                    _this.zoomTargetX = mid.x;\n                    _this.zoomTargetY = mid.y;\n                    // Make sure mouse position doesn't mess with the zooming focus either\n                    _this.lastMousePosition.x = props.width / 2.0;\n                    _this.lastMousePosition.y = props.height / 2.0;\n                    // Apply the values immediately to the camera\n                    _this.positionCamera(_this.currentX, _this.currentY);\n                    _this.zoomCamera(_this.targetZoom);\n                    _this.updateCameraUniforms();\n                    // We request the calculated zoom level so adjustments on the input can be made\n                    if (props.onZoomRequest) {\n                        props.onZoomRequest(_this.destinationZoom);\n                        debugCam('Requesting zoom level', _this.destinationZoom);\n                    }\n                    // Let's disable mouse interactions for a little bit until the camera has settled into place\n                    var framesToDisable = 10;\n                    _this.disableMouseInteraction = framesToDisable;\n                    _this.appliedViewport = props.viewport;\n                    debugCam('init cam', _this.currentX, _this.currentY);\n                }\n                // Ensure we have our quad tree available even if it is empty\n                if (!_this.quadTree) {\n                    _this.quadTree = new quad_tree_1.QuadTree(0, 1, 1, 0);\n                }\n                return {};\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for sub components to have a location to update their buffers\n     *\n     * @param {T} props This is the next set of props that are going to be applied to this component\n     */\n    WebGLSurface.prototype.applyBufferChanges = function (props) {\n        // NOTE: This will be implemented by base classes\n    };\n    /**\n     * @override\n     * Start the update loop and register any interesting listeners\n     */\n    WebGLSurface.prototype.componentDidMount = function () {\n        this.animate();\n    };\n    /**\n     * @override\n     * This will set up any unchanging context as well as establish the set of methods\n     * that are to be used within constructed method loops.\n     */\n    WebGLSurface.prototype.componentWillMount = function () {\n        /** Create our context bound projection methods for handing to processes that may need them */\n        this.projection = {\n            screenSizeToWorld: this.screenSizeToWorld.bind(this),\n            screenToWorld: this.screenToWorld.bind(this),\n            worldSizeToScreen: this.worldSizeToScreen.bind(this),\n            worldToScreen: this.worldToScreen.bind(this),\n        };\n        /** Generate our applying props methods to execute within our applyProps process */\n        var basePropsMethods = this.applyPropsMethodsBase();\n        this.propsMethodList = this.applyPropsMethods(basePropsMethods, [\n            basePropsMethods[BaseApplyPropsMethods.INITIALIZE],\n            basePropsMethods[BaseApplyPropsMethods.LABELS],\n            basePropsMethods[BaseApplyPropsMethods.COLORS],\n            basePropsMethods[BaseApplyPropsMethods.BUFFERCHANGES],\n            basePropsMethods[BaseApplyPropsMethods.CAMERA],\n        ]);\n        /** Generate our animated methods to execute within our animation loop */\n        var baseAnimatedMethods = this.animatedMethodsBase();\n        this.animatedMethodList = this.animatedMethods(baseAnimatedMethods, [\n            baseAnimatedMethods[BaseAnimatedMethods.CONTEXT],\n            baseAnimatedMethods[BaseAnimatedMethods.INERTIA],\n            baseAnimatedMethods[BaseAnimatedMethods.POSITION],\n            baseAnimatedMethods[BaseAnimatedMethods.ZOOM],\n        ]);\n    };\n    /**\n     * @override\n     * Simply applies the new injected props\n     *\n     * @param {T} props The new properties to be applied to this component\n     */\n    WebGLSurface.prototype.componentWillReceiveProps = function (props) {\n        this.applyProps(props);\n    };\n    /**\n     * @override\n     * Release listeners and stop update loop\n     */\n    WebGLSurface.prototype.componentWillUnmount = function () {\n        this.stop = true;\n        if (this.quadTree) {\n            this.quadTree.destroy();\n        }\n        this.quadTree = null;\n        this.camera = null;\n        this.sizeCamera = null;\n        this.ctx = null;\n        this.renderEl = null;\n        this.renderer = null;\n        this.scene = null;\n        this.atlasManager.destroyAtlas(this.atlasNames.colors);\n        this.atlasManager.destroyAtlas(this.atlasNames.labels);\n        frame_info_1.FrameInfo.framesPlayed.delete(this);\n    };\n    /**\n     * This is a hook allowing sub classes to have a place to initialize their buffers\n     * and materials etc.\n     */\n    WebGLSurface.prototype.initBuffers = function () {\n        // NOTE: This is to be implemented by subclasses\n    };\n    /**\n     * Hook for subclasses to when the mouse moves. Provides some information\n     * about mouse location and interaction.\n     *\n     * @param {IPoint} mouse Position of the mouse relative to the canvas\n     * @param {IPoint} world Position of the mouse relative to the world space\n     * @param {boolean} isPanning The panning state of the mouse\n     */\n    WebGLSurface.prototype.onMouse = function (mouse, world, isPanning) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse down events\n     */\n    WebGLSurface.prototype.onMouseDown = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse out events\n     */\n    WebGLSurface.prototype.onMouseOut = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse up events and the items that were interacted with in the process\n     *\n     * @param {React.MouseEvent} e The react synthetic event associated with the action\n     * @param {Bounds[]} hitInside The items the mouse interacted with\n     * @param {IPoint} mouse The location of the mouse on the screen\n     * @param {IPoint} world The location of the mouse projected into the world\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseUp = function (e, hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse hovering over an item included in the quadtree\n     *\n     * @param {Bounds[]} hitInside The items hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseHover = function (hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse leaving an item included in the quadtree\n     *\n     * @param {Bounds[]} left The items no longer hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseLeave = function (left, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to changes in the viewport and currently visible items\n     *\n     * @param {Bounds[]} visible\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     * @param {IScreenContext} ctx\n     */\n    WebGLSurface.prototype.onViewport = function (visible, projection, ctx) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Places the camera at a given location in world space\n     *\n     * @param {number} x The x-coordinate for the camera in world space\n     * @param {number} y The x-coordinate for the camera in world space\n     */\n    WebGLSurface.prototype.positionCamera = function (x, y) {\n        if (this.camera) {\n            this.camera.position.set(Math.floor(x), Math.floor(y), this.camera.position.z);\n        }\n    };\n    /**\n     * Projects a screen coordinate to a world coordinate\n     *\n     * @param {number} x The x coord within the screen to project into the world\n     * @param {number} y The y coord within the screen to project into the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenToWorld = function (x, y, obj) {\n        // Get the coordinates in normalized screen space\n        vector.set((x / this.ctx.width) * 2 - 1, -(y / this.ctx.height) * 2 + 1, 0.0);\n        // Unproject the normalized space to the world. It will project\n        // The vector to a REALLY far away z coordinate, but it does not matter\n        // Since we are utilizing an orthographic camera (no perspective distortion)\n        vector.unproject(this.camera);\n        obj = obj || { x: 0, y: 0 };\n        obj.x = vector.x;\n        obj.y = vector.y;\n        return obj;\n    };\n    /**\n     * Projects a size on the screen to the size represented in the world\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenSizeToWorld = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        obj.height = h / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        return obj;\n    };\n    /**\n     * Projects a world coordinate to the screen\n     *\n     * @param {number} x The x coord in the world to project to the screen\n     * @param {number} y The y coord in the world to project to the screen\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {IPoint} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldToScreen = function (x, y, obj) {\n        // This projects to NORMALIZED screen space (-1, 1) range for x and y\n        vector.set(x, y, 0);\n        vector.project(this.camera);\n        // Use the window dimensions to denormalize the vector\n        obj = ramda_1.merge(obj || {}, {\n            x: (vector.x * this.ctx.widthHalf) + this.ctx.widthHalf,\n            y: -(vector.y * this.ctx.heightHalf) + this.ctx.heightHalf,\n        });\n        return obj;\n    };\n    /**\n     * Projects a size within the world to how it would appear on the screen\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldSizeToScreen = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w * this.sizeCamera.zoom;\n        obj.height = h * this.sizeCamera.zoom;\n        return obj;\n    };\n    /**\n     * Sets the zoom level the camera will view the world with\n     *\n     * @param {number} zoom The zoom level. Must be > 0\n     */\n    WebGLSurface.prototype.zoomCamera = function (zoom) {\n        this.camera.zoom = zoom;\n        this.sizeCamera.zoom = zoom;\n        this.camera.updateProjectionMatrix();\n        this.sizeCamera.updateProjectionMatrix();\n    };\n    /**\n     * This is a hook allowing a sub class to update uniforms when the camera is changed in\n     * any way\n     */\n    WebGLSurface.prototype.updateCameraUniforms = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * @override\n     * Only re-render if the dimensions of the component have changed. All other\n     * internal render updates are handled internally\n     *\n     * @param {T} nextProps The next properties injected\n     */\n    WebGLSurface.prototype.shouldComponentUpdate = function (nextProps) {\n        return this.props.width !== nextProps.width || this.props.height !== nextProps.height;\n    };\n    /**\n     * Hook to allow subclasses some control over panning distances\n     *\n     * @param {number} distanceX The distance to pan in the x direction\n     * @param {number} distanceY The distance to pan in the y direction\n     *\n     * @return {Vector3} The vector indicating the direction to pan\n     */\n    WebGLSurface.prototype.willPan = function (distanceX, distanceY) {\n        return new three_1.Vector3(distanceX, distanceY, 0.0);\n    };\n    // -----[ Render ]---------------------------------------------\n    //\n    // In a React app, it's nice to put the render function at the bottom of the\n    // File\n    /**\n     * This should only attempt rendering when the canvas DOM element needs to be resized.\n     * You will note shouldComponentUpdate helps facilitate this.\n     */\n    WebGLSurface.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, width = _a.width, height = _a.height;\n        if (!WEBGL_SUPPORTED) {\n            return React.createElement(\"div\", null, this.props.children || 'Web GL not supported');\n        }\n        return (React.createElement(\"div\", { onMouseDown: this.handleMouseDown, onMouseOut: this.handleMouseOut, onMouseUp: this.handleMouseUp, onMouseLeave: this.handleMouseOut, onMouseMove: this.handleMouseMove, onDoubleClick: function (e) {\n                if (_this.props.onDoubleClick) {\n                    _this.props.onDoubleClick(e);\n                }\n            }, style: { position: 'relative', width: width, height: height } },\n            React.createElement(\"div\", { ref: this.applyRef })));\n    };\n    return WebGLSurface;\n}(React.Component));\nexports.WebGLSurface = WebGLSurface;\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_27__;\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(30);\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_31__;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(33));\n__export(__webpack_require__(34));\n__export(__webpack_require__(4));\n__export(__webpack_require__(35));\n__export(__webpack_require__(36));\n__export(__webpack_require__(37));\n__export(__webpack_require__(38));\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBufferAnts = (function (_super) {\n    __extends(SharedControlCurvedLineBufferAnts, _super);\n    function SharedControlCurvedLineBufferAnts() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBufferAnts.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'marching',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBufferAnts.prototype.update = function (shapeBuffer, atlasManager, sharedControl) {\n        if (!shapeBuffer) {\n            return false;\n        }\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control point for all of the vertices\n            uniforms.controlPoint.value = [sharedControl.x, sharedControl.y];\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var marchingAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        var antLength;\n        var antGap;\n        var antSpeed;\n        // We can not accurately send very large numbers via float point into the attributes\n        // So we trim down our time sent to the attribute down to a number that is less than\n        // 16,777,217 which means we can only reliably grab the last 7 digits of the date's time\n        var antStartTime = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            // We will not render the curved line with this buffer if the marching ants are not provided\n            if (!curvedLine.marchingAnts) {\n                console.error('Attempted to render a curved line shape with a marching ant buffer but provided no marching ant metrics. This curved line shape will be skipped', curvedLine);\n                return \"continue\";\n            }\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            antGap = curvedLine.marchingAnts.gapLength;\n            antSpeed = curvedLine.marchingAnts.speed;\n            antLength = curvedLine.marchingAnts.strokeLength + curvedLine.marchingAnts.gapLength;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos, marching, mpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                marching[mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBufferAnts;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBufferAnts = SharedControlCurvedLineBufferAnts;\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineColorsBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineColorsBuffer, _super);\n    function SharedControlCurvedLineColorsBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'colorPicks',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'timing',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.update = function (shapeBuffer, atlasManager) {\n        if (!shapeBuffer) {\n            return false;\n        }\n        var uniforms;\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var timingAttributeSize = 2;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorStartStop;\n        var colorEnd;\n        var colorEndStop;\n        var alpha;\n        var startTime;\n        var duration;\n        var controlRef;\n        var controlPoint;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorEnd = curvedLine.endColor.base.colorIndex;\n            colorEndStop = curvedLine.endColorStop.base.colorIndex;\n            colorStart = curvedLine.startColor.base.colorIndex;\n            colorStartStop = curvedLine.startColorStop.base.colorIndex;\n            duration = curvedLine.duration;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.currentStart;\n            p2 = curvedLine.currentEnd;\n            startTime = curvedLine.startTime;\n            controlPoint = curvedLine.controlPoints[1];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colorPicks, cpos, controlPick, ctpos, timing, tpos, normals, npos, endPoints, epos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                controlPick[ctpos] = controlRef;\n                cpos += colorAttributeSize;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[wpos] = halfWidthSize;\n                normals[npos] = 1;\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                tpos += timingAttributeSize;\n                // TR\n                colorPicks[cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[tpos] = startTime;\n                timing[++tpos] = duration;\n                // BR\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // TL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // BL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++ctpos] = controlRef;\n            }, \n            // We force updates for this buffer since it has animated properties\n            // Such as currentStartStop and currentEndStop which calculates\n            // Animations on the CPU side.\n            true);\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineColorsBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineColorsBuffer = SharedControlCurvedLineColorsBuffer;\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineBuffer, _super);\n    function SharedControlCurvedLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBuffer.prototype.update = function (shapeBuffer, atlasManager, sharedControl) {\n        if (!shapeBuffer) {\n            return false;\n        }\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control point for all of the vertices\n            uniforms.controlPoint.value = [sharedControl.x, sharedControl.y];\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBuffer = SharedControlCurvedLineBuffer;\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This ONLY supports a single color\n */\nvar SimpleStaticBezierLineBuffer = (function (_super) {\n    __extends(SimpleStaticBezierLineBuffer, _super);\n    function SimpleStaticBezierLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticBezierLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0, 0],\n                name: 'controlPoint',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticBezierLineBuffer.prototype.update = function (shapeBuffer) {\n        if (!shapeBuffer) {\n            return false;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var color;\n        var alpha;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            color = curvedLine.startColor.base.color;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colors, cpos, normals, npos, endPoints, epos, controlPoints, copos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                cpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticBezierLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticBezierLineBuffer = SimpleStaticBezierLineBuffer;\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\nvar SimpleStaticLabelBuffer = (function (_super) {\n    __extends(SimpleStaticLabelBuffer, _super);\n    function SimpleStaticLabelBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLabelBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 1],\n                name: 'texCoord',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'size',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0, 0],\n                name: 'anchor',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLabelBuffer.prototype.update = function (shapeBuffer, atlasManager, startFade, endFade, labelMaxSize) {\n        // Make some constants and props for our buffer update loop\n        var numVerticesPerQuad = 6;\n        var colorAttributeSize = 1;\n        var texCoordAttributeSize = 3;\n        var sizeAttributSize = 2;\n        var label;\n        var texture;\n        var color;\n        var alpha;\n        var anchor;\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].color;\n            var colorBase = colorRef.base;\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            atlas.needsUpdate = true;\n            if (startFade || endFade || labelMaxSize) {\n                material = this.bufferItems.system.material;\n                uniforms = material.uniforms;\n                if (startFade)\n                    uniforms.startFade.value = startFade;\n                if (endFade)\n                    uniforms.endFade.value = endFade;\n                if (labelMaxSize)\n                    uniforms.maxLabelSize.value = labelMaxSize;\n            }\n        }\n        if (!shapeBuffer) {\n            return false;\n        }\n        var updated = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this.bufferItems, numVerticesPerQuad, shapeBuffer.length, function (i, positions, ppos, colors, cpos, texCoords, tpos, sizes, spos, anchors, apos) {\n            label = shapeBuffer[i];\n            texture = label.rasterizedLabel;\n            color = label.color.base;\n            alpha = label.color.base.opacity;\n            anchor = {\n                x: label.getLocation().x + label.getSize().width * Math.cos(label.getRotation()),\n                y: label.getLocation().y + label.getSize().width * Math.sin(label.getRotation()),\n            };\n            // Make sure the label is updated with it's latest metrics\n            label.update();\n            // Copy first vertex twice for intro degenerate tri\n            positions[ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            anchors[apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // Skip over degenerate tris color and tex\n            cpos += colorAttributeSize;\n            tpos += texCoordAttributeSize;\n            spos += sizeAttributSize;\n            // TR\n            positions[++ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            texCoords[tpos] = texture.atlasTR.x;\n            texCoords[++tpos] = texture.atlasTR.y;\n            texCoords[++tpos] = alpha;\n            colors[cpos] = color.colorIndex;\n            sizes[spos] = label.getSize().width;\n            sizes[++spos] = label.getSize().height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BR\n            positions[++ppos] = label.BR.x;\n            positions[++ppos] = label.BR.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBR.x;\n            texCoords[++tpos] = texture.atlasBR.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = label.getSize().width;\n            sizes[++spos] = label.getSize().height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // TL\n            positions[++ppos] = label.TL.x;\n            positions[++ppos] = label.TL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasTL.x;\n            texCoords[++tpos] = texture.atlasTL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = label.getSize().width;\n            sizes[++spos] = label.getSize().height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BL\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBL.x;\n            texCoords[++tpos] = texture.atlasBL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = label.getSize().width;\n            sizes[++spos] = label.getSize().height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // Copy last vertex again for degenerate tri\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n        });\n        this.bufferItems.geometry.setDrawRange(0, numVerticesPerQuad * shapeBuffer.length);\n        return updated;\n    };\n    return SimpleStaticLabelBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLabelBuffer = SimpleStaticLabelBuffer;\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\nvar SimpleStaticLineBuffer = (function (_super) {\n    __extends(SimpleStaticLineBuffer, _super);\n    function SimpleStaticLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLineBuffer.prototype.update = function (shapeBuffer) {\n        var needsUpdate = false;\n        var numVerticesPerSegment = 6;\n        var colorAttributeSize = 4;\n        var stripPos = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var TR;\n        var BR;\n        var TL;\n        var BL;\n        var color;\n        var alpha;\n        var _loop_1 = function (curvedLine) {\n            var strip = curvedLine.getTriangleStrip();\n            color = curvedLine.startColor.base.color;\n            alpha = curvedLine.startColor.base.opacity;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, strip.length / 4, function (i, positions, ppos, colors, cpos) {\n                stripPos = i * 4;\n                TR = strip[stripPos];\n                BR = strip[stripPos + 1];\n                TL = strip[stripPos + 2];\n                BL = strip[stripPos + 3];\n                // 1\n                positions[ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n                // 2\n                positions[++ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 3\n                positions[++ppos] = BR.x;\n                positions[++ppos] = BR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 4\n                positions[++ppos] = TL.x;\n                positions[++ppos] = TL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 5\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 6\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n            });\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLineBuffer = SimpleStaticLineBuffer;\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(40));\n__export(__webpack_require__(41));\n__export(__webpack_require__(42));\n__export(__webpack_require__(20));\n__export(__webpack_require__(43));\n__export(__webpack_require__(44));\n__export(__webpack_require__(15));\n__export(__webpack_require__(23));\n__export(__webpack_require__(45));\n__export(__webpack_require__(46));\n__export(__webpack_require__(13));\n__export(__webpack_require__(9));\n__export(__webpack_require__(17));\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines a reference to a color that has been rendered to a texture\n * (See AtlasColor). This exposes the only properties that MAY be utilized\n * in a shader to modify the existing values without altering what is rendered\n * on the texture.\n */\nvar ReferenceColor = (function () {\n    /**\n     * Creates an instance of ReferenceColor.\n     *\n     * @param {AtlasColor} base The color to be based off of\n     */\n    function ReferenceColor(base) {\n        this.base = base;\n    }\n    return ReferenceColor;\n}());\nexports.ReferenceColor = ReferenceColor;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar easing_1 = __webpack_require__(11);\nvar frame_info_1 = __webpack_require__(10);\nvar interpolation_1 = __webpack_require__(12);\nvar curved_line_shape_1 = __webpack_require__(20);\n/**\n * This represents curved lines and what it would take to animate various properties.\n * While this provides helpers to aid in animating the properties, it is up to\n * buffers, shaders and materials to render those changes appropriately.\n */\nvar AnimatedCurvedLineShape = (function (_super) {\n    __extends(AnimatedCurvedLineShape, _super);\n    function AnimatedCurvedLineShape(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This defines the suggested easing for the animation for any of\n         * the values.\n         */\n        _this.easing = easing_1.linear;\n        _this._startColorChange = new three_1.Color(0, 0, 0);\n        _this._endColorChange = new three_1.Color(0, 0, 0);\n        /** The starting end point's destination */\n        _this.startStop = { x: 0, y: 0 };\n        _this.endStop = { x: 0, y: 0 };\n        /**\n         * This calculates the current start color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentStartColor = new three_1.Color(0, 0, 0);\n        /**\n         * This calculates the current end color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentEndColor = new three_1.Color(0, 0, 0);\n        if (options) {\n            _this.startStop = options.startStop || { x: 0, y: 0 };\n            _this.endStop = options.endStop || { x: 0, y: 0 };\n            if (options.startColorStop) {\n                _this.startColorStop = options.startColorStop;\n            }\n            if (options.endColorStop) {\n                _this.endColorStop = options.endColorStop;\n            }\n        }\n        return _this;\n    }\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"startColorStop\", {\n        get: function () {\n            return this._startColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._startColorStop = value;\n            this._startColorChange.r = newBase.r - startBase.r;\n            this._startColorChange.g = newBase.g - startBase.g;\n            this._startColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"endColorStop\", {\n        get: function () {\n            return this._endColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._endColorStop = value;\n            this._endColorChange.r = newBase.r - startBase.r;\n            this._endColorChange.g = newBase.g - startBase.g;\n            this._endColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStartColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var startBase = this.startColor.base.color;\n            this._currentStartColor.r = this.easing(time, startBase.r, this._startColorChange.r, this.duration);\n            this._currentStartColor.g = this.easing(time, startBase.g, this._startColorChange.g, this.duration);\n            this._currentStartColor.b = this.easing(time, startBase.b, this._startColorChange.b, this.duration);\n            return this._currentStartColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEndColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var endBase = this.endColor.base.color;\n            this._currentEndColor.r = this.easing(time, endBase.r, this._endColorChange.r, this.duration);\n            this._currentEndColor.g = this.easing(time, endBase.g, this._endColorChange.g, this.duration);\n            this._currentEndColor.b = this.easing(time, endBase.b, this._endColorChange.b, this.duration);\n            return this._currentEndColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStart\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            var newStart = interpolation_1.circular(easedTime, this.start, this.startStop, this.controlPoints[1]);\n            return newStart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEnd\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            // Apply the circular interpolation to the points\n            return interpolation_1.circular(easedTime, this.end, this.endStop, this.controlPoints[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimatedCurvedLineShape;\n}(curved_line_shape_1.CurvedLineShape));\nexports.AnimatedCurvedLineShape = AnimatedCurvedLineShape;\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = __webpack_require__(8);\nvar circle_1 = __webpack_require__(22);\n/**\n * Defines a circular shape that can be drawn\n */\nvar CircleShape = (function (_super) {\n    __extends(CircleShape, _super);\n    /**\n     * Sets the properties of the shape to be drawn\n     *\n     * @param x Center of the circle\n     * @param y Center of the circle\n     * @param r The radius of the circle\n     * @param color The color of the circle\n     * @param color The color within the inner radius of the circle\n     * @param innerR The inner radius of the circle\n     * @param d A data object to associate with this circle\n     */\n    function CircleShape(x, y, r, color, innerColor, innerR, d) {\n        var _this = _super.call(this, x, y, r, d) || this;\n        // Color\n        _this.r = 0;\n        _this.g = 0;\n        _this.b = 0;\n        _this.a = 0;\n        // Inner radius color\n        _this.r2 = 0;\n        _this.g2 = 0;\n        _this.b2 = 0;\n        _this.a2 = 0;\n        // Other properties\n        _this.alpha = 0;\n        _this.innerRadius = 0;\n        _this.ringWidth = 0;\n        _this.ringPad = 0;\n        _this.outline = false;\n        if (color) {\n            // FIXME: This is solving a bizarre potential race condition (or other voodoo) where the numbers are not being\n            // Applied correctly to this object when applying the d3 color object properties to this.\n            var r_1 = color.r, g = color.g, b = color.b, opacity = color.opacity;\n            _this.setOuterColor({ r: r_1, g: g, b: b, opacity: opacity });\n        }\n        if (innerR === undefined) {\n            innerR = 0;\n        }\n        _this.innerRadius = innerR;\n        if (innerColor) {\n            _this.setInnerColor(innerColor);\n        }\n        return _this;\n    }\n    /**\n     * Sets the color of the outer drawn radius\n     *\n     * @param color\n     */\n    CircleShape.prototype.setOuterColor = function (color) {\n        var r = color.r, g = color.g, b = color.b, opacity = color.opacity;\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = opacity;\n    };\n    /**\n     * Sets the color of the inner drawn radius\n     *\n     * @param color\n     */\n    CircleShape.prototype.setInnerColor = function (color) {\n        this.r2 = color.r;\n        this.g2 = color.g;\n        this.b2 = color.b;\n        this.a2 = color.opacity;\n    };\n    /**\n     * Clones this instance of the circle shape and creates a new instance of a circle shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this circleshape\n     */\n    CircleShape.prototype.clone = function (newProperties) {\n        return Object.assign(new CircleShape(this._centerX, this._centerY, this._radius, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.innerRadius, this.d), this, newProperties);\n    };\n    /**\n     * Clones this instance of the circle shape and creates a new instance of a circle shape that\n     * is identical to this one. This will perform the clone but will change the data type\n     * associated with the circle in the cloned instance\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this circleshape\n     */\n    CircleShape.prototype.cloneWithData = function (newProperties) {\n        return Object.assign(new CircleShape(this._centerX, this._centerY, this._radius, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.innerRadius), this, newProperties);\n    };\n    return CircleShape;\n}(circle_1.Circle));\nexports.CircleShape = CircleShape;\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = __webpack_require__(8);\nvar line_1 = __webpack_require__(5);\nvar line_shape_1 = __webpack_require__(23);\n/**\n * This defines an edge that can be drawn.\n * This type of edge is a quad with distorted ends. The quad will represent a\n * line with each end having potentially different sizes thus giving a four sided\n * polygon rather than a parallelogram.\n *\n * The edge shape also doubles up as a simple line shape should it be desired to\n * render differently.\n */\nvar EdgeShape = (function (_super) {\n    __extends(EdgeShape, _super);\n    /**\n     * Constructor with basic parameters to declare an edge\n     *\n     * @param p1 The point the edge begins at\n     * @param p2 The point the edge terminates at\n     * @param d The data associated with the edge\n     * @param p1Col The color at the start point\n     * @param p2Col The color at the end point\n     * @param p1Width The width at the start point. Example: if you specify 4, then\n     *                the start part of the edge will fan out 2 on either side of the\n     *                start point\n     * @param p2Width The width at the end point. Example: if you specify 4, then\n     *                the end part of the edge will fan out 2 on either side of the\n     *                end point\n     */\n    function EdgeShape(p1, p2, d, p1Col, p2Col, p1Width, p2Width) {\n        var _this = \n        // Set up all of our line shape based metrics\n        _super.call(this, p1, p2, d, p1Col.r, p1Col.g, p1Col.b, p1Col.opacity, p2Col.r, p2Col.g, p2Col.b, p2Col.opacity, p1Width) || this;\n        /** Top left of the quad to generate this edge */\n        _this.tl = { x: 0, y: 0 };\n        /** Bottom left of the quad to generate this edge */\n        _this.bl = { x: 0, y: 0 };\n        /** Top right of the quad to generate this edge */\n        _this.tr = { x: 0, y: 0 };\n        /** Bottom Right of the quad to generate this edge */\n        _this.br = { x: 0, y: 0 };\n        /** The width of the edge at the termination point */\n        _this.endWidth = 1;\n        _this.endWidth = p2Width;\n        _this.setPoints(p1, p2);\n        return _this;\n    }\n    /**\n     * Clones this instance of the edge shape and creates a new instance of an edge shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {EdgeShape} A newly cloned instance of this edgeshape\n     */\n    EdgeShape.prototype.clone = function (newProperties) {\n        return Object.assign(new EdgeShape(this.p1, this.p2, this.d, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.thickness, this.endWidth), this, newProperties);\n    };\n    /**\n     * Algorithm provided by\n     * https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n     * Adapted to Javascript by Chris @ VoidRay co\n     *\n     * Remember the point must be in the same\n     * coordinate system that the edge is using\n     *\n     * @param {number} point The point to test\n     *\n     * @return {boolean} True if the point is inside the edge\n     */\n    EdgeShape.prototype.pointInside = function (point) {\n        var testx = point.x;\n        var testy = point.y;\n        // This is an algortihm to handle any number of points for a polygon. In this\n        // Case our polygon is simply the points that make this fat edge. Note:\n        // The points MUST be in CW order\n        var points = [this.tl, this.tr, this.br, this.bl];\n        var numberVertices = points.length;\n        var isClockwise = false;\n        for (var i = 0, j = numberVertices - 1; i < numberVertices; j = i++) {\n            if (((points[i].y > testy) !== (points[j].y > testy)) &&\n                (testx < (points[j].x - points[i].x) * (testy - points[i].y) /\n                    (points[j].y - points[i].y) + points[i].x)) {\n                isClockwise = !isClockwise;\n            }\n        }\n        return isClockwise;\n    };\n    /**\n     * @override\n     * This sets the two endpoints for this edge and recalculates the bounds\n     * of the edge accordingly.\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    EdgeShape.prototype.setPoints = function (p1, p2) {\n        _super.prototype.setPoints.call(this, p1, p2);\n        if (this.tl) {\n            // Get the distance from the points we will go based on specified widths\n            var p1Dx = this.thickness / 2;\n            var p2Dx = this.endWidth / 2;\n            // Calculate the deltas to get from point to quad edge\n            var p1DeltaX = this.perpendicular.x * p1Dx;\n            var p1DeltaY = this.perpendicular.y * p1Dx;\n            var p2DeltaX = this.perpendicular.x * p2Dx;\n            var p2DeltaY = this.perpendicular.y * p2Dx;\n            // Apply the metrics to our quad points\n            // Start side of the edge\n            this.tl.x = this.p1.x + p1DeltaX;\n            this.tl.y = this.p1.y + p1DeltaY;\n            this.bl.x = this.p1.x - p1DeltaX;\n            this.bl.y = this.p1.y - p1DeltaY;\n            // End side of the edge\n            this.tr.x = this.p2.x + p2DeltaX;\n            this.tr.y = this.p2.y + p2DeltaY;\n            this.br.x = this.p2.x - p2DeltaX;\n            this.br.y = this.p2.y - p2DeltaY;\n            // Create lines for the edges for computations and faster hit detections\n            this.topEdge = new line_1.Line(this.tl, this.tr);\n            this.bottomEdge = new line_1.Line(this.bl, this.br);\n            // Make sure our bounds reflects the entirety of the fat edge\n            this.encapsulatePoints([this.tl, this.tr, this.bl, this.br]);\n        }\n    };\n    return EdgeShape;\n}(line_shape_1.LineShape));\nexports.EdgeShape = EdgeShape;\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n/**\n * Defines an image that can be rendered by the gpu. This is an axis oriented\n * image only (no rotations)\n */\nvar ImageShape = (function (_super) {\n    __extends(ImageShape, _super);\n    /**\n     * Generates a new ImageShape that can be rendered\n     *\n     * @param {AtlasTexture} image The AtlasTexture to use when rendering this image\n     * @param {number} size This is the size of the longest edge of the image while\n     *                      retaining aspect ratio.\n     */\n    function ImageShape(image, size) {\n        var _this = _super.call(this, 0, 0, size, size) || this;\n        /** This is the level of opacity the image will be rendered with */\n        _this.opacity = 1.0;\n        _this.texture = image;\n        _this.size = size;\n        return _this;\n    }\n    Object.defineProperty(ImageShape.prototype, \"size\", {\n        /**\n         * Returns the largest edge of the image\n         */\n        get: function () {\n            return Math.max(this.width, this.height);\n        },\n        /**\n         * This is the size the image will be rendered within World Space. The size\n         * correlates to the largest edge of the image\n         */\n        set: function (val) {\n            if (this.texture.aspectRatio > 1) {\n                this.width = val;\n                this.height = val / this.texture.aspectRatio;\n            }\n            else {\n                this.width = val * this.texture.aspectRatio;\n                this.height = val;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Centers this image on a provided location\n     *\n     * @param {number} x The x coordinate in world space\n     * @param {number} y The y coordinate in world space\n     */\n    ImageShape.prototype.centerOn = function (x, y) {\n        this.x = x - (this.width / 2.0);\n        this.y = y - (this.height / 2.0);\n    };\n    return ImageShape;\n}(bounds_1.Bounds));\nexports.ImageShape = ImageShape;\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\nvar QuadShape = (function (_super) {\n    __extends(QuadShape, _super);\n    function QuadShape(bounds, color) {\n        var _this = _super.call(this, bounds.x, bounds.right, bounds.y, bounds.bottom) || this;\n        _this.r = 1.0;\n        _this.g = 0.0;\n        _this.b = 0.0;\n        _this.a = 1.0;\n        return _this;\n    }\n    return QuadShape;\n}(bounds_1.Bounds));\nexports.QuadShape = QuadShape;\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\n/**\n * Defines a color that is located on an atlas\n */\nvar AtlasColor = (function () {\n    /**\n     * Constructor implementation\n     */\n    function AtlasColor(color, g, b, a) {\n        if (a === void 0) { a = 1.0; }\n        // Value between 1 - 0 for the opacity of the color\n        this.opacity = 1.0;\n        // The pixel width and height of the color rendered onto the atlas\n        // This will always be a 2x2 so the color can be sampled in the middle\n        // For a guaranteed pure color regardless of gl sampling states\n        this.pixelWidth = 2;\n        this.pixelHeight = 2;\n        if (color instanceof three_1.Color) {\n            this.color = color.clone();\n            this.opacity = g === undefined ? 1.0 : g;\n        }\n        else {\n            this.color = new three_1.Color(color, g, b);\n            this.opacity = a;\n        }\n    }\n    return AtlasColor;\n}());\nexports.AtlasColor = AtlasColor;\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(1));\n__export(__webpack_require__(22));\n__export(__webpack_require__(21));\n__export(__webpack_require__(5));\n__export(__webpack_require__(6));\n__export(__webpack_require__(16));\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(3));\n__export(__webpack_require__(49));\n__export(__webpack_require__(50));\n__export(__webpack_require__(14));\n__export(__webpack_require__(19));\n__export(__webpack_require__(24));\n__export(__webpack_require__(51));\n__export(__webpack_require__(12));\n__export(__webpack_require__(18));\n__export(__webpack_require__(10));\n__export(__webpack_require__(11));\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Takes a map of the form <T, boolean> and returns an array of the keys,\n * excluding entries who's mapped value is false.\n *\n * @param map The map to convert to a list\n *\n * @return T[] A list of the keys, exluding false mappings\n */\nfunction boolMapToArray(map) {\n    return Array\n        .from(map)\n        .filter(function (item) { return item[1]; })\n        .map(function (item) { return item[0]; });\n}\nexports.boolMapToArray = boolMapToArray;\n/**\n * Defines a selection control for custom types and categories\n */\nvar CustomSelection = (function () {\n    function CustomSelection() {\n        /** This caches the list generation of a selection */\n        this.cachedSelection = new Map();\n        /** Map of the custom categories to the selection state */\n        this.selections = new Map();\n        /** Keeps flags indicating if a selection for a given category has changed or not */\n        this._didSelectionChange = new Map();\n    }\n    /**\n     * Clears out all custom selections for every category\n     */\n    CustomSelection.prototype.clearAllSelections = function () {\n        for (var _i = 0, _a = Array.from(this.selections.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.clearSelection(key);\n        }\n    };\n    /**\n     * Clears the selection for the category specified\n     *\n     * @param {string} category Name of the category of selection\n     */\n    CustomSelection.prototype.clearSelection = function (category) {\n        // We must have selected items to clear the selection\n        if (this.getSelection(category).length) {\n            this.selections.set(category, null);\n            this.cachedSelection.set(category, null);\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Makes an item no longer flaged as selected within the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to remove from being selected\n     */\n    CustomSelection.prototype.deselect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        // See if the item is selected already, if it is, clear the selection and bust caches\n        if (selectionMap && selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, false);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Checks if a selection from a category has been modified\n     *\n     * @param {string} category The selection category to check\n     */\n    CustomSelection.prototype.didSelectionCategoryChange = function (category) {\n        return this._didSelectionChange.get(category);\n    };\n    /**\n     * Checks if ANY selection has changed\n     *\n     * @return {boolean} True if any selection has changed\n     */\n    CustomSelection.prototype.didSelectionChange = function () {\n        return boolMapToArray(this._didSelectionChange).length > 0;\n    };\n    /**\n     * This indicates that updates have taken place to account for selection\n     * changes.\n     */\n    CustomSelection.prototype.finalizeUpdate = function () {\n        for (var _i = 0, _a = Array.from(this._didSelectionChange.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this._didSelectionChange.set(key, false);\n        }\n    };\n    /**\n     * This retrieves a list of the items that are selected\n     *\n     * @param category The selection category to check on\n     *\n     * @return {T} Returns a list of items that are currently selected\n     */\n    CustomSelection.prototype.getSelection = function (category) {\n        if (!this.cachedSelection.get(category)) {\n            var theSelection = this.selections.get(category);\n            if (theSelection) {\n                this.cachedSelection.set(category, boolMapToArray(theSelection));\n            }\n            else {\n                this.cachedSelection.set(category, []);\n            }\n        }\n        return this.cachedSelection.get(category);\n    };\n    /**\n     * Specifies an item to flag as selected for the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.select = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        if (!selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, true);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Specifies an item to toggle it's selection status for the provided category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.toggleSelect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        // Clear the cache for the selection list\n        this.cachedSelection.set(category, null);\n        // Toggle the selection off if already selected\n        if (selectionMap.get(item)) {\n            this.deselect(category, item);\n        }\n        else {\n            this.select(category, item);\n        }\n        // Flag the category of selections as changed\n        this._didSelectionChange.set(category, true);\n    };\n    return CustomSelection;\n}());\nexports.CustomSelection = CustomSelection;\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getFontMetrics(props) {\n    var ctx = props.ctx;\n    var text = props.text;\n    var bboxHeight = props.bboxHeight;\n    var canvasHeight = props.ctx.canvas.height;\n    var baseline = props.baseline || 'alphabetic';\n    var flip = props.flip || false;\n    var drawBaseline = props.drawBaseline || false;\n    var fontFamily = 'Arial, san-serif';\n    var fontSize = 14;\n    if (props.fontFamily) {\n        fontFamily = props.fontFamily;\n    }\n    if (props.fontSize) {\n        fontSize = props.fontSize;\n    }\n    // Setting up the canvas\n    ctx.save(); // Create canvas to use as buffer\n    ctx.font = fontSize + \"px \" + fontFamily;\n    var textWidth = ctx.measureText(text).width;\n    // This keeps font in-screen, measureText().width doesn't\n    // Quite do it in some cases. For instance \"j\", or the letter \"f\"\n    // In the font \"Zapfino\".\n    var offsetx = fontSize * 2;\n    var offsety = fontSize * 2;\n    var cwidth = ctx.canvas.width = Math.round(textWidth + offsetx * 2);\n    var cheight = ctx.canvas.height = canvasHeight ? canvasHeight : Math.round(offsety * 2);\n    if (typeof (baseline) === 'string') {\n        offsety = 0; // Using <canvas> baseline\n        ctx.textBaseline = baseline;\n    }\n    // Ctx.font has to be called twice because resetting the size resets the state\n    if (flip) {\n        ctx.scale(1, -1);\n    }\n    ctx.font = fontSize + \"px \" + fontFamily;\n    ctx.fillText(text, offsetx, (typeof (bboxHeight) === 'number' ? bboxHeight : offsety));\n    // Drawing baseline\n    if (drawBaseline) {\n        ctx.fillRect(0, canvasHeight / 2, ctx.canvas.width, 1);\n    }\n    // Grabbing image data\n    var imageData = ctx.getImageData(0, 0, cwidth, cheight);\n    var data = imageData.data;\n    // Calculating top\n    var top = 0;\n    var pos = data.length;\n    var bottom = 0;\n    var realBottom = 0;\n    var left = 0;\n    var right = 0;\n    while (pos > 0) {\n        if (data[pos + 3]) {\n            pos -= pos % (cwidth * 4); // Back to beginning of the line top = (pos / 4) / cwidth; // calculate pixel position top -= offsety - fontSize; pos = data.length; // exit loop } pos += 4; } // calculating bottom var bottom = 0; var pos = data.length; while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                bottom = (pos / 4) / cwidth;\n                bottom -= offsety - fontSize;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Calculating left\n        left = 0;\n        var col = 0;\n        var row = 0; // Left bounds\n        while (row < cheight && col < cwidth) {\n            var px = data[(row * cwidth * 4) + (col * 4) + 3];\n            if (px) {\n                left = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col++;\n            }\n        }\n        // Calculating right\n        right = 0;\n        col = cwidth;\n        row = 0; // Right bounds\n        while (row < cheight && col > 0) {\n            if (data[(row * cwidth * 4) + (col * 4) + 3]) {\n                right = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col--;\n            }\n        }\n        // Calculating real-bottom\n        realBottom = 0;\n        pos = data.length;\n        while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                realBottom = (pos / 4) / cwidth;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Restoring state\n        ctx.restore();\n    }\n    // Returning raw-metrics\n    return {\n        bottom: realBottom,\n        height: (bottom - top),\n        left: (-left),\n        top: (fontSize - top),\n        width: (right - left),\n    };\n}\nexports.getFontMetrics = getFontMetrics;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shape_buffer_cache_1 = __webpack_require__(24);\nvar PlayState;\n(function (PlayState) {\n    PlayState[PlayState[\"INIT\"] = 0] = \"INIT\";\n    PlayState[PlayState[\"PLAY\"] = 1] = \"PLAY\";\n    PlayState[PlayState[\"STOP\"] = 2] = \"STOP\";\n})(PlayState = exports.PlayState || (exports.PlayState = {}));\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar AnimatedShapeBufferCache = (function (_super) {\n    __extends(AnimatedShapeBufferCache, _super);\n    function AnimatedShapeBufferCache() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.playState = PlayState.INIT;\n        _this.buffer = [];\n        _this.bustCache = true;\n        /**\n         * This is the internal control for managing execution of the animate method\n         */\n        _this.doAnimate = function () {\n            if (_this.playState === PlayState.PLAY) {\n                requestAnimationFrame(_this.doAnimate);\n            }\n            _this.animate();\n        };\n        return _this;\n    }\n    /**\n     * This is the method that will execute with the frame rate. Subclasses can\n     * override this to implement animated changes\n     */\n    AnimatedShapeBufferCache.prototype.animate = function () {\n        // Implemented by subclasses\n    };\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    AnimatedShapeBufferCache.prototype.generate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this.bustCache) {\n            this.buildCache.apply(this, args);\n            this.bustCache = false;\n            if (this.playState === PlayState.INIT) {\n                this.start();\n                requestAnimationFrame(this.doAnimate);\n            }\n        }\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    AnimatedShapeBufferCache.prototype.buildCache = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Animated buffers are ALWAYS new every frame if playing\n     * Get the buffer the cache has generated\n     */\n    AnimatedShapeBufferCache.prototype.getBuffer = function () {\n        if (this.playState === PlayState.PLAY) {\n            return [].concat(this.buffer);\n        }\n        return this.buffer;\n    };\n    /**\n     * Begins executing the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.start = function () {\n        this.playState = PlayState.PLAY;\n    };\n    /**\n     * Ceases the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.stop = function () {\n        this.playState = PlayState.STOP;\n    };\n    return AnimatedShapeBufferCache;\n}(shape_buffer_cache_1.ShapeBufferCache));\nexports.AnimatedShapeBufferCache = AnimatedShapeBufferCache;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bab737e1a97b9df2ea4d","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"three\"\n// module id = 0\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(left, right, top, bottom) {\n        this.height = 0;\n        this.width = 0;\n        this.x = 0;\n        this.y = 0;\n        if (arguments.length === 4) {\n            this.x = left;\n            this.width = right - left;\n            this.y = top;\n            this.height = top - bottom;\n        }\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        /** The total rectangular surface area of this instance */\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        /** The bottom coordinate for this instance (y + height) */\n        get: function () {\n            return this.y - this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        /** An x, y coordinate pair representing the center of this object */\n        get: function () {\n            return {\n                x: this.x + (this.width / 2),\n                y: this.y - (this.height / 2),\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Check to see if a given point lies within the bounds of this instance\n     *\n     * @param point The point to check\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        if (point.x < this.x) {\n            return false;\n        }\n        if (point.y > this.y) {\n            return false;\n        }\n        if (point.x > this.right) {\n            return false;\n        }\n        if (point.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Copies the properties of the bounds specified\n     *\n     * @param b The bounds whose dimensions we wish to copy\n     */\n    Bounds.prototype.copyBounds = function (b) {\n        this.height = b.height;\n        this.width = b.width;\n        this.x = b.x;\n        this.y = b.y;\n    };\n    /**\n     * Ensure that this object contains the smaller bounds\n     *\n     * This method will not shrink this class, but only grow it as necessary to\n     * fit the destination object\n     *\n     * @param bounds The bounds to encapsulate\n     */\n    Bounds.prototype.encapsulate = function (bounds) {\n        if (bounds.x < this.x) {\n            this.width += this.x - bounds.x;\n            this.x = bounds.x;\n        }\n        if (bounds.y > this.y) {\n            this.height += bounds.y - this.y;\n            this.y = bounds.y;\n        }\n        if (bounds.right > this.right) {\n            this.width = bounds.right - this.x;\n        }\n        if (bounds.bottom < this.bottom) {\n            this.height = this.y - bounds.bottom;\n        }\n    };\n    /**\n     * Ensure that this object contains the provided list of bounds\n     *\n     * This will never shrink or modify the original area covered by this bounds\n     * but will instead stay the same or include the original area plus the specified\n     * list of bounds.\n     *\n     * @param {Bounds<any>[]} bounds The list of bounds objects to encapsulate\n     * @param {boolean} sizeToFirst If this is set, the procedure will start by making this bounds\n     *                              be a clone of the first bounds object in the list\n     */\n    Bounds.prototype.encapsulateBounds = function (bounds, sizeToFirst) {\n        if (sizeToFirst && bounds.length) {\n            this.copyBounds(bounds[0]);\n        }\n        if (bounds.length === 0) {\n            return;\n        }\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        bounds.forEach(function (p) {\n            if (p.x < minX) {\n                minX = p.x;\n            }\n            if (p.right > maxX) {\n                maxX = p.right;\n            }\n            if (p.bottom < minY) {\n                minY = p.bottom;\n            }\n            if (p.y > maxY) {\n                maxY = p.y;\n            }\n        });\n        // Make bounds that encompasses the bounds list, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Grow this class to contain the specified point\n     *\n     * This method will not shrink this instance. It will only grow it as\n     * necessary.\n     *\n     * @param point The point to encapsulate\n     */\n    Bounds.prototype.encapsulatePoint = function (point) {\n        if (point.x < this.x) {\n            this.width += this.x - point.x;\n            this.x = point.x;\n        }\n        if (point.y > this.y) {\n            this.height += point.y - this.y;\n            this.y = point.y;\n        }\n        if (point.x > this.right) {\n            this.width = point.x - this.x;\n        }\n        if (point.y < this.bottom) {\n            this.height = this.y - point.y;\n        }\n    };\n    /**\n     * Efficiently encapsulates a set of points by growing the current dimensions\n     * of the bounds until the points are enclosed. This will perform faster than\n     * running encapsulatePoint for a list of points.\n     *\n     * @param points An array of points that Can be of format {x, y} or [x, y]\n     *\n     * @memberOf Bounds\n     */\n    Bounds.prototype.encapsulatePoints = function (points) {\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        if (points[0] !== undefined && points[0].x) {\n            points.forEach(function (p) {\n                if (p.x < minX) {\n                    minX = p.x;\n                }\n                else if (p.x > maxX) {\n                    maxX = p.x;\n                }\n                if (p.y < minY) {\n                    minY = p.y;\n                }\n                else if (p.y > maxY) {\n                    maxY = p.y;\n                }\n            });\n        }\n        else {\n            points.forEach(function (p) {\n                if (p[0] < minX) {\n                    minX = p[0];\n                }\n                else if (p[0] > maxX) {\n                    maxX = p[0];\n                }\n                if (p[1] < minY) {\n                    minY = p[1];\n                }\n                else if (p[1] > maxY) {\n                    maxY = p[1];\n                }\n            });\n        }\n        // Make bounds that encompasses the points, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Checks to see if another bounds fits in itself.\n     *\n     * @param {Bounds} inner The bounds to test against\n     *\n     * @return {number} int 1 is an exact fit, 2 it fits with space, 0 it doesn't fit\n     */\n    Bounds.prototype.fits = function (inner) {\n        if (this.width === inner.width) {\n            if (this.height === inner.height) {\n                return 1;\n            }\n        }\n        if (this.width >= inner.width) {\n            if (this.height >= inner.height) {\n                return 2;\n            }\n        }\n        return 0;\n    };\n    /**\n     * Check to see if the provided bounds intersects with this instance\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if the other object intersects with this instance\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        if (bounds.right < this.x) {\n            return false;\n        }\n        if (bounds.x > this.right) {\n            return false;\n        }\n        if (bounds.bottom > this.y) {\n            return false;\n        }\n        if (bounds.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Tests if a point is inside this bounds\n     *\n     * @param p The point to test\n     *\n     * @return boolean The point to test\n     */\n    Bounds.prototype.pointInside = function (p) {\n        if (p.x < this.x) {\n            return false;\n        }\n        if (p.y > this.y) {\n            return false;\n        }\n        if (p.x > this.right) {\n            return false;\n        }\n        if (p.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Test function to type check the provided value\n     *\n     * @return True if value is a bounds object\n     */\n    Bounds.isBounds = function (value) {\n        // Falsy values aren't bounds objects\n        if (!value) {\n            return false;\n        }\n        // Direct test for bounds objects\n        if (value instanceof this) {\n            return true;\n        }\n        // Duck-typing check\n        return value &&\n            'containsPoint' in value &&\n            'encapsulate' in value &&\n            'hitTest' in value;\n    };\n    /**\n     * Check if this instance is completely inside the provided bounds\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if this instance is inside the provided bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return (bounds.x <= this.x &&\n            bounds.right >= this.right &&\n            bounds.y >= this.y &&\n            bounds.bottom <= this.bottom);\n    };\n    /**\n     * Generates a Bounds object covering max extents\n     *\n     * @return {Bounds} bounds covering as wide of a range as possible\n     */\n    Bounds.maxBounds = function () {\n        return new Bounds(Number.MIN_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MAX_VALUE);\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/bounds.ts\n// module id = 1\n// module chunks = 0","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/debug/src/browser.js\n// module id = 2\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar debugGenerator = require('debug');\nvar debug = require('debug')('WebGLSurface:BufferUtil');\nvar TriangleOrientation;\n(function (TriangleOrientation) {\n    // The triangles points are clockwise\n    TriangleOrientation[TriangleOrientation[\"CW\"] = 0] = \"CW\";\n    // The triangles points are Counter clockwise\n    TriangleOrientation[TriangleOrientation[\"CCW\"] = 1] = \"CCW\";\n    // The triangles points are linear, thus degenerate\n    TriangleOrientation[TriangleOrientation[\"DEGENERATE\"] = 2] = \"DEGENERATE\";\n})(TriangleOrientation = exports.TriangleOrientation || (exports.TriangleOrientation = {}));\nvar AttributeSize;\n(function (AttributeSize) {\n    AttributeSize[AttributeSize[\"ONE\"] = 0] = \"ONE\";\n    AttributeSize[AttributeSize[\"TWO\"] = 1] = \"TWO\";\n    AttributeSize[AttributeSize[\"THREE\"] = 2] = \"THREE\";\n    AttributeSize[AttributeSize[\"FOUR\"] = 3] = \"FOUR\";\n})(AttributeSize = exports.AttributeSize || (exports.AttributeSize = {}));\n/**\n * These are for fast look ups of the default values provided\n * Doing this fashion avoids array look ups in the defaults values\n */\nvar defaultsHolder0 = 0;\nvar defaultsHolder1 = 0;\nvar defaultsHolder2 = 0;\nvar defaultsHolder3 = 0;\n/**\n * These are for fast look ups of attribute buffers that are going\n * through the update process. We do everything to mitigate array look ups\n * when and where we can\n */\nvar attrRegister0 = [];\nvar attrRegister1 = [];\nvar attrRegister2 = [];\nvar attrRegister3 = [];\nvar attrRegister4 = [];\nvar attrRegister5 = [];\nvar attrRegister6 = [];\nvar attrIndex0 = 0;\nvar attrIndex1 = 0;\nvar attrIndex2 = 0;\nvar attrIndex3 = 0;\nvar attrIndex4 = 0;\nvar attrIndex5 = 0;\nvar attrIndex6 = 0;\nvar attrIndexIncr0 = 0;\nvar attrIndexIncr1 = 0;\nvar attrIndexIncr2 = 0;\nvar attrIndexIncr3 = 0;\nvar attrIndexIncr4 = 0;\nvar attrIndexIncr5 = 0;\nvar attrIndexIncr6 = 0;\n/** This is used to define a starting batch location to aid in continuing batch updates */\nvar lastBatchRegister = 0;\nvar isStreamUpdatingRegister = false;\n/**\n * This takes our list of attribute buffers and applies them to the registers for rapid lookups\n *\n * @param {number[][]} attributeBuffers The buffers for each attribute to be updated\n * @param {number[]} incrementValues How much each batch increments it's lookup index\n */\nfunction applyAttributeRegisters(attributeBuffers, incrementValues) {\n    attrRegister0 = attributeBuffers[0];\n    attrRegister1 = attributeBuffers[1];\n    attrRegister2 = attributeBuffers[2];\n    attrRegister3 = attributeBuffers[3];\n    attrRegister4 = attributeBuffers[4];\n    attrRegister5 = attributeBuffers[5];\n    attrRegister6 = attributeBuffers[6];\n    attrIndexIncr0 = incrementValues[0];\n    attrIndexIncr1 = incrementValues[1];\n    attrIndexIncr2 = incrementValues[2];\n    attrIndexIncr3 = incrementValues[3];\n    attrIndexIncr4 = incrementValues[4];\n    attrIndexIncr5 = incrementValues[5];\n    attrIndexIncr6 = incrementValues[6];\n}\n/**\n * The following methods are targetted at executing the update accessor with varying number\n * of parameters while mitigating array look ups.\n *\n * @param {number} numBatches The number of batches to execute\n * @param {Function} updateAccessor The accessor function that will update the buffer values\n */\nfunction updateBuffer1(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0);\n    }\n}\nfunction updateBuffer2(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1);\n    }\n}\nfunction updateBuffer3(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2);\n    }\n}\nfunction updateBuffer4(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3);\n    }\n}\nfunction updateBuffer5(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4);\n    }\n}\nfunction updateBuffer6(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5);\n    }\n}\nfunction updateBuffer7(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6);\n    }\n}\n/**\n * This takes the defaults array provided and loads them into our default\n * lookup values\n *\n * @param {number[]} defaults The array with the default values in them for our buffer attribute\n */\nfunction applyDefaultsHolders(defaults) {\n    defaultsHolder0 = defaults[0] || 0;\n    defaultsHolder1 = defaults[1] || 0;\n    defaultsHolder2 = defaults[2] || 0;\n    defaultsHolder3 = defaults[3] || 0;\n}\n/**\n * The following methods are rapid ways of populating the buffer without\n * setting up a generic loop. This saves on performance by not creating a loop\n * nor allocating the variables necessary for the generic loop.\n *\n * @param {Float32Array} buffer The buffer to populate\n * @param {number} start The index the data should be populated into\n */\nfunction fillSize1(buffer, start) {\n    buffer[start] = defaultsHolder0;\n}\nfunction fillSize2(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n}\nfunction fillSize3(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n}\nfunction fillSize4(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n    buffer[++start] = defaultsHolder3;\n}\n/**\n * This is a quick lookup to find the correct filler method for the given attribute size\n */\nvar fillMethodLookUp = (_a = {},\n    _a[AttributeSize.ONE] = fillSize1,\n    _a[AttributeSize.TWO] = fillSize2,\n    _a[AttributeSize.THREE] = fillSize3,\n    _a[AttributeSize.FOUR] = fillSize4,\n    _a);\nvar updateBufferLookUp = {\n    1: updateBuffer1,\n    2: updateBuffer2,\n    3: updateBuffer3,\n    4: updateBuffer4,\n    5: updateBuffer5,\n    6: updateBuffer6,\n    7: updateBuffer7,\n};\nfunction orientation(p1, p2, p3) {\n    var val = (p2.y - p1.y) * (p3.x - p2.x) - (p2.x - p1.x) * (p3.y - p2.y);\n    if (val === 0) {\n        return TriangleOrientation.DEGENERATE;\n    }\n    return (val > 0) ? TriangleOrientation.CW : TriangleOrientation.CCW;\n}\n/**\n * This provides methods for handling common buffer tasks such as construction\n * and population.\n */\nvar BufferUtil = (function () {\n    function BufferUtil() {\n    }\n    /**\n     * This places our updateBuffer into a mode where the updates start at index 0 of the\n     * buffer. Subsequent calls will start where the previous call left off. This lets\n     * you stream in updates to the buffer rather than just update the entire buffer\n     * all at once.\n     */\n    BufferUtil.beginUpdates = function () {\n        isStreamUpdatingRegister = true;\n        lastBatchRegister = 0;\n    };\n    /**\n     * This stops updates streaming into the buffers and makes it where an update\n     * will always just start at the beginning of the buffer.\n     */\n    BufferUtil.endUpdates = function () {\n        var totalBatches = lastBatchRegister;\n        isStreamUpdatingRegister = false;\n        lastBatchRegister = 0;\n        return totalBatches;\n    };\n    /**\n     * It is often needed to examine a given buffer and see how the triangles are packed in.\n     * This is a common debugging need and will speed up debugging significantly.\n     *\n     * @param {IBufferItems<T, U>} bufferItems This is the buffer whose structure we want\n     *                                         to examine.\n     */\n    BufferUtil.examineBuffer = function (bufferItems, message, debugNamespace) {\n        // Get the appropriate debug namespace\n        var debugBuffer = debugGenerator(debugNamespace);\n        // Quick quit if the debugger is not enabled\n        if (!debugBuffer.enabled) {\n            return;\n        }\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // Get the attributes by name out of the three js buffer\n        var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n        // Get the raw number buffers\n        var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n        // This will store all of the examined triangles for easy viewing\n        var triangles = [];\n        if (bufferItems.system.drawMode === three_1.TrianglesDrawMode) {\n            var currentVertex_1 = 0;\n            var attrSize_1 = 0;\n            var currentIndex_1 = 0;\n            var length_1 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_1 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_2 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_1 = attr.size + 1;\n                        currentIndex_1 = currentVertex_1 * attrSize_1;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_1, currentIndex_1 + attrSize_1);\n                    });\n                    // Move to the next vertex\n                    currentVertex_1++;\n                };\n                // Each new triangle is a culmination of three vertices which are packed in\n                // The buffer with no vertex sharing\n                for (var i = 0; i < 3; ++i) {\n                    _loop_2(i);\n                }\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_1 < length_1) {\n                _loop_1();\n            }\n        }\n        else if (bufferItems.system.drawMode === three_1.TriangleStripDrawMode) {\n            var currentVertex_2 = 0;\n            var attrSize_2 = 0;\n            var currentIndex_2 = 0;\n            var length_2 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_3 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_4 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_2 = attr.size + 1;\n                        currentIndex_2 = currentVertex_2 * attrSize_2;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_2, currentIndex_2 + attrSize_2);\n                    });\n                    // Move to the next vertex\n                    currentVertex_2++;\n                };\n                // Each new triangle is three vertices, where the first two are shared with\n                // The previous triangle's last two vertices\n                for (var i = 0; i < 3; ++i) {\n                    _loop_4(i);\n                }\n                // Go back two vertices as the next tri will use them + the next vertex to\n                // Make the next triangle\n                currentVertex_2 -= 2;\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_2 < length_2) {\n                _loop_3();\n            }\n        }\n        // Log the debug info to the console using the debug utility\n        debugBuffer(message, {\n            drawRange: buffer.drawRange,\n            triangles: triangles,\n        }, bufferItems.system.material.uniforms);\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with constructing a new buffer\n     * such as applying the name, generating the buffer, and populating default values to\n     * that buffer.\n     *\n     * @param {number} numVertices The number of vertices this buffer will have\n     * @param {IAttributeInfo[]} attributes A description of each attribute in the buffer\n     *\n     * @returns {BufferGeometry} The newly made buffer\n     */\n    BufferUtil.makeBuffer = function (numVertices, attributes) {\n        var iMax = attributes.length;\n        var geometry = new three_1.BufferGeometry();\n        for (var i = 0; i < iMax; ++i) {\n            var attribute = attributes[i];\n            var attributeSize = attribute.size + 1;\n            var buffer = new Float32Array(attributeSize * numVertices);\n            var fillMethod = fillMethodLookUp[attribute.size];\n            var name_1 = attribute.name;\n            // We set up our default value registers before executing the fill method\n            applyDefaultsHolders(attribute.defaults);\n            // Fill our buffer with the indicated default values\n            for (var k = 0; k < numVertices; ++k) {\n                fillMethod(buffer, k * attributeSize);\n            }\n            // Apply the buffer to our geometry buffer\n            geometry.addAttribute(name_1, new three_1.BufferAttribute(buffer, attributeSize));\n            debug('Made Buffer Attribute:', name_1, attributeSize);\n        }\n        return geometry;\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with updating a buffer. You specify how many vertices\n     * to update in a batch and you specify how many batches are present.\n     *\n     * Batches are used to represent your full shape object that is being loaded from the cpu:\n     *\n     * IE- you have a rectangle object you wish to update in your buffer. This takes around 6 vertices typically\n     * so you make your vertexBatch 6 and the numBatches the number of quads you need to update in the buffer.\n     *\n     * You then provide an accessor which aids in pointing to the buffer items that need updating. The accessor has\n     * variable arguments depending on the attributes you inject in.\n     *\n     * If you have attributes like:\n     * [\n     *  {name: position, size: AttributeSize.Three},\n     *  {name: color, size: AttributeSize.Four},\n     * ]\n     *\n     * Then your accessor will be delievered arguments in this form:\n     *\n     * function(batchIndex: number, positionBuffer: number[], positionIndex: number, colorBuffer: number[], colorIndex: number)\n     *\n     * NOTE: The params handed in ARE ORDERED BY the attributes injected in\n     *\n     * You then can update the buffers based on the index information handed alongside each buffer\n     *\n     * @param {T[]} newData The new data that is going to be injected into the buffer. This must be a NEW REFERENCE of data\n     *                      that does NOT match the reference in the bufferItems.currentData. So newData !== bufferItems.currentData\n     *                      in order for the update to occur.\n     * @param {BufferGeometry} bufferItems The buffer related items used to identify how to update the buffer\n     * @param {number} vertexBatch The number of vertices to include per update batch\n     * @param {number} numBatches The number of batches to execute\n     * @param {Function} updateAccessor The accessor for performing the data update to the buffer\n     * @param {boolean} force This bypasses the typical checks that determines if the buffer SHOULD update.\n     *\n     * @return {boolean} True if the buffer was updated with this call\n     */\n    BufferUtil.updateBuffer = function (newData, bufferItems, vertexBatch, numBatches, updateAccessor, force) {\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // If we passed the data check on the first pass, then all future streamed updates\n        // Should pass as well\n        var testPerformed = lastBatchRegister !== 0 && isStreamUpdatingRegister;\n        // We check if there is a reference change in the data indicating a buffer push needs to happen\n        if ((newData !== undefined && newData !== bufferItems.currentData) || testPerformed || force) {\n            // If we aren't streaming updates, then we always start at the beginning\n            if (!isStreamUpdatingRegister) {\n                // Reset out last batch register as this is an entriely new update\n                lastBatchRegister = 0;\n            }\n            // Flag the newly rendered data as our current data\n            bufferItems.currentData = newData;\n            // Get the attributes by name out of the three js buffer\n            var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n            // Get the raw number buffers\n            var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n            // Determine what kind of buffer pointer increments we will need\n            var incrementValues = attributes.map(function (attr) { return (attr.size + 1) * vertexBatch; });\n            // Apply all data needed to any registers we need\n            applyAttributeRegisters(attributeBuffers, incrementValues);\n            // Get the method that will perform the update based on number of attributes\n            var updateMethod = updateBufferLookUp[attributes.length];\n            // Execute the update method\n            updateMethod(numBatches + lastBatchRegister, updateAccessor);\n            // Flag each buffer attribute for needing an update\n            bufferAttributes.forEach(function (attr) { return attr.needsUpdate = true; });\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n            return true;\n        }\n        else {\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n        }\n        return false;\n    };\n    /**\n     * This makes all of the typical items used in creating and managing a buffer of items rendered to the screen\n     *\n     * @returns {IBufferItems<T>} An empty object of the particular buffer items needed\n     */\n    BufferUtil.makeBufferItems = function () {\n        return {\n            attributes: [],\n            currentData: [],\n            geometry: null,\n            system: null,\n        };\n    };\n    return BufferUtil;\n}());\nexports.BufferUtil = BufferUtil;\nvar _a;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/buffer-util.ts\n// module id = 3\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This deinfes the minimal set of methods that should be implemented to create\n * a reusable buffer object that can be initialized and populated.\n */\nvar BaseBuffer = (function () {\n    function BaseBuffer() {\n    }\n    /**\n     * This initializes the buffer and generates the buffer items object.\n     */\n    BaseBuffer.prototype.init = function (material, unitCount) {\n        // To be implemented by a subclass\n    };\n    /**\n     * This updates the buffer by providing the shape buffer needed to update\n     * the internal buffer items\n     *\n     * @param {T[]} shapeBuffer The shape buffer containing all of the shape data\n     *                          to be placed into the buffer.\n     *\n     * @return {boolean} Retrusn true if this pushed up any updates\n     */\n    BaseBuffer.prototype.update = function (shapeBuffer) {\n        // To be implemented by a subclass\n        return false;\n    };\n    return BaseBuffer;\n}());\nexports.BaseBuffer = BaseBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/base-buffer.ts\n// module id = 4\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"./bounds\");\n/**\n * Represents a line with a given slope\n */\nvar Line = (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates a new line that passes through the two specified points\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    function Line(p1, p2) {\n        var _this = _super.call(this, 0, 1, 1, 0) || this;\n        _this.setPoints(p1, p2);\n        return _this;\n    }\n    /**\n     * This calculates the distance to a point from the provided line\n     * BUT this ALSO retains the directionality of that distance. So one side of\n     * the line will be positive while the other negative\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.directionTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line, but we won't take the absolute to retain the direction\n        return this.perpendicular.x * vector.x + this.perpendicular.y * vector.y;\n    };\n    /**\n     * This calculates the distance to a point from the provided line\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.distanceTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line\n        return Math.abs(this.perpendicular.x * vector.x +\n            this.perpendicular.y * vector.y);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {Array} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    Line.getClosest = function (lines, p) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(p);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This sets the two endpoints for this line and recalculates the bounds\n     * of the line accordingly\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    Line.prototype.setPoints = function (p1, p2) {\n        this.x = p1.x - 1;\n        this.y = p1.y - 1;\n        this.width = 2;\n        this.height = 2;\n        this.encapsulatePoint(p2);\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        this.slope = dy / dx;\n        this.p1 = p1;\n        this.p2 = p2;\n        this.magnitude = Math.sqrt(dx * dx + dy * dy);\n        this.perpendicular = {\n            x: this.p2.y - this.p1.y,\n            y: -(this.p2.x - this.p1.x),\n        };\n        // Normalize the perpendicular line\n        var mag = Math.sqrt(this.perpendicular.x * this.perpendicular.x +\n            this.perpendicular.y * this.perpendicular.y);\n        this.perpendicular.x /= mag;\n        this.perpendicular.y /= mag;\n    };\n    return Line;\n}(bounds_1.Bounds));\nexports.Line = Line;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/line.ts\n// module id = 5\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} p1 The start of the direction\n     * @param {IPoint} p2 The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.getDirection = function (p1, p2, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.getDirection(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/point.ts\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ramda\"\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"d3-color\"\n// module id = 8\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar AtlasTexture = (function () {\n    /**\n     * Generates a new atlas texture that points to a specific image resource.\n     *\n     * @param path The path to the image resource to be loaded into the atlas.\n     */\n    function AtlasTexture(path, label) {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        this.imagePath = path;\n        this.label = label;\n        // Let the label keep track of it's rasterization\n        if (label) {\n            this.label.rasterizedLabel = this;\n        }\n    }\n    return AtlasTexture;\n}());\nexports.AtlasTexture = AtlasTexture;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/atlas-texture.ts\n// module id = 9\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FrameInfo = (function () {\n    function FrameInfo() {\n    }\n    /** Contains the time the previous frame started */\n    FrameInfo.lastFrameTime = Date.now();\n    /** Contains a theoretical approximation the next frame will start */\n    FrameInfo.nextFrameTime = Date.now();\n    /** Contains how many frames have been played for a given WebGLSurface context */\n    FrameInfo.framesPlayed = new Map();\n    return FrameInfo;\n}());\nexports.FrameInfo = FrameInfo;\n/**\n * This gets an integer time value that can fit within an attribute. Be aware,\n * this only supports up to 7 digits of the millisecond time.\n */\nfunction getAttributeCurrentTime() {\n    var time = FrameInfo.lastFrameTime / 1E7;\n    return Math.floor((time - Math.floor(time)) * 1E7);\n}\nexports.getAttributeCurrentTime = getAttributeCurrentTime;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/frame-info.ts\n// module id = 10\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Does a linear easing of a value\n *\n * @param {number} t The time elapsed: 0 to d\n * @param {number} s The start value\n * @param {number} c The change in value\n * @param {number} d The duration of the change\n *\n * @returns A number linearly progressing from s to s+c depending on the value of\n *          t in relation to d\n */\nfunction linear(t, s, c, d) {\n    return c * t / d + s;\n}\nexports.linear = linear;\nfunction easeInQuad(t, b, c, d) {\n    return c * (t /= d) * t + b;\n}\nexports.easeInQuad = easeInQuad;\nfunction easeOutQuad(t, b, c, d) {\n    return -c * (t /= d) * (t - 2) + b;\n}\nexports.easeOutQuad = easeOutQuad;\nfunction easeInOutQuad(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t + b;\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\n}\nexports.easeInOutQuad = easeInOutQuad;\nfunction easeInCubic(t, b, c, d) {\n    return c * (t /= d) * t * t + b;\n}\nexports.easeInCubic = easeInCubic;\nfunction easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n}\nexports.easeOutCubic = easeOutCubic;\nfunction easeInOutCubic(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n}\nexports.easeInOutCubic = easeInOutCubic;\nfunction easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n}\nexports.easeInQuart = easeInQuart;\nfunction easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n}\nexports.easeOutQuart = easeOutQuart;\nfunction easeInOutQuart(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t + b;\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n}\nexports.easeInOutQuart = easeInOutQuart;\nfunction easeInQuint(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n}\nexports.easeInQuint = easeInQuint;\nfunction easeOutQuint(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n}\nexports.easeOutQuint = easeOutQuint;\nfunction easeInOutQuint(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n}\nexports.easeInOutQuint = easeInOutQuint;\nfunction easeInSine(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n}\nexports.easeInSine = easeInSine;\nfunction easeOutSine(t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n}\nexports.easeOutSine = easeOutSine;\nfunction easeInOutSine(t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n}\nexports.easeInOutSine = easeInOutSine;\nfunction easeInExpo(t, b, c, d) {\n    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nexports.easeInExpo = easeInExpo;\nfunction easeOutExpo(t, b, c, d) {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nexports.easeOutExpo = easeOutExpo;\nfunction easeInOutExpo(t, b, c, d) {\n    if (t === 0)\n        return b;\n    if (t === d)\n        return b + c;\n    if ((t /= d / 2) < 1)\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n}\nexports.easeInOutExpo = easeInOutExpo;\nfunction easeInCirc(t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n}\nexports.easeInCirc = easeInCirc;\nfunction easeOutCirc(t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n}\nexports.easeOutCirc = easeOutCirc;\nfunction easeInOutCirc(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n}\nexports.easeInOutCirc = easeInOutCirc;\nfunction easeInElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n}\nexports.easeInElastic = easeInElastic;\nfunction easeOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n}\nexports.easeOutElastic = easeOutElastic;\nfunction easeInOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return b + c;\n    if (!p)\n        p = d * (.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    if (t < 1)\n        return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n}\nexports.easeInOutElastic = easeInOutElastic;\nfunction easeInBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n}\nexports.easeInBack = easeInBack;\nfunction easeOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n}\nexports.easeOutBack = easeOutBack;\nfunction easeInOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    if ((t /= d / 2) < 1)\n        return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n}\nexports.easeInOutBack = easeInOutBack;\nfunction easeInBounce(t, b, c, d) {\n    return c - easeOutBounce(d - t, 0, c, d) + b;\n}\nexports.easeInBounce = easeInBounce;\nfunction easeOutBounce(t, b, c, d) {\n    if ((t /= d) < (1 / 2.75)) {\n        return c * (7.5625 * t * t) + b;\n    }\n    else if (t < (2 / 2.75)) {\n        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\n    }\n    else if (t < (2.5 / 2.75)) {\n        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\n    }\n    else {\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\n    }\n}\nexports.easeOutBounce = easeOutBounce;\nfunction easeInOutBounce(t, b, c, d) {\n    if (t < d / 2)\n        return easeInBounce(t * 2, 0, c, d) * .5 + b;\n    return easeOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b;\n}\nexports.easeInOutBounce = easeInOutBounce;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/easing.ts\n// module id = 11\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar point_1 = require(\"../primitives/point\");\nvar easing_1 = require(\"./easing\");\n/**\n * This enum is just a common way to define interpolation types\n */\nvar InterpolationMethod;\n(function (InterpolationMethod) {\n    InterpolationMethod[InterpolationMethod[\"BEZIER2\"] = 0] = \"BEZIER2\";\n    InterpolationMethod[InterpolationMethod[\"BEZIER3\"] = 1] = \"BEZIER3\";\n    InterpolationMethod[InterpolationMethod[\"CIRCULAR\"] = 2] = \"CIRCULAR\";\n})(InterpolationMethod = exports.InterpolationMethod || (exports.InterpolationMethod = {}));\n/**\n * This calculates a quadratic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier2(t, p1, p2, c1) {\n    var t2 = t * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    return {\n        x: p1.x * mt2 + c1.x * 2 * mt * t + p2.x * t2,\n        y: p1.y * mt2 + c1.y * 2 * mt * t + p2.y * t2,\n    };\n}\nexports.bezier2 = bezier2;\n/**\n * This calculates a cubic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The first control point of the curve\n * @param {IPoint} c2 The second control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier3(t, p1, p2, c1, c2) {\n    var t2 = t * t;\n    var t3 = t2 * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    var mt3 = mt2 * mt;\n    return {\n        x: p1.x * mt3 + 3 * c1.x * mt2 * t + 3 * c2.x * mt * t2 + p2.x * t3,\n        y: p1.y * mt3 + 3 * c1.y * mt2 * t + 3 * c2.y * mt * t2 + p2.y * t3,\n    };\n}\nexports.bezier3 = bezier3;\n/**\n * This calculates a point along a path defined as a circular path which is a\n * path moving along the edge of a circle from one point to the next. This will\n * even allow for moving along a circle with a growing radius.\n *\n * @param {number} t The 0 - 1 time interval for the part of the path we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point, or more importantly, the center of the circle\n * @param {EasingMethod} radiusEasing Default easing for the radius growing is linear.\n *                                    Insert a custom easing method to change this.\n *\n * @returns {IPoint}\n */\nfunction circular(t, p1, p2, c1, radiusEasing) {\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(c1, p1);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(c1, p2);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Ensure our theta's are definitely between 0 to Math.PI * 2 after the atan\n    // Calculation\n    if (theta1 < 0)\n        theta1 += Math.PI * 2;\n    if (theta2 < 0)\n        theta2 += Math.PI * 2;\n    var dTheta = theta2 - theta1;\n    // We ALWAYS want our path to be the shortest around the circle\n    if (dTheta > Math.PI) {\n        dTheta = theta1 - theta2;\n    }\n    // We use this to calculate how far we are between the two points in radians\n    // Based on the time parameter provided for the interpolation\n    dTheta *= t;\n    // We must have the radial distance of both points to properly calculate\n    // An easing between the two radii\n    var radius1 = point_1.Point.getDistance(p1, c1);\n    var radius2 = point_1.Point.getDistance(p2, c1);\n    // We control how the radius eases out for the path, which is determined by\n    // The easing method, otherwise, it just linearly radiates out\n    var radius = (radiusEasing || easing_1.linear)(t, radius1, radius2 - radius1, 1.0);\n    return {\n        x: Math.cos(theta1 + dTheta) * radius + c1.x,\n        y: Math.sin(theta1 + dTheta) * radius + c1.y,\n    };\n}\nexports.circular = circular;\nexports.pickInterpolation = (_a = {},\n    _a[InterpolationMethod.BEZIER2] = bezier2,\n    _a[InterpolationMethod.BEZIER3] = bezier3,\n    _a[InterpolationMethod.CIRCULAR] = circular,\n    _a);\nvar _a;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/interpolation.ts\n// module id = 12\n// module chunks = 0","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = require(\"d3-color\");\nvar three_1 = require(\"three\");\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar pack_node_1 = require(\"../../util/pack-node\");\nvar label_1 = require(\"../shape/label\");\nvar atlas_texture_1 = require(\"./atlas-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar debugLabels = require('debug')('webgl-surface:Labels');\nvar ZERO_IMAGE = {\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    label: new label_1.Label({ text: ' ' }),\n    pixelHeight: 0,\n    pixelWidth: 0,\n};\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = (function () {\n    /**\n     * Generates a new manager for atlas'. This will create and destroy atlas' and\n     * ensure they have the correct settings applied. A manager will also aid in\n     * packing images into the atlas indicated.\n     *\n     * @param {number} width The width of all atlas' generated\n     * @param {number} height The height of all atlas' generated\n     */\n    function AtlasManager(width, height) {\n        /** Gives a reference of all of the images loaded for the atlas */\n        this.atlasImages = {};\n        /** Stores the current mapping of the atlas */\n        this.atlasMap = {};\n        /** Stores all of the textures that are our atlases */\n        this.atlasTexture = {};\n        this.textureWidth = width;\n        this.textureHeight = height;\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param atlasName The unique name of the atlas so it can be retrieved/referenced easily\n     * @param images The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (atlasName, images, colors) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlasMap, canvas, _i, images_1, image, image, texture, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        atlasMap = new pack_node_1.PackNode(0, 0, this.textureWidth, this.textureHeight);\n                        // Create the mapping element for the new atlas so we can track insertions / deletions\n                        this.atlasMap[atlasName] = atlasMap;\n                        // Make a listing of images that is within the atlas\n                        this.atlasImages[atlasName] = [];\n                        canvas = document.createElement('canvas').getContext('2d');\n                        // Size the canvas to the atlas size\n                        canvas.canvas.width = this.textureWidth;\n                        canvas.canvas.height = this.textureHeight;\n                        if (!images) return [3 /*break*/, 4];\n                        _i = 0, images_1 = images;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < images_1.length)) return [3 /*break*/, 4];\n                        image = images_1[_i];\n                        return [4 /*yield*/, this.draw(image, atlasName, canvas)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        if (!colors) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.drawColors(colors, atlasName, canvas)];\n                    case 5:\n                        image = _b.sent();\n                        // Add the dummy texture info as an image to our list of images\n                        if (image) {\n                            this.atlasImages[atlasName].push(image);\n                        }\n                        _b.label = 6;\n                    case 6:\n                        texture = new three_1.Texture(canvas.canvas);\n                        texture.premultiplyAlpha = true;\n                        texture.generateMipmaps = true;\n                        // Store the texture as the atlas.\n                        this.atlasTexture[atlasName] = texture;\n                        // Store the images as images within the atlas\n                        if (images) {\n                            (_a = this.atlasImages[atlasName]).push.apply(_a, images);\n                        }\n                        debug('Atlas Created-> texture: %o mapping: %o images: %o', texture, atlasMap, images);\n                        return [2 /*return*/, texture];\n                }\n            });\n        });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        if (this.atlasTexture[atlasName]) {\n            this.atlasTexture[atlasName].dispose();\n            this.atlasTexture[atlasName] = null;\n        }\n        if (this.atlasMap[atlasName]) {\n            this.atlasMap[atlasName].destroy();\n            this.atlasMap[atlasName] = null;\n        }\n        if (this.atlasImages[atlasName]) {\n            var none_1 = { x: 0, y: 0 };\n            this.atlasImages[atlasName].forEach(function (image) {\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                image.pixelHeight = 0;\n                image.atlasBL = none_1;\n                image.atlasBR = none_1;\n                image.atlasTL = none_1;\n                image.atlasTR = none_1;\n            });\n            this.atlasImages[atlasName] = null;\n        }\n    };\n    AtlasManager.prototype.isValidImage = function (image) {\n        var isValid = false;\n        if (image && (image.imagePath || (image.label && image.label.text))) {\n            if (image.pixelWidth && image.pixelHeight) {\n                isValid = true;\n            }\n        }\n        return isValid;\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param image The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (image, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var loadedImage, rect, dimensions, node, insertedNode, ux, uy, uw, uh, atlasDimensions;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Validate the index\n                        if (!this.atlasMap[atlasName]) {\n                            debug('Can not load image, invalid Atlas Name: %o for atlasMaps: %o', atlasName, this.atlasMap);\n                            return [2 /*return*/, false];\n                        }\n                        return [4 /*yield*/, this.loadImage(image)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Make sure at this point the image knows it is not affiliated with an atlas\n                        // If something goes wrong with loading or insertting this image, then a null\n                        // Atlas value will indicate the image can not be used appropriately\n                        image.atlasReferenceID = null;\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && this.isValidImage(image)) {\n                            debug('Image loaded: %o', image.imagePath);\n                            rect = new bounds_1.Bounds(0, image.pixelWidth, image.pixelHeight, 0);\n                            dimensions = {\n                                first: image,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            node = this.atlasMap[atlasName];\n                            insertedNode = node.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                if (image.label) {\n                                    debugLabels('Atlas location determined. PackNode: %o Dimensions: %o', insertedNode, dimensions);\n                                }\n                                // Apply the image to the node\n                                insertedNode.nodeImage = image;\n                                ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                                uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                                uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                                uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                                debugLabels('uy is %o', uy);\n                                atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                                image.atlasReferenceID = atlasName;\n                                image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                                image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                                // Now draw the image to the indicated canvas\n                                canvas.drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit image into atlas \" + image.imagePath);\n                                image = this.setDefaultImage(image, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default image\n                            console.error(\"Could not load image \" + image.imagePath);\n                            image = this.setDefaultImage(image, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders a list of colors to the canvas. This using the same packing\n     * algorithm as any image so the rendering is placed correctly or determines\n     * if enough space is not available.\n     *\n     * @param {AtlasColor[]} colors The list of colors to be rendered to the atlas\n     * @param {string} atlasName The name of the atlas being rendered to\n     * @param {CanvasRenderingContext2D} canvas The canvas of the atlas being rendered to\n     *\n     * @returns {Promise<boolean>} Resolves to true if the operation was successful\n     */\n    AtlasManager.prototype.drawColors = function (colors, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var colorWidth, colorHeight, maxPerRow, rowWidth, rowCount, colCount, renderHeight, dimensions, node, insertedNode, image, ux, uy, uw, uh, atlasDimensions, renderSpace, startX, startY, nextX, nextY, beginX, beginY, col, row, _i, colors_1, color, _a, r, g, b;\n            return __generator(this, function (_b) {\n                debug('Finding space for colors on the atlas: %o', colors);\n                colorWidth = 2;\n                colorHeight = 2;\n                maxPerRow = 1024 / colorWidth;\n                rowWidth = Math.min(this.textureWidth, maxPerRow * colorWidth);\n                rowCount = Math.ceil((colors.length * colorWidth) / rowWidth);\n                colCount = Math.ceil(rowWidth / colorWidth);\n                renderHeight = rowCount * colorHeight;\n                dimensions = {\n                    // Since the algorithm requires something to fill this slot, just make a\n                    // Dummy object\n                    first: new atlas_texture_1.AtlasTexture(null, null),\n                    // Set the dimensions we calculated for the space our colors will take up\n                    // Within the atlas\n                    second: new bounds_1.Bounds(0, rowWidth, renderHeight, 0),\n                };\n                // Auto add a buffer in\n                dimensions.second.width += 1;\n                dimensions.second.height += 1;\n                node = this.atlasMap[atlasName];\n                insertedNode = node.insert(dimensions);\n                // If the result was NULL we did not successfully insert the image into any map\n                if (insertedNode) {\n                    debug('Atlas location determined for colors: %o', insertedNode);\n                    image = insertedNode.nodeImage = dimensions.first;\n                    ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                    uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                    uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                    uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                    atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                    image.atlasReferenceID = atlasName;\n                    image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                    image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                    renderSpace = insertedNode.nodeDimensions;\n                    startX = renderSpace.x;\n                    startY = renderSpace.y;\n                    nextX = colorWidth / this.textureWidth;\n                    nextY = -colorHeight / this.textureHeight;\n                    beginX = (startX / this.textureWidth) + (nextX / 2.0);\n                    beginY = 1.0 - (startY / this.textureHeight) + (nextY / 2.0);\n                    col = 0;\n                    row = 0;\n                    // Loop through each color, establish metrics, draw to the atlas\n                    for (_i = 0, colors_1 = colors; _i < colors_1.length; _i++) {\n                        color = colors_1[_i];\n                        // Staore the info needed to make the color referenceable again\n                        color.atlasReferenceID = atlasName;\n                        color.colorIndex = col + (row * colCount);\n                        color.colorsPerRow = colCount;\n                        // The location of the middle of the first color\n                        color.firstColor = {\n                            x: beginX,\n                            y: beginY,\n                        };\n                        color.nextColor = {\n                            x: nextX,\n                            y: nextY,\n                        };\n                        _a = color.color, r = _a.r, g = _a.g, b = _a.b;\n                        // Draw the color to the canvas\n                        canvas.fillStyle = \"rgba(\" + Math.round(r * 255.0) + \", \" + Math.round(g * 255.0) + \", \" + Math.round(b * 255.0) + \", \" + color.opacity + \")\";\n                        canvas.fillRect(col * colorWidth + startX, row * colorHeight + startY, colorWidth, colorHeight);\n                        col++;\n                        if (col === colCount) {\n                            col = 0;\n                            row++;\n                        }\n                    }\n                    // We have finished inserting\n                    return [2 /*return*/, image];\n                }\n                else {\n                    // Log an error\n                    throw new Error('Could not fit colors into atlas');\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.atlasTexture[atlasName];\n    };\n    /**\n     * This reads the input path and loads the image specified by the path\n     *\n     * @param {AtlasTexture} texture This is an atlas texture with the path set\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (texture) {\n        if (texture.imagePath) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    texture.pixelWidth = image.width;\n                    texture.pixelHeight = image.height;\n                    texture.aspectRatio = image.width / image.height;\n                    resolve(image);\n                };\n                image.onerror = function () {\n                    resolve(null);\n                };\n                image.src = texture.imagePath;\n            });\n        }\n        else if (texture.label) {\n            return new Promise(function (resolve, reject) {\n                var label = texture.label;\n                var labelSize = label.getSize();\n                var canvas = document.createElement('canvas');\n                var ctx = canvas.getContext('2d');\n                // Set the dimensions of the canvas/texture space we will be using to rasterize\n                // The label. Use the label's rasterization controls to aid in rendering the label\n                canvas.width = labelSize.width + texture.label.rasterizationPadding.width;\n                canvas.height = labelSize.height + texture.label.rasterizationPadding.height;\n                if (ctx) {\n                    var fontSize = label.fontSize;\n                    var color = d3_color_1.rgb(label.color.base.color.r * 255, label.color.base.color.g * 255, label.color.base.color.b * 255, label.color.base.opacity);\n                    ctx.font = label.makeCSSFont(fontSize);\n                    ctx.textAlign = label.textAlign;\n                    ctx.textBaseline = label.textBaseline;\n                    ctx.fillStyle = color.toString();\n                    // Render the label to the canvas/texture space. This utilizes the label's\n                    // Rasterization metrics to aid in getting a clean render.\n                    ctx.fillText(label.text, texture.label.rasterizationOffset.x, texture.label.height / 2 + texture.label.rasterizationOffset.y);\n                    var image_1 = new Image();\n                    image_1.onload = function () {\n                        // Here we use the canvas dimensions and NOT the image dimensions\n                        // As the image dimensions are unreliable here when setting the src\n                        // To a data url\n                        texture.pixelWidth = image_1.width;\n                        texture.pixelHeight = image_1.height;\n                        texture.aspectRatio = image_1.width / image_1.height;\n                        debugLabels('Applying size based on rasterization to the Label: w: %o h: %o', image_1.width, image_1.height);\n                        label.setSize({\n                            height: image_1.height,\n                            width: image_1.width,\n                        });\n                        resolve(image_1);\n                    };\n                    image_1.onerror = function () {\n                        resolve(null);\n                    };\n                    image_1.src = canvas.toDataURL('image/png');\n                }\n            });\n        }\n        return Promise.resolve(null);\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/atlas-manager.ts\n// module id = 13\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds(x, x + width, y, y - height);\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        this.nodeImage = null;\n        if (this.child[0]) {\n            this.child[0].destroy();\n        }\n        if (this.child[1]) {\n            this.child[1].destroy();\n        }\n        this.child[0] = undefined;\n        this.child[1] = undefined;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        if (this.child[0] && !this.child[0].nodeImage) {\n            return !this.child[0].isLeaf;\n        }\n        if (this.child[1] && !this.child[1].nodeImage) {\n            return !this.child[1].isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        if (!this.isLeaf) {\n            // Try inserting into first child\n            var newNode = this.child[0].insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return this.child[1].insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/pack-node.ts\n// module id = 14\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = require(\"ramda\");\nvar rotateable_quad_1 = require(\"../../primitives/rotateable-quad\");\nvar sprite_1 = require(\"../texture/sprite\");\nvar measurement = new sprite_1.Sprite(200, 200, 1, 1);\nvar Label = (function (_super) {\n    __extends(Label, _super);\n    /**\n     * Creates an instance of Label.\n     *\n     * @param {Partial<Label<T>>} [options={}]\n     */\n    function Label(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, { x: 0, y: 1 }, { width: 1, height: 1 }, 0, rotateable_quad_1.AnchorPosition.TopLeft) || this;\n        _this.depth = 0;\n        _this.direction = 'inherit';\n        _this.font = 'serif';\n        _this.fontSize = 10;\n        _this.fontWeight = 400;\n        _this.maxWidth = undefined;\n        _this.text = '';\n        _this.id = '';\n        _this.textAlign = 'start';\n        _this.textBaseline = 'alphabetic';\n        _this.zoomable = false;\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to offset the rasterization if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationOffset = { x: 0, y: 12 };\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to pad the rasterization space if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationPadding = { width: 0, height: 0 };\n        // Set props\n        Object.assign(_this, options);\n        // Make sure our dimensions are set\n        _this.setFontSize(options.fontSize || 12);\n        return _this;\n    }\n    Object.defineProperty(Label.prototype, \"baseLabel\", {\n        get: function () {\n            return this._baseLabel;\n        },\n        set: function (value) {\n            this._baseLabel = value;\n            this.text = value.text;\n            this.fontSize = value.fontSize;\n            this.font = value.font;\n            this.textAlign = value.textAlign;\n            this.textBaseline = value.textBaseline;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Label.prototype, \"rasterizedLabel\", {\n        /**\n         * This getter ensures the rasterized label retrieved is either this labels own rasterization\n         * or from a base.\n         */\n        get: function () {\n            if (this.baseLabel) {\n                return this.baseLabel.rasterizedLabel;\n            }\n            return this._rasterizedLabel;\n        },\n        set: function (value) {\n            this._rasterizedLabel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies all of the properties of a label and makes this label use them\n     *\n     * @param {Label} label The labels whose properties we wish to copy\n     */\n    Label.prototype.copyLabel = function (label) {\n        // Assign the properties of the other label to this\n        // Specifically, ONLY label properties\n        Object.assign(this, ramda_1.omit(['x', 'y', 'width', 'height'], label));\n        // Use this to set the text to make sure all of the metrics are re-calculated\n        this.setText(label.text);\n    };\n    /**\n     * This gets the actual text this label is capable of rendering\n     */\n    Label.prototype.getText = function () {\n        if (this._baseLabel) {\n            return this._baseLabel.getText();\n        }\n        return this.text;\n    };\n    /**\n     * Takes all of the current settings and makes a CSS font string\n     */\n    Label.prototype.makeCSSFont = function (fontSize) {\n        return this.fontWeight + \" \" + (fontSize || this.fontSize) + \"px \" + this.font;\n    };\n    /**\n     * Change the position this text is rendered to\n     *\n     * @param x X world coordinate\n     * @param y Y world coordinate\n     */\n    Label.prototype.position = function (x, y) {\n        this.x = x;\n        this.y = y;\n    };\n    /**\n     * This sets the font size for the label based on the base text dimensions\n     *\n     * @param {number} fontSize\n     */\n    Label.prototype.setFontSize = function (fontSize) {\n        var lbl = this.getText();\n        var size = this.getSize();\n        var width = size.width;\n        var height = size.height;\n        if (this.baseLabel) {\n            var baseSize = this.baseLabel.getSize();\n            var scale = fontSize / this.baseLabel.fontSize;\n            height = baseSize.height * scale;\n            width = baseSize.width * scale;\n        }\n        else {\n            measurement.context.font = this.makeCSSFont();\n            var size_1 = measurement.context.measureText(lbl);\n            // Set our properties based on the calculated size\n            height = fontSize;\n            width = size_1.width;\n        }\n        this.fontSize = fontSize;\n        this.setSize({ width: width, height: height });\n    };\n    /**\n     * Change the text and the calculated bounding box for this label\n     */\n    Label.prototype.setText = function (lbl) {\n        this.text = lbl;\n        this.setFontSize(this.fontSize);\n    };\n    Label.prototype.update = function () {\n        this.setFontSize(this.fontSize);\n        _super.prototype.update.call(this);\n    };\n    return Label;\n}(rotateable_quad_1.RotateableQuad));\nexports.Label = Label;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/label.ts\n// module id = 15\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar bounds_1 = require(\"./bounds\");\nvar AnchorPosition;\n(function (AnchorPosition) {\n    AnchorPosition[AnchorPosition[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorPosition[AnchorPosition[\"BottomRight\"] = 1] = \"BottomRight\";\n    AnchorPosition[AnchorPosition[\"Custom\"] = 2] = \"Custom\";\n    AnchorPosition[AnchorPosition[\"Middle\"] = 3] = \"Middle\";\n    AnchorPosition[AnchorPosition[\"MiddleBottom\"] = 4] = \"MiddleBottom\";\n    AnchorPosition[AnchorPosition[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorPosition[AnchorPosition[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorPosition[AnchorPosition[\"MiddleTop\"] = 7] = \"MiddleTop\";\n    AnchorPosition[AnchorPosition[\"TopLeft\"] = 8] = \"TopLeft\";\n    AnchorPosition[AnchorPosition[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorPosition = exports.AnchorPosition || (exports.AnchorPosition = {}));\nvar anchorCalculations = (_a = {},\n    _a[AnchorPosition.BottomLeft] = function (quad) { return ({\n        x: 0,\n        y: 0,\n    }); },\n    _a[AnchorPosition.BottomRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: 0,\n    }); },\n    _a[AnchorPosition.Custom] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.Middle] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleBottom] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: 0,\n    }); },\n    _a[AnchorPosition.MiddleLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleTop] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height,\n    }); },\n    _a);\nvar RotateableQuad = (function (_super) {\n    __extends(RotateableQuad, _super);\n    /**\n     * Generates a quad\n     *\n     * @param {IPoint} location The location of the quad (it's anchorpoint will be placed here)\n     * @param {number} width The width of the quad\n     * @param {number} height The height of the quad\n     * @param {AnchorPosition} anchor The anchor location of the quad.\n     *                                Location and rotation will be relative to this.\n     */\n    function RotateableQuad(location, size, rotation, anchor) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        // Apply our properties\n        _this.setSize(size);\n        _this.setAnchor(anchor);\n        _this.setLocation(location);\n        _this.setRotation(rotation);\n        // Update the transform and the corner vertices\n        _this.update();\n        return _this;\n    }\n    /**\n     * @private\n     * Recalculates this anchor position based on the anchor type\n     *\n     * @param {AnchorPosition} anchor\n     */\n    RotateableQuad.prototype.calculateAnchor = function (anchor) {\n        this.anchor = anchorCalculations[anchor](this);\n    };\n    /**\n     * Get the base size of the quad\n     *\n     * @returns {ISize} The base size of this quad\n     */\n    RotateableQuad.prototype.getSize = function () {\n        return this.size;\n    };\n    /**\n     * Sets the specified anchor position on the quad\n     *\n     * @param {AnchorPosition} anchor This specifies an auto calculated position for the anchor\n     * @param {IPoint} custom If specified, will set a custom anchor location rather\n     *                        than the calculated version.\n     */\n    RotateableQuad.prototype.setAnchor = function (anchor, custom) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        this.anchorType = anchor;\n        // Apply the custom position if present\n        if (custom) {\n            this.anchorType = AnchorPosition.Custom;\n            this.anchor = custom;\n            return;\n        }\n        this.calculateAnchor(anchor);\n    };\n    RotateableQuad.prototype.getAnchor = function () {\n        return this.anchor;\n    };\n    RotateableQuad.prototype.getAnchorType = function () {\n        return this.anchorType;\n    };\n    /**\n     * This sets the location of this quad to a given position where the anchor\n     * point will be located on top of the location provided.\n     *\n     * @param {IPoint} location The location to place the quad\n     */\n    RotateableQuad.prototype.setLocation = function (location) {\n        this.location = location;\n    };\n    RotateableQuad.prototype.getLocation = function () {\n        return this.location;\n    };\n    /**\n     * Sets the rotation of this quad, in radians, rotated around the anchor point.\n     *\n     * @param {number} rotation The rotation of the quad\n     */\n    RotateableQuad.prototype.setRotation = function (rotation) {\n        this.rotation = rotation;\n    };\n    /**\n     * get Rotation\n     */\n    RotateableQuad.prototype.getRotation = function () {\n        return this.rotation;\n    };\n    /**\n     * get direction as a point\n     */\n    RotateableQuad.prototype.getDirection = function () {\n        var angle = this.rotation;\n        return {\n            x: Math.cos(angle),\n            y: Math.sin(angle),\n        };\n    };\n    /**\n     * Applies the size to the base\n     *\n     * @param {ISize} size The size of the base quad\n     */\n    RotateableQuad.prototype.setSize = function (size) {\n        this.size = size;\n        this.base = [\n            new three_1.Vector4(0, size.height, 0, 1),\n            new three_1.Vector4(size.width, size.height, 0, 1),\n            new three_1.Vector4(0, 0, 0, 1),\n            new three_1.Vector4(size.width, 0, 0, 1),\n        ];\n        if (this.anchorType) {\n            this.calculateAnchor(this.anchorType);\n        }\n    };\n    /**\n     * This re-calculates the transform for this quad and applies the transform to\n     * the corners.\n     */\n    RotateableQuad.prototype.update = function () {\n        // Calculate the pieces of the transformation\n        var anchorMat = new three_1.Matrix4().makeTranslation(this.anchor.x, -this.anchor.y, 0);\n        var rotationMat = new three_1.Matrix4().makeRotationZ(this.rotation);\n        var locationMat = new three_1.Matrix4().makeTranslation(this.location.x, this.location.y, 0);\n        // Compose the transform based on the pieces and apply them\n        // In the proper compositing order\n        this.transform = new three_1.Matrix4()\n            .multiply(locationMat)\n            .multiply(rotationMat)\n            .multiply(anchorMat);\n        // Apply the transform to all of our base vertices\n        this.TL = this.base[0].clone().applyMatrix4(this.transform);\n        this.TR = this.base[1].clone().applyMatrix4(this.transform);\n        this.BL = this.base[2].clone().applyMatrix4(this.transform);\n        this.BR = this.base[3].clone().applyMatrix4(this.transform);\n        // Update the bounds of this object\n        this.x = this.TL.x;\n        this.y = this.TL.y;\n        this.width = 1;\n        this.height = 1;\n        this.encapsulatePoints([this.TR, this.BL, this.BR]);\n    };\n    return RotateableQuad;\n}(bounds_1.Bounds));\nexports.RotateableQuad = RotateableQuad;\nvar _a;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/rotateable-quad.ts\n// module id = 16\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A canvas element wrapper that aids in tracking a canvas element along with\n * content scaling properties.\n *\n * @class Sprite\n */\nvar Sprite = (function () {\n    //\n    // Ctor at the top below props\n    //\n    /**\n     * Creates an instance of Sprite.\n     *\n     * @param w             The width of the context to create\n     * @param h             The height of the context to create\n     * @param contentScaleX The content scaling of the content\n     * @param contentScaleY The content scaling of the content\n     *\n     * @memberOf Sprite\n     */\n    function Sprite(w, h, contentScaleX, contentScaleY) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n        var canvas = document.createElement('canvas');\n        if (canvas) {\n            this.scaleX = contentScaleX || this.scaleX;\n            this.scaleY = contentScaleY || this.scaleY;\n            canvas.width = w * this.scaleX;\n            canvas.height = h * this.scaleY;\n            this.context = canvas.getContext('2d');\n            this.canvas = canvas;\n        }\n    }\n    /**\n     * Retrieves the content scaling of this object\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentScale = function () {\n        return {\n            x: this.scaleX,\n            y: this.scaleY,\n        };\n    };\n    /**\n     * Retrieves the size of the content ignoring scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentSize = function () {\n        return {\n            height: this.canvas.height,\n            width: this.canvas.width,\n        };\n    };\n    /**\n     * Retrieves the dimensional width of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getWidth = function () {\n        return this.canvas.width / this.scaleX;\n    };\n    /**\n     * Retrieves the dimensional height of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getHeight = function () {\n        return this.canvas.height / this.scaleY;\n    };\n    return Sprite;\n}());\nexports.Sprite = Sprite;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/sprite.ts\n// module id = 17\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e.nativeEvent;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || e.nativeEvent.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/mouse.ts\n// module id = 18\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.bounds = null;\n        this.children = [];\n        this.childrenProps = [];\n        this.depth = 0;\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds(left, right, top, bottom);\n        }\n        else {\n            this.bounds = new bounds_1.Bounds(0, 1, 1, 0);\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        this.children = null;\n        this.bounds = null;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom < minY) {\n                minY = child.bottom;\n            }\n            if (child.y > maxY) {\n                maxY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds(minX, maxX, maxY, minY));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y += 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Collects all props associated with the children. This array of props will\n     * mirror the list retrieved with gatherChildren.\n     *\n     * @param list\n     *\n     * @returns The list specified as the list paramter\n     *\n     * @memberOf Node\n     */\n    Node.prototype.gatherProps = function (list) {\n        var _this = this;\n        this.children.forEach(function (c, index) {\n            list.push(_this.childrenProps[index]);\n        });\n        if (this.nodes) {\n            this.nodes.TL.gatherProps(list);\n            this.nodes.TR.gatherProps(list);\n            this.nodes.BL.gatherProps(list);\n            this.nodes.BR.gatherProps(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        this.childrenProps = [];\n        while (allChildren.length > 0) {\n            this.doAdd(allChildren.pop());\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/quad-tree.ts\n// module id = 19\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar curved_line_1 = require(\"../../primitives/curved-line\");\nvar line_1 = require(\"../../primitives/line\");\nvar point_1 = require(\"../../primitives/point\");\n/**\n * This defines a drawable curved line shape. It contains the information necessary\n * to efficiently render the line.\n *\n * @export\n * @class CurvedLineShape\n * @extends {CurvedLine<T>}\n * @template T An associated data type that can be linked to this shape to make data retrieval from interacting\n *             with the shape easier.\n */\nvar CurvedLineShape = (function (_super) {\n    __extends(CurvedLineShape, _super);\n    /**\n     * Creates an instance of CurvedLineShape.\n     *\n     * @param {ICurvedLineShapeOptions} options The options for creating this line\n     */\n    function CurvedLineShape(options) {\n        var _this = \n        // We pass our properties to the curve line but we do not let it cache it's version of the line segments\n        // As we will be constructing our own segmentation requiring a new type of cache\n        _super.call(this, options) || this;\n        /** Depeth of draw location */\n        _this.depth = 0;\n        /** How thick the line should be */\n        _this.lineWidth = 1;\n        _this.encapsulatePoints(_this.getTriangleStrip());\n        _this.cachesQuadSegments = options.cacheSegments;\n        _this.depth = options.depth || 0;\n        _this.lineWidth = options.lineWidth || 1;\n        _this.startColor = options.startColor;\n        _this.endColor = options.endColor;\n        return _this;\n    }\n    /**\n     * Returns a new instance of this object that mimicks the properties of this Object\n     *\n     * @returns {CurvedLineShape<T>} The cloned object\n     */\n    CurvedLineShape.prototype.clone = function () {\n        // Perform the clone\n        var clone = new CurvedLineShape({\n            cacheSegments: this.cachesSegments,\n            controlPoints: this.controlPoints,\n            end: this.end,\n            endColor: this.endColor,\n            lineWidth: this.lineWidth,\n            resolution: this.resolution,\n            start: this.start,\n            startColor: this.startColor,\n            type: this.type,\n        });\n        clone.d = this.d;\n        return clone;\n    };\n    /**\n     * @override\n     * See base definition\n     */\n    CurvedLineShape.prototype.distanceTo = function (point) {\n        return Math.max(0, _super.prototype.distanceTo.call(this, point) - (this.lineWidth / 2.0));\n    };\n    /**\n     * This produces a triangle strip that represents the quads that composes this line. If caching is present,\n     * subsequent calls to this method will be much faster unless the cache gets invalidated.\n     *\n     * @return {IPoint[]} The Triangle Strip of points to create the quads that make each segment of the curve\n     */\n    CurvedLineShape.prototype.getTriangleStrip = function () {\n        if (this.cachesSegments && this.cachedQuadSegments) {\n            return this.cachedQuadSegments;\n        }\n        // Make a container to hold our triangle strip info\n        var strip = [];\n        var normal = [];\n        // Start with calculating the line strip so we can use the line segments\n        // To produce the quads we need to render\n        var lineStrip = this.getLineStrip();\n        var lineWidthHalf = this.lineWidth / 2.0;\n        var line = new line_1.Line(point_1.Point.zero(), point_1.Point.zero());\n        // We make a container point for the scaling operation to reduce allocations\n        var scaledPoint = point_1.Point.zero();\n        // If the line strip is empty, then there is nothing to produce and makes\n        // Us unable to reduce the lineStrip, so return empty here\n        if (lineStrip.length < 2) {\n            return [];\n        }\n        // Calculate bisecting normal or each node\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            line.setPoints(lineStrip[i], lineStrip[i + 1]);\n            if (normal.length === 0) {\n                normal.push(line.perpendicular);\n            }\n            else {\n                // Sum of two normals of a point\n                var temp = {\n                    x: normal[i].x + line.perpendicular.x,\n                    y: normal[i].y + line.perpendicular.y,\n                };\n                // Normalize the sum of two normals\n                var sqrt = Math.sqrt(temp.x * temp.x + temp.y * temp.y);\n                temp.x = temp.x / sqrt;\n                temp.y = temp.y / sqrt;\n                normal[i] = temp;\n            }\n            normal.push(line.perpendicular);\n        }\n        // Use the new normals to generate quads\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            var previous = lineStrip[i];\n            var current = lineStrip[i + 1];\n            // TR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], -lineWidthHalf, scaledPoint), current));\n            // BR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], lineWidthHalf, scaledPoint), current));\n            // TL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], -lineWidthHalf, scaledPoint), previous));\n            // BL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], lineWidthHalf, scaledPoint), previous));\n        }\n        return strip;\n    };\n    /**\n     * @override\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     */\n    CurvedLineShape.prototype.setPoints = function (start, end, controlPoints) {\n        _super.prototype.setPoints.call(this, start, end, controlPoints);\n        this.cachedQuadSegments = [];\n    };\n    return CurvedLineShape;\n}(curved_line_1.CurvedLine));\nexports.CurvedLineShape = CurvedLineShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/curved-line-shape.ts\n// module id = 20\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = require(\"ramda\");\nvar interpolation_1 = require(\"../util/interpolation\");\nvar bounds_1 = require(\"./bounds\");\nvar line_1 = require(\"./line\");\nvar point_1 = require(\"./point\");\nvar debug = require('debug')('bezier');\n/**\n * This enum covers the type of curved lines that can be made. Making a specific curve\n *\n * @export\n * @enum {number}\n */\nvar CurveType;\n(function (CurveType) {\n    /** This will make the curve be generated from interpolating between the end points and provided control points */\n    CurveType[CurveType[\"Bezier\"] = 0] = \"Bezier\";\n    /**\n     * This will draw a curve as though there is a circular arc passing over the two end points. The radius of the\n     * circular arc is determined by how far the control point is from the straight line that can be made from the two\n     * end points.\n     */\n    CurveType[CurveType[\"CircularCCW\"] = 1] = \"CircularCCW\";\n    CurveType[CurveType[\"CircularCW\"] = 2] = \"CircularCW\";\n    /**\n     * This ignores the control points altogether and just created a straight line with a single segment that consists\n     * of the specified endpoints\n     */\n    CurveType[CurveType[\"Straight\"] = 3] = \"Straight\";\n})(CurveType = exports.CurveType || (exports.CurveType = {}));\n// -------[ Distance Calculating Methods ]----------------------------\n/**\n * Calculates the distance to the bezier curve by testing all of the bezier curve's segment lines\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction bezierDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a circle\n * TODO: Using the segment approach for now. Can be sped up by using circle math\n * instead\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction circularDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a straight line\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction straightDistance(line, testPoint) {\n    return new line_1.Line(line.start, line.end).distanceTo(testPoint);\n}\n// -------[ Segment Generating Methods ]----------------------------\n/**\n * Uses quadratic bezier principles to create the segments for a quadratic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier2Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var end = line.end;\n    var c1 = line.controlPoints[0];\n    for (var i = 0, end_1 = line.resolution; i <= end_1; ++i) {\n        segments.push(interpolation_1.bezier2(dt * i, start, end_1, c1));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Uses cubic bezier principles to create the segments for a cubic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier3Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var end = line.end;\n    var c1 = line.controlPoints[0];\n    var c2 = line.controlPoints[1];\n    for (var i = 0, end_2 = line.resolution; i <= end_2; ++i) {\n        segments.push(interpolation_1.bezier3(dt * i, start, end_2, c1, c2));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that follows along a circular path on the line.\n * The distance the control point is from the straight line that flows through the two\n * end points of the line determines the radius of the curvature of the line\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeCircularCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    debug('CW');\n    // Generate a line so we can have a perpendicular calculation\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    // We get the midpoint of the line as we want to align the center of the circle with this point\n    var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n    var minRadius = point_1.Point.getDistance(midPoint, line.start);\n    // The shortest the radius can be is the distance from the line to the mid point\n    // Anything shorter will just result in a hemisphere being rendered\n    if (radius < minRadius) {\n        radius = point_1.Point.getDistance(midPoint, line.start);\n    }\n    // Get the perpendicular direction to the line so we can calculate the center of our circle\n    // From the mid point\n    var perpendicular = straightLine.perpendicular;\n    var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n    // Calculate the location of the center of the circle\n    var circleCenter = {\n        x: perpendicular.x * distance + midPoint.x,\n        y: perpendicular.y * distance + midPoint.y,\n    };\n    // Store the circle center as an extra control point in case the value is needed\n    // (which it often is)\n    line.controlPoints[1] = circleCenter;\n    debug(' center of circle is %o  %o', circleCenter.x, circleCenter.y);\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Calculate how much to increment theta in our parametric circular equation\n    if (theta1 < theta2)\n        theta1 += Math.PI * 2;\n    var dTheta = (theta1 - theta2) / line.resolution;\n    debug('theta1 is %o, theta2 is %o', theta1, theta2);\n    // Compute the segments based on the information we have gathered by applying it to a circular\n    // Parametric equation\n    var segments = [];\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 - (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 - (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    // Cache the segments if specified by the curved line\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    debug('Generated Circular Segments: %o dTheta: %o radius: %o', segments, dTheta, radius);\n    return segments;\n}\nfunction makeCircularCCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n    var minRadius = point_1.Point.getDistance(midPoint, line.start);\n    if (radius < minRadius) {\n        radius = point_1.Point.getDistance(midPoint, line.start);\n    }\n    var perpendicular = straightLine.perpendicular;\n    var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n    var circleCenter = {\n        x: -perpendicular.x * distance + midPoint.x,\n        y: -perpendicular.y * distance + midPoint.y,\n    };\n    // Store the circle center as an extra control point in case the value is needed\n    // (which it often is)\n    line.controlPoints[1] = circleCenter;\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    if (theta2 < theta1)\n        theta2 += Math.PI * 2;\n    var dTheta = (theta2 - theta1) / line.resolution;\n    var segments = [];\n    // CCW, from end to start\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 + (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 + (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    if (line.cachedSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that is straight, thus only 1 segments is needed\n * and will be generated.\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeStraightSegments(line) {\n    return [line.start, line.end];\n}\n/** A quick lookup for a proper segment creating method for a curved line  */\nvar pickSegmentMethod = (_a = {},\n    _a[CurveType.Bezier] = [\n        null,\n        makeBezier2Segments,\n        makeBezier3Segments,\n    ],\n    _a[CurveType.CircularCW] = [\n        null,\n        makeCircularCWSegments,\n        makeCircularCWSegments,\n    ],\n    _a[CurveType.CircularCCW] = [\n        null,\n        makeCircularCCWSegments,\n        makeCircularCCWSegments,\n    ],\n    _a[CurveType.Straight] = [\n        makeStraightSegments,\n    ],\n    _a);\n/** A quick lookup for a proper distance calculating method for a curved line  */\nvar pickDistanceMethod = (_b = {},\n    _b[CurveType.Bezier] = bezierDistance,\n    _b[CurveType.CircularCW] = circularDistance,\n    _b[CurveType.CircularCCW] = circularDistance,\n    _b[CurveType.Straight] = straightDistance,\n    _b);\n/**\n * Defines an object which illustrates a curved line. Curved lines can be formed in many\n * ways but most often from two end points and some provided control points.\n *\n * @export\n * @class CurvedLine\n * @extends {Bounds<T>}\n * @template T An associated data type with this object. Use <never> if no data type is ever associated\n */\nvar CurvedLine = (function (_super) {\n    __extends(CurvedLine, _super);\n    /**\n     * Generates a primitive that describes a curved line, which is defined by the lines end points, type, and control points\n     *\n     * @param {ICurvedLineOptions} options The configuration options of this curved line\n     */\n    function CurvedLine(options) {\n        var _this = this;\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        _this = _super.call(this, minX, maxX, maxY, minY) || this;\n        // Apply the relevant properties to the curve\n        _this.cachesSegments = options.cacheSegments || false;\n        _this.type = options.type;\n        _this.resolution = options.resolution || 20;\n        // Set the metrics for this curved line\n        _this.setPoints(options.start, options.end, options.controlPoints);\n        // Set the method that will be used for calculating distance from a point\n        _this.distanceMethod = pickDistanceMethod[options.type];\n        return _this;\n    }\n    Object.defineProperty(CurvedLine.prototype, \"values\", {\n        get: function () {\n            return {\n                controlPoints: this.controlPoints,\n                end: this.end,\n                start: this.start,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the nearest distance from the provided point to this curved line\n     *\n     * @param {IPoint} point The point to test the distance from\n     *\n     * @returns {number} The calculated nearest distance from this curve to the point\n     */\n    CurvedLine.prototype.distanceTo = function (point) {\n        return this.distanceMethod(this, point);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {CurvedLine<any>[]} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    CurvedLine.getClosest = function (lines, point) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(point);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This returns the line strip that represents the curve. A line strip is specifically a group of points\n     * that forms line segments by taking the current point as one end and the previous point as the second end\n     * thus, you would start at index 1 and loop to the end to generate all of the lines composing this single\n     * line.\n     *\n     * @return {IPoint[]} All of the points in the line strip\n     */\n    CurvedLine.prototype.getLineStrip = function () {\n        return this.segmentMethod(this);\n    };\n    /**\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     * @param {boolean} preventRebounding If set, this will prevent the bounds from being recalculated\n     */\n    CurvedLine.prototype.setPoints = function (start, end, controlPoints) {\n        // Apply the points\n        this.start = start;\n        this.end = end;\n        if (controlPoints.length === 0)\n            debug('start: %o, end:%o', start, end);\n        // Get the available segment methods for the given type\n        var segmentMethods = pickSegmentMethod[this.type];\n        // If we adjust the control points we need to re-evaluate the type of segment creation method we use\n        if (controlPoints) {\n            this.controlPoints = ramda_1.clone(controlPoints);\n            // Get the number of control points we want to base the curve off of\n            var numControlPoints = controlPoints.length;\n            // If we have more control points than the methods available, then we use the greatest method available to best\n            // Handle as many control points as possible\n            if (numControlPoints > segmentMethods.length) {\n                numControlPoints = segmentMethods.length - 1;\n            }\n            // Set the method that will be used for generating segments\n            this.segmentMethod = segmentMethods[numControlPoints];\n            // Make sure the input wasn't bad\n            if (!this.segmentMethod) {\n                throw new Error('An Invalid number of control points was provided to a curved line. You must have at LEAST 1 control point. Or 0 for a straight line');\n            }\n            if (this.type === CurveType.Bezier) {\n                this.encapsulatePoints(controlPoints);\n            }\n            else if (this.type === CurveType.CircularCCW || this.type === CurveType.CircularCW) {\n                this.encapsulatePoints(this.getLineStrip());\n            }\n        }\n        this.encapsulatePoint(start);\n        this.encapsulatePoint(end);\n        // Invalidate caches if they exist\n        this.cachedSegments = null;\n    };\n    return CurvedLine;\n}(bounds_1.Bounds));\nexports.CurvedLine = CurvedLine;\nvar _a, _b;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/curved-line.ts\n// module id = 21\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"./bounds\");\nvar UID = 0;\nvar Circle = (function (_super) {\n    __extends(Circle, _super);\n    /**\n     * Generate a new Circle object\n     *\n     * @param x The center of the circle\n     * @param y The center of the circle\n     * @param r The radius of the circle\n     * @param d A data object to associate with the circle\n     */\n    function Circle(x, y, r, d) {\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        /** a UID of the circle */\n        _this._id = ++UID;\n        /** Radius of the circle */\n        _this._radius = 0;\n        /** X coord of the center of the circle */\n        _this._centerX = 0;\n        /** Y coord of the center of the circle */\n        _this._centerY = 0;\n        _this._centerX = x;\n        _this._centerY = y;\n        _this._radius = r;\n        _this.d = d;\n        _this.updateBounds();\n        return _this;\n    }\n    Object.defineProperty(Circle.prototype, \"values\", {\n        get: function () {\n            return {\n                radius: this._radius,\n                x: this._centerX,\n                y: this._centerY,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"radius\", {\n        get: function () {\n            return this._radius;\n        },\n        set: function (val) {\n            this._radius = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerX\", {\n        get: function () {\n            return this._centerX;\n        },\n        set: function (val) {\n            this._centerX = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerY\", {\n        get: function () {\n            return this._centerY;\n        },\n        set: function (val) {\n            this._centerY = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Tests if the specified bounds is inside this circle\n     *\n     * @param b The bounds to test against\n     */\n    Circle.prototype.boundsInside = function (b) {\n        var r2 = this._radius * this._radius;\n        var dx = b.x - this._centerX;\n        var dy = b.y - this._centerY;\n        var dy2 = dy * dy;\n        var dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.right - this._centerX;\n        dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dy = b.bottom - this._centerY;\n        dy2 = dy * dy;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.x - this._centerX;\n        dx2 = dx * dx;\n        return (dx2 + dy2) < r2;\n    };\n    /**\n     * Calculates the distance to a provided point\n     *\n     * @param {IPoint} p The point to calculate the distance of the middle of the\n     *                   circle to\n     * @param {boolean} notSquared Flag true to prevent the Math.sqrt operation, leaving\n     *                             the result as distance^2\n     *\n     * @return {number} The distance from mid circle to the point\n     */\n    Circle.prototype.distanceTo = function (p, notSquared) {\n        var dx = this._centerX - p.x;\n        var dy = this._centerY - p.y;\n        if (notSquared) {\n            return dx * dx + dy * dy;\n        }\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n    /**\n     * Retrieves the closest circle to a provided point\n     *\n     * @param {Array} circles The circles to see who is the nearest\n     * @param {IPoint} p The point to compare the circles against for nearness\n     *\n     * @return {Circle} The nearest circle\n     */\n    Circle.getClosest = function (circles, p) {\n        var closestCircle;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        circles.forEach(function (circle) {\n            distance = circle.distanceTo(p, true);\n            if (distance < closestDistance) {\n                closestCircle = circle;\n                closestDistance = distance;\n            }\n        });\n        return closestCircle;\n    };\n    /**\n     * Tests if this circle is colliding with the specified circle\n     *\n     * @param c The circle to test against\n     *\n     * @return {boolean} True if colliding\n     */\n    Circle.prototype.hitCircle = function (c) {\n        var totalDistance = c._radius + this._radius;\n        totalDistance *= totalDistance;\n        return this.distanceTo({ x: c._centerX, y: c._centerY }, true) < totalDistance;\n    };\n    /**\n     * @override\n     * This makes it so the test of a point tests based on a Circle shape\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.hitPoint = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * If there are multiple metrics to update for the circle, this is the most\n     * efficient way to do that as it will update it's bounds only once.\n     *\n     * @param x\n     * @param y\n     * @param r\n     */\n    Circle.prototype.position = function (x, y, r) {\n        this._centerX = x;\n        this._centerY = y;\n        this._radius = r;\n        this.updateBounds();\n    };\n    /**\n     * @override\n     * Tests if a point is inside the circle\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.pointInside = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * When the circle gains different circle metrics, it's Bounds must adjust\n     * accordingly, which is what this method recalculates.\n     */\n    Circle.prototype.updateBounds = function () {\n        var radius = this._radius;\n        this.x = this._centerX - radius;\n        this.y = this._centerY - radius;\n        this.height = radius * 2;\n        this.width = radius * 2;\n    };\n    /**\n     * Pretty print the metrics of this circle\n     */\n    Circle.prototype.toString = function () {\n        return \"[Circle {x: \" + this._centerX + \", y: \" + this._centerY + \", r: \" + this._radius + \"}]\";\n    };\n    return Circle;\n}(bounds_1.Bounds));\nexports.Circle = Circle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/circle.ts\n// module id = 22\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar line_1 = require(\"../../primitives/line\");\n/**\n * Defines a line that can be drawn\n */\nvar LineShape = (function (_super) {\n    __extends(LineShape, _super);\n    /**\n     * Generate a new line that can be drawn\n     */\n    function LineShape(p1, p2, d, r, g, b, a, r2, g2, b2, a2, thickness) {\n        var _this = _super.call(this, p1, p2) || this;\n        // Color 1\n        _this.a = 0;\n        _this.b = 0;\n        _this.g = 0;\n        _this.r = 1;\n        // Color 2 ?\n        _this.a2 = 0;\n        _this.b2 = 0;\n        _this.g2 = 0;\n        _this.r2 = 1;\n        // Other properties\n        _this.cull = true;\n        _this.thickness = 1;\n        Object.assign(_this, {\n            a: a,\n            a2: a2,\n            b: b,\n            b2: b2,\n            d: d,\n            g: g,\n            g2: g2,\n            r: r,\n            r2: r2,\n        });\n        if (thickness !== undefined) {\n            _this.thickness = thickness;\n        }\n        return _this;\n    }\n    /**\n     * Clones this instance of the line shape and creates a new instance of a line shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this line shape\n     */\n    LineShape.prototype.clone = function (newProperties) {\n        return Object.assign(new LineShape(this.p1, this.p2, this.d, this.r, this.g, this.b, this.a, this.r2, this.g2, this.b2, this.a2), this, newProperties);\n    };\n    return LineShape;\n}(line_1.Line));\nexports.LineShape = LineShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/line-shape.ts\n// module id = 23\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar ShapeBufferCache = (function () {\n    function ShapeBufferCache() {\n        this.buffer = [];\n        this.bustCache = true;\n    }\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    ShapeBufferCache.prototype.generate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this.bustCache) {\n            this.buildCache.apply(this, args);\n            this.bustCache = false;\n        }\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    ShapeBufferCache.prototype.buildCache = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Get the buffer the cache has generated\n     */\n    ShapeBufferCache.prototype.getBuffer = function () {\n        return this.buffer;\n    };\n    return ShapeBufferCache;\n}());\nexports.ShapeBufferCache = ShapeBufferCache;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/shape-buffer-cache.ts\n// module id = 24\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./webgl-surface/webgl-surface\"));\n__export(require(\"./webgl-surface/buffers\"));\n__export(require(\"./webgl-surface/drawing\"));\n__export(require(\"./webgl-surface/primitives\"));\n__export(require(\"./webgl-surface/util\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.ts\n// module id = 25\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = require(\"ramda\");\nvar React = require(\"react\");\nvar three_1 = require(\"three\");\nvar atlas_manager_1 = require(\"./drawing/texture/atlas-manager\");\nvar atlas_texture_1 = require(\"./drawing/texture/atlas-texture\");\nvar bounds_1 = require(\"./primitives/bounds\");\nvar frame_info_1 = require(\"./util/frame-info\");\nvar mouse_1 = require(\"./util/mouse\");\nvar quad_tree_1 = require(\"./util/quad-tree\");\nvar debug = require('debug')('webgl-surface:GPU');\nvar debugCam = require('debug')('webgl-surface:Camera');\nvar debugLabels = require('debug')('webgl-surface:Labels');\nvar debugColors = require('debug')('webgl-surface:Colors');\n/**\n * This enum names the base methods that are passed into the applyPropsMethods\n * method. This allows subclasses to easily pick the property setting methods they need\n * from the base\n */\nvar BaseApplyPropsMethods;\n(function (BaseApplyPropsMethods) {\n    /** Initializes any context that needs to be set up before the props are set */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"INITIALIZE\"] = 0] = \"INITIALIZE\";\n    /** Moment when any buffer changes should be applied */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"BUFFERCHANGES\"] = 1] = \"BUFFERCHANGES\";\n    /** Initializes camera properties to facilitate smoothe start up */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"CAMERA\"] = 2] = \"CAMERA\";\n    /** Generates the labels as images within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"LABELS\"] = 3] = \"LABELS\";\n    /** Generates the colors within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"COLORS\"] = 4] = \"COLORS\";\n})(BaseApplyPropsMethods = exports.BaseApplyPropsMethods || (exports.BaseApplyPropsMethods = {}));\n/**\n * This enum names the base methods that are passed into the animatedMethods\n * method. This allows subsclasses to easily pick the animated methods they need\n * from the base\n */\nvar BaseAnimatedMethods;\n(function (BaseAnimatedMethods) {\n    /** Sets up the base context needed to execute most methods */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"CONTEXT\"] = 0] = \"CONTEXT\";\n    /** Sets up the inertia method for inertial panning */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"INERTIA\"] = 1] = \"INERTIA\";\n    /** Animates the postion of the camera to a destination */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"POSITION\"] = 2] = \"POSITION\";\n    /** Zooms the camera based on a point of focus */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"ZOOM\"] = 3] = \"ZOOM\";\n})(BaseAnimatedMethods = exports.BaseAnimatedMethods || (exports.BaseAnimatedMethods = {}));\nfunction isAnimatedWithOptions(value) {\n    if (value.options) {\n        return true;\n    }\n    return false;\n}\nfunction isAnimated(value) {\n    if (!value.options) {\n        return true;\n    }\n    return false;\n}\n/** This is the smallest increment the zoom can make. Anything less and nothing will happen */\nvar MIN_ZOOM_INCREMENT = 0.001;\nvar BYTE_MAX = 0xFF;\nvar BACKGROUND_COLOR = new three_1.Color().setRGB(38 / BYTE_MAX, 50 / BYTE_MAX, 78 / BYTE_MAX);\n// --[ CONSTANTS ]-------------------------------------------\n// Make a container vector for performing operations within\nvar vector = new three_1.Vector3();\n// --[ SHADERS ]-------------------------------------------\n/**\n * Equivalent of Math.sign, but faster, and works in all browsers\n *\n * @param {number} value The number to determine the sign\n *\n * @return {number} Returns zero if a sign can not be determined, -1 for a negative, 1 for a positive\n */\nfunction sign(value) {\n    if (!value) {\n        return 0;\n    }\n    if (value > 0) {\n        return 1;\n    }\n    if (value < 0) {\n        return -1;\n    }\n    return 0;\n}\nfunction isWebGLSupported() {\n    try {\n        var canvas = document.createElement('canvas');\n        return !!window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n    }\n    catch (e) {\n        return false;\n    }\n}\nvar WEBGL_SUPPORTED = isWebGLSupported();\n/**\n * The base component for the communications view\n */\nvar WebGLSurface = (function (_super) {\n    __extends(WebGLSurface, _super);\n    function WebGLSurface() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** This is the atlas manager for managing images and labels rendered as textures */\n        _this.atlasManager = new atlas_manager_1.AtlasManager(2048, 2048);\n        /** Tracks the names of the atlas' generated */\n        _this.atlasNames = {\n            colors: 'colors',\n            labels: 'labels',\n        };\n        /**\n         * List of methods that execute within the animation loop. Makes adding and removing these methods\n         * simpler to manage, as well as gives a clear and optimized way of overriding existing methods\n         * or reordering their execution\n         */\n        _this.animatedMethodList = [];\n        /**\n         * If this is set to true during an animated method's lifecycle, then all subsequent animated methods\n         * will not be executed for the current frame. Upon reaching the end of the frame, the break will reset\n         * and the animated methods will attempt executing again\n         */\n        _this.animatedMethodBreak = false;\n        /** Used to aid in mouse interactions */\n        _this.distance = 0;\n        /**\n         * The camera that 'looks' at our world and gives us the ability to convert\n         * screen coordinates to world coordinates, and vice versa\n         */\n        _this.camera = null;\n        /**\n         * While this number is positive it will be decremented every frame.\n         * While positive, mouse interactions will not occur. This utilizes frame ticks\n         * as SOME values and numbers settle per frame, not necessarily within timelapses.\n         * More often than not, there will only be a need for 1-2 frames of mouse disable to\n         * allow the camera to be positioned in a correct location before screen to world projections\n         * start taking place.\n         */\n        _this.disableMouseInteraction = 0;\n        _this.sizeCamera = null;\n        /** Keep track of the current zoom so it can be set in requestAnimationFrame */\n        _this.currentZoom = 1;\n        /** Horizontal destination the camera will pan to */\n        _this.destinationX = 0;\n        /** Vertical position the camera will pan to */\n        _this.destinationY = 0;\n        /** The destination zoom level the camera used during panning */\n        _this.destinationZoom = 1;\n        /** Is the camera currently in a panning state */\n        _this.isPanning = false;\n        /** Last known screen position of the mouse */\n        _this.lastMousePosition = { x: 0, y: 0 };\n        /** List of methods to execute when applying props */\n        _this.propsMethodList = [];\n        /** Inertial values for drag panning */\n        _this.inertia = null;\n        _this.inertiaBuild = 1.5;\n        _this.inertiaDecay = .9;\n        _this.inertiaMax = 100;\n        /**\n         * All data is put into this quad tree so we can query spatial regions for\n         * items\n         */\n        _this.quadTree = null;\n        /**\n         * True if the shift key is currently being held\n         *\n         * Panning is affected by whether or not the shift key is being held down, but\n         * I don't know how yet.\n         */\n        _this.shiftIsDown = false;\n        _this.stop = false;\n        /** The current rendered position and zoom */\n        _this.currentX = 0;\n        _this.currentY = 0;\n        _this.targetZoom = 1;\n        /** The (world) position the focus will zoom in and out of */\n        _this.previousZoomToFit = 0;\n        _this.zoomTargetX = 0;\n        _this.zoomTargetY = 0;\n        /** When this is set, the draw loop continues to run. Used by the draw loop to complete animations */\n        _this.animating = false;\n        _this.labels = [];\n        _this.labelsReady = false;\n        /**\n         * This is the latest labels loading identifier, used to determine if the labels\n         * last loaded matches the labels currently needing to be rendered.\n         */\n        _this.labelsCurrentLoadedId = 0;\n        _this.labelsLoadId = 0;\n        /** When this is set to true, the atlas with the colors is now ready to be referenced */\n        _this.colors = [];\n        _this.colorsReady = false;\n        /** Holds the items currently hovered over */\n        _this.currentHoverItems = [];\n        /** Flag for detecting whether or not webgl is supported at all */\n        /**\n         * This is the update loop that operates at the requestAnimationFrame speed.\n         * This updates the cameras current position and causes changes over time for\n         * any property that has a start and a destination.\n         */\n        _this.animate = function () {\n            if (_this.stop) {\n                return;\n            }\n            frame_info_1.FrameInfo.lastFrameTime = Date.now();\n            frame_info_1.FrameInfo.framesPlayed.set(_this, (frame_info_1.FrameInfo.framesPlayed.get(_this) || 0) + 1);\n            requestAnimationFrame(function () { return _this.animate(); });\n            var response;\n            var doDraw = false;\n            var didBreak = _this.animatedMethodList.some(function (method) {\n                if (isAnimatedWithOptions(method)) {\n                    if (method.options.labelsReady && method.options.colorsReady) {\n                        if (_this.labelsReady && _this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.labelsReady) {\n                        if (_this.labelsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.colorsReady) {\n                        if (_this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                }\n                else if (isAnimated(method)) {\n                    response = method();\n                }\n                // Update our draw status based on response\n                if (!doDraw) {\n                    doDraw = response.doDraw;\n                }\n                // Stop the system if needed\n                if (response.stop) {\n                    _this.stop = true;\n                }\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            // We prevent any animation loop execution if we did break\n            if (didBreak) {\n                return;\n            }\n            // Make sure all camera related uniforms are up to date\n            _this.updateCameraUniforms();\n            // Handle the deactivation period of mouse interactions by decrementing it\n            // If it's positive\n            if (_this.disableMouseInteraction > 0) {\n                _this.disableMouseInteraction--;\n            }\n            if (doDraw || _this.forceDraw) {\n                _this.forceDraw = false;\n                _this.emitViewport();\n                _this.draw();\n            }\n        };\n        /**\n         * Applies new props injected into this component.\n         *\n         * Applying new props does not entail that a re-render will happen so we\n         * handle application of props as a separate concept. Here we:\n         *\n         * set up zoom targetting and apply quested zoom levels\n         *\n         * Create our quad tree and associate properties to objects if a new dataset\n         * is provided\n         *\n         * Analyze our dataset for interesting and useful metrics such as max and mins\n         * to aid in visualization normalization\n         *\n         * @param {T} props The new properties for this component\n         */\n        _this.applyProps = function (props) {\n            debug('Applying props');\n            var response;\n            _this.propsMethodList.some(function (method) {\n                response = method(props);\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            debugCam('current cam', _this.currentX, _this.currentY, _this.destinationX, _this.destinationY);\n            debugCam('Zoom Target: [%o, %o]', _this.zoomTargetX, _this.zoomTargetY);\n            debugCam('Last Mouse: [%o, %o]', _this.lastMousePosition.x, _this.lastMousePosition.y);\n        };\n        /**\n         * This is the draw method executed from the animation loop. Everytime, this is\n         * called, the webgl surface will be redrawn.\n         */\n        _this.draw = function () {\n            // Draw the 3D scene\n            _this.renderer.render(_this.scene, _this.camera);\n        };\n        /**\n         * This initializes the surface and calls for sub class classes to initialize\n         * their buffers\n         *\n         * @param {HTMLElement} el The DOM element this component is contained in\n         * @param {number} w The width of the rendering\n         * @param {number} h The height of the rendering\n         */\n        _this.init = function (el, w, h) {\n            if (!el || _this.scene) {\n                return;\n            }\n            _this.renderEl = el;\n            if (w === 0 || h === 0) {\n                return;\n            }\n            debug('Initializing GPU objects el: %o width: %o height: %o', el, w, h);\n            // Set up a ctx for our render space\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2.0,\n                width: w,\n                widthHalf: w / 2.0,\n            };\n            // Set up the camera now that the ctx is set up\n            _this.initCamera();\n            // Create a scene so we can add our buffer objects to it\n            // We also add the scene to the window to make threejs tools available\n            window.scene = _this.scene = new three_1.Scene();\n            // Fire our hook for starting up our specific buffer implementation\n            _this.initBuffers();\n            // FINALIZE SET UP\n            // Generate the renderer along with it's properties\n            _this.renderer = new three_1.WebGLRenderer({\n                antialias: true,\n            });\n            debug('Window Pixel Ratio: %o', window.devicePixelRatio);\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            _this.renderer.setClearColor(BACKGROUND_COLOR);\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            // Set up DOM interaction with the renderer\n            var container = el;\n            container.appendChild(_this.renderer.domElement);\n        };\n        /**\n         * Initializes the camera and any contexts associated with it\n         */\n        _this.initCamera = function () {\n            debug('Initializing Camera');\n            // INITIALIZE THE CAMERA\n            var h = _this.ctx.height;\n            var viewSize = h;\n            var w = _this.ctx.width;\n            var aspectRatio = w / h;\n            var viewport = {\n                aspectRatio: aspectRatio,\n                bottom: -viewSize / 2,\n                far: 10000000,\n                left: (-aspectRatio * viewSize) / 2,\n                near: -100,\n                right: (aspectRatio * viewSize) / 2,\n                top: viewSize / 2,\n                viewSize: viewSize,\n            };\n            _this.camera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.sizeCamera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.camera.position.z = 300;\n            _this.sizeCamera.position.set(0, 0, 300);\n        };\n        /**\n         * This is executed when our rendering surface (the canvas) changes in size in any\n         * way. It will make sure our renderer matches the context to prevent scaling\n         * and other deformations.\n         */\n        _this.resizeContext = function () {\n            var w = _this.props.width;\n            var h = _this.props.height;\n            // See if a renderer even exists yet\n            if (!_this.renderer) {\n                return false;\n            }\n            var renderSize = _this.renderer.getSize();\n            // Check if the resize is needed\n            if (renderSize.width === w && renderSize.height === h) {\n                return false;\n            }\n            debug('RENDERER RESIZE');\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2,\n                width: w,\n                widthHalf: w / 2,\n            };\n            var zoom = _this.camera.zoom;\n            var position = _this.camera.position.clone();\n            _this.initCamera();\n            _this.camera.zoom = zoom;\n            _this.camera.position.set(position.x, position.y, position.z);\n            _this.camera.updateProjectionMatrix();\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            _this.renderer.setClearColor(new three_1.Color().setRGB(38 / 255, 50 / 255, 78 / 255));\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            return true;\n        };\n        /**\n         * This method handles emitting the viewport and the current visible elements\n         * to the subclass that needs detailed information regarding the viewport.\n         */\n        _this.emitViewport = function () {\n            var tl = _this.screenToWorld(0, 0);\n            var br = _this.screenToWorld(_this.ctx.width, _this.ctx.height);\n            _this.camera.updateMatrixWorld(true);\n            var visible = _this.quadTree.query(new bounds_1.Bounds(tl.x, br.x, tl.y, br.y));\n            _this.onViewport(visible, _this.projection, _this.ctx);\n        };\n        /**\n         * Handles mouse interactions when the mouse is pressed on the canvas. This\n         * engages panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseDown = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = true;\n            _this.distance = 0;\n            _this.onMouseDown();\n        };\n        /**\n         * Handles mouse interactions when the mouse is release or left the canvas. This\n         * stops panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseOut = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            _this.distance = 0;\n            _this.onMouseOut();\n        };\n        /**\n         * Handles mouse interactions when the mouse is released on the canvas. This\n         * stops panning and engages click events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseUp = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            // Handle mouse interaction\n            if (_this.distance < 5) {\n                var hitInside = [];\n                // Circle Interaction\n                var hitItems = _this.quadTree.query(world);\n                for (var _i = 0, hitItems_1 = hitItems; _i < hitItems_1.length; _i++) {\n                    var item = hitItems_1[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                    }\n                }\n                // Tell the listener that the user clicked on some items\n                if (hitInside.length) {\n                    _this.onMouseUp(e, hitInside, mouse, world, _this.projection);\n                }\n                else {\n                    _this.onMouseUp(e, null, mouse, world, _this.projection);\n                }\n            }\n        };\n        /**\n         * Handles mouse interactions when the mouse is moving on the canvas. This\n         * causes panning and hover events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseMove = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            var onMouse = _this.props.onMouse;\n            var zoom = _this.props.zoom;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            _this.distance++;\n            // Handle panning\n            if (_this.isPanning) {\n                var xDistance = (mouse.x - _this.lastMousePosition.x) / _this.targetZoom;\n                var yDistance = -(mouse.y - _this.lastMousePosition.y) / _this.targetZoom;\n                // Execute the hook to allow subclasses\n                var pan = _this.willPan(xDistance, yDistance);\n                xDistance = pan.x;\n                yDistance = pan.y;\n                _this.destinationX -= xDistance;\n                _this.destinationY -= yDistance;\n                _this.inertia = _this.inertia || { x: 0, y: 0 };\n                if (sign(xDistance) !== sign(_this.inertia.x)) {\n                    _this.inertia.x = 0;\n                }\n                if (sign(yDistance) !== sign(_this.inertia.y)) {\n                    _this.inertia.y = 0;\n                }\n                _this.inertia.x = xDistance * _this.inertiaBuild;\n                _this.inertia.y = yDistance * _this.inertiaBuild;\n                var maxInertia = _this.inertiaMax / zoom;\n                var mag = Math.sqrt(_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y);\n                // Make sure the magnitude of the inertia is less than our max allowed\n                if (mag > maxInertia) {\n                    // Since it's greater, let's confine the inertia's magnitude to the max magnitude\n                    // By normalizing the intertia vector and multilying it by the max\n                    _this.inertia.x = (_this.inertia.x / mag) * maxInertia;\n                    _this.inertia.y = (_this.inertia.y / mag) * maxInertia;\n                }\n            }\n            if (_this.quadTree && !_this.isPanning) {\n                // Empty the last hovered items to populate a new list\n                var currentHoverItems = [];\n                // Handle mouse interaction with items\n                // Interaction with circles\n                var hitItems = _this.quadTree.query(world);\n                var hitInside = [];\n                for (var _i = 0, hitItems_2 = hitItems; _i < hitItems_2.length; _i++) {\n                    var item = hitItems_2[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                        currentHoverItems.push(item);\n                    }\n                }\n                // Inform of all items hit or hovered\n                _this.onMouseHover(hitInside, mouse, world, _this.projection);\n                // Diff the currently hovered items with the old ones to see what is\n                // No longer hit\n                var left = [];\n                for (var _a = 0, _b = _this.currentHoverItems; _a < _b.length; _a++) {\n                    var item = _b[_a];\n                    if (currentHoverItems.indexOf(item) < 0) {\n                        left.push(item);\n                    }\n                }\n                // Inform of all items no longer hovered\n                _this.onMouseLeave(left, mouse, world, _this.projection);\n                _this.currentHoverItems = currentHoverItems;\n            }\n            if (onMouse) {\n                _this.onMouse(mouse, world, _this.isPanning);\n            }\n            _this.lastMousePosition = mouse;\n        };\n        /**\n         * We make the ref application be a declared function so react does not find the need to execute the\n         * application numerous times for a detected changed method\n         *\n         * @param {HTMLElement} n This is the canvas element from the dom\n         */\n        _this.applyRef = function (n) {\n            _this.init(n, _this.props.width, _this.props.height);\n            _this.applyProps(_this.props);\n        };\n        return _this;\n    }\n    /**\n     * This is a hook so subclasses can contribute animated methods to the animation loop and organize the base methods\n     * as desired.\n     *\n     * @param {AnimatedMethodLookup} baseAnimatedMethods The base animated methods referenceable by name\n     * @param {AnimatedMethod[]} orderedBaseAnimatedMethods The base animated methods in their default order for ease of use\n     *\n     * @return {AnimatedMethods[]} The list of animated methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.animatedMethods = function (baseAnimatedMethods, orderedBaseAnimatedMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBaseAnimatedMethods;\n    };\n    /**\n     * This generates the base animated methods lookup.\n     * We do not make these methods a part of the class as this is the base class\n     * We want the start up methods to be inconsequential to sub classes, thus allowing\n     * us to override, sort, or replace the initial methods and have the method get garbage\n     * collected and no longer a part of the object. It is recommended to make the sub classes\n     * actually point to class methods for better clarity\n     *\n     * @return {ANimatedMethodLookup} The base animated methods in a lookup\n     */\n    WebGLSurface.prototype.animatedMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            // Context changes and early checks\n            _a[BaseAnimatedMethods.CONTEXT] = function () {\n                var response = {\n                    break: false,\n                    doDraw: false,\n                };\n                if (_this.resizeContext()) {\n                    response.doDraw = true;\n                }\n                // Quadtree MUST be present to do proper computations\n                if (!_this.quadTree) {\n                    response.break = true;\n                }\n                return response;\n            },\n            // Apply inertia\n            _a[BaseAnimatedMethods.INERTIA] = function () {\n                if (!_this.isPanning) {\n                    if (_this.inertia) {\n                        // Disabled inertia for now\n                        // This.destinationX -= this.inertia.x\n                        // This.destinationY -= this.inertia.y\n                        _this.inertia.x *= _this.inertiaDecay;\n                        _this.inertia.y *= _this.inertiaDecay;\n                        if (_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y < 1) {\n                            _this.inertia = null;\n                        }\n                    }\n                }\n                // A non response\n                return {\n                    doDraw: false,\n                };\n            },\n            // Apply position\n            _a[BaseAnimatedMethods.POSITION] = function () {\n                // If values are transitioned rather than immediately applied, this is\n                // The value you would want the minimum change to be before cutting off\n                // The transition\n                // Const minAdjust = 1 / this.props.zoom\n                // If there is change in X apply the new position to the old\n                // This is where animated values were originally placed and can be placed\n                // Again if a transition is desired\n                var response = {\n                    doDraw: (_this.currentX !== _this.destinationX) || (_this.currentY !== _this.destinationY),\n                };\n                _this.currentX = _this.destinationX;\n                _this.currentY = _this.destinationY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            // Apply zooming\n            _a[BaseAnimatedMethods.ZOOM] = function () {\n                var response = {\n                    doDraw: false,\n                };\n                // Apply Zoom\n                // Const zoomToFitH = this.ctx.width / Math.max(this.quadTree.bounds.width, this.props.viewport.width);\n                // Const zoomToFitV = this.ctx.height / Math.max(this.quadTree.bounds.height, this.props.viewport.height);\n                // Const zoomToFit = Math.min(zoomToFitH, zoomToFitV);\n                var zoomToFit = 1;\n                var destZoom = _this.destinationZoom * zoomToFit;\n                var dZoom = Math.abs(destZoom - _this.targetZoom);\n                var minDZoom = MIN_ZOOM_INCREMENT;\n                var zoomRate = 3;\n                if (dZoom > minDZoom) {\n                    _this.targetZoom = _this.targetZoom + ((destZoom - _this.targetZoom) / zoomRate);\n                    response.doDraw = true;\n                }\n                else if (dZoom !== 0) {\n                    _this.targetZoom = destZoom;\n                    response.doDraw = true;\n                }\n                // Get the zoom target metrics before zooming\n                var zoomTargetX = _this.zoomTargetX;\n                var zoomTargetY = _this.zoomTargetY;\n                var screenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Update the camera zoom level\n                _this.zoomCamera(_this.targetZoom);\n                // After we have zoomed we see how much our target location moved on screen\n                var newScreenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Now we move our screen by the moved delta to keep it exactly where it was before hand\n                var zoomDX = -(newScreenZoomTarget.x - screenZoomTarget.x) / _this.targetZoom;\n                var zoomDY = (newScreenZoomTarget.y - screenZoomTarget.y) / _this.targetZoom;\n                _this.currentX -= zoomDX;\n                _this.currentY -= zoomDY;\n                _this.destinationX -= zoomDX;\n                _this.destinationY -= zoomDY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for subclasses to be able to apply buffer changes that rely\n     * on colors rendered into the atlas after the system has prepped the colors for render.\n     */\n    WebGLSurface.prototype.applyColorBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * This is a hook for subclasses to be able to apply label buffer changes after the system has\n     * prepped the labels for render.\n     */\n    WebGLSurface.prototype.applyLabelBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * @override\n     * This is a hook so subclasses can contribute property application methods to the applyProps process and organize the base methods\n     * as desired.\n     *\n     * @param {ApplyPropsMethodLookup<T>} basePropsMethods The base props methods referenceable by name\n     * @param {ApplyPropsMethod<T>[]} orderedBasePropsMethods The base animated methods in their default order for ease of use\n     *\n     * @return {ApplyPropsMethod<T>[]} The list of property application methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.applyPropsMethods = function (basePropsMethods, orderedBasePropsMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBasePropsMethods;\n    };\n    /**\n     * This is a hook so subclasses can contribute methods to the applying props procedure and organize the base methods\n     * as desired.\n     *\n     * @return {ApplyPropsMethodLookup<T>} The base apply props method that are indexed for ease of reference\n     */\n    WebGLSurface.prototype.applyPropsMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            _a[BaseApplyPropsMethods.INITIALIZE] = function (props) {\n                var height = props.height, width = props.width;\n                _this.init(_this.renderEl, width, height);\n                if (!_this.renderEl || width === 0 || height === 0) {\n                    return {\n                        break: true,\n                    };\n                }\n                // Get the target for zooming\n                if (_this.camera) {\n                    var world = _this.screenToWorld(_this.lastMousePosition.x, _this.lastMousePosition.y);\n                    _this.zoomTargetX = world.x;\n                    _this.zoomTargetY = world.y;\n                }\n                debug('props', props);\n                return {};\n            },\n            _a[BaseApplyPropsMethods.LABELS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.labels && props.labels !== _this.labels) {\n                    debugLabels('Labels are being comitted to an Atlas %o', props.labels);\n                    // Flag the labels as incapable of rendering\n                    _this.labelsReady = false;\n                    _this.labelsLoadId++;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.labels = props.labels;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.labels)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.labels);\n                    }\n                    var textures = props.labels.map(function (label) { return new atlas_texture_1.AtlasTexture(null, label); });\n                    debugLabels('Creating the atlas for labels based on these textures %o', textures);\n                    _this.atlasManager.createAtlas(_this.atlasNames.labels, textures)\n                        .then(function () {\n                        debugLabels('Labels rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.labels));\n                        _this.forceDraw = true;\n                        _this.labelsCurrentLoadedId++;\n                        // If we are done loading AND we match up with the current load id, then labels\n                        // For the latest labels update are indeed ready for display\n                        if (_this.labelsCurrentLoadedId === _this.labelsLoadId) {\n                            _this.labelsReady = true;\n                        }\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.COLORS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.colors && props.colors !== _this.colors) {\n                    debugColors('Colors are being comitted to an Atlas %o', props.colors);\n                    // Flag the labels as incapable of rendering\n                    _this.colorsReady = false;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.colors = props.colors;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.colors)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.colors);\n                    }\n                    debugColors('Creating the atlas for colors based on these colors %o', _this.colors);\n                    _this.atlasManager.createAtlas(_this.atlasNames.colors, null, _this.colors)\n                        .then(function () {\n                        debugColors('Colors rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.colors));\n                        _this.forceDraw = true;\n                        _this.colorsReady = true;\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.BUFFERCHANGES] = function (props) {\n                // Call the hook to allow sub componentry to have a place to update it's buffers\n                _this.applyBufferChanges(props);\n                // We call the label buffering when the labels are ready to render.\n                // Labels now utilize the color atlas as well, thus requiring colors\n                // To be loaded\n                if (_this.labelsReady && _this.colorsReady) {\n                    debugLabels('labels changed %o', props);\n                    _this.applyLabelBufferChanges(props);\n                }\n                // For resources that only need the color atlas to be ready\n                if (_this.colorsReady) {\n                    _this.applyColorBufferChanges(props);\n                }\n                return {};\n            },\n            _a[BaseApplyPropsMethods.CAMERA] = function (props) {\n                _this.destinationZoom = props.zoom;\n                // On initialization this should start with some base camera metrics\n                if (props.viewport && props.viewport !== _this.appliedViewport && _this.quadTree) {\n                    debugCam('Applying viewport to camera: %o World Space Bounds: %o Screen context: %o', props.viewport, _this.quadTree.bounds, { width: props.width, height: props.height });\n                    // Position the camera over the mid of the specified viewport\n                    var mid = props.viewport.mid;\n                    _this.currentX = _this.destinationX = mid.x;\n                    _this.currentY = _this.destinationY = mid.y;\n                    // Calculate the zoom level when the input zoom is at 1\n                    var zoomAtOne = 1;\n                    // Calculate the zoom needed for the viewport\n                    var zoomToFitViewH = props.width / props.viewport.width;\n                    var zoomToFitViewV = props.height / props.viewport.height;\n                    var zoomToFit = Math.min(zoomToFitViewH, zoomToFitViewV);\n                    // This adjusts the destination zxoom by a tiny amount so the view will redraw\n                    var microAdjustment = 1.001;\n                    // Make our destination zoom a zoom that will fit the dimensions of the viewport\n                    // Relative to the zoom at one level\n                    _this.destinationZoom = zoomToFit / zoomAtOne;\n                    _this.targetZoom = (_this.destinationZoom * zoomAtOne) * microAdjustment;\n                    // Make sure any zooming that happens occurs over the middle of the initial viewport\n                    _this.zoomTargetX = mid.x;\n                    _this.zoomTargetY = mid.y;\n                    // Make sure mouse position doesn't mess with the zooming focus either\n                    _this.lastMousePosition.x = props.width / 2.0;\n                    _this.lastMousePosition.y = props.height / 2.0;\n                    // Apply the values immediately to the camera\n                    _this.positionCamera(_this.currentX, _this.currentY);\n                    _this.zoomCamera(_this.targetZoom);\n                    _this.updateCameraUniforms();\n                    // We request the calculated zoom level so adjustments on the input can be made\n                    if (props.onZoomRequest) {\n                        props.onZoomRequest(_this.destinationZoom);\n                        debugCam('Requesting zoom level', _this.destinationZoom);\n                    }\n                    // Let's disable mouse interactions for a little bit until the camera has settled into place\n                    var framesToDisable = 10;\n                    _this.disableMouseInteraction = framesToDisable;\n                    _this.appliedViewport = props.viewport;\n                    debugCam('init cam', _this.currentX, _this.currentY);\n                }\n                // Ensure we have our quad tree available even if it is empty\n                if (!_this.quadTree) {\n                    _this.quadTree = new quad_tree_1.QuadTree(0, 1, 1, 0);\n                }\n                return {};\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for sub components to have a location to update their buffers\n     *\n     * @param {T} props This is the next set of props that are going to be applied to this component\n     */\n    WebGLSurface.prototype.applyBufferChanges = function (props) {\n        // NOTE: This will be implemented by base classes\n    };\n    /**\n     * @override\n     * Start the update loop and register any interesting listeners\n     */\n    WebGLSurface.prototype.componentDidMount = function () {\n        this.animate();\n    };\n    /**\n     * @override\n     * This will set up any unchanging context as well as establish the set of methods\n     * that are to be used within constructed method loops.\n     */\n    WebGLSurface.prototype.componentWillMount = function () {\n        /** Create our context bound projection methods for handing to processes that may need them */\n        this.projection = {\n            screenSizeToWorld: this.screenSizeToWorld.bind(this),\n            screenToWorld: this.screenToWorld.bind(this),\n            worldSizeToScreen: this.worldSizeToScreen.bind(this),\n            worldToScreen: this.worldToScreen.bind(this),\n        };\n        /** Generate our applying props methods to execute within our applyProps process */\n        var basePropsMethods = this.applyPropsMethodsBase();\n        this.propsMethodList = this.applyPropsMethods(basePropsMethods, [\n            basePropsMethods[BaseApplyPropsMethods.INITIALIZE],\n            basePropsMethods[BaseApplyPropsMethods.LABELS],\n            basePropsMethods[BaseApplyPropsMethods.COLORS],\n            basePropsMethods[BaseApplyPropsMethods.BUFFERCHANGES],\n            basePropsMethods[BaseApplyPropsMethods.CAMERA],\n        ]);\n        /** Generate our animated methods to execute within our animation loop */\n        var baseAnimatedMethods = this.animatedMethodsBase();\n        this.animatedMethodList = this.animatedMethods(baseAnimatedMethods, [\n            baseAnimatedMethods[BaseAnimatedMethods.CONTEXT],\n            baseAnimatedMethods[BaseAnimatedMethods.INERTIA],\n            baseAnimatedMethods[BaseAnimatedMethods.POSITION],\n            baseAnimatedMethods[BaseAnimatedMethods.ZOOM],\n        ]);\n    };\n    /**\n     * @override\n     * Simply applies the new injected props\n     *\n     * @param {T} props The new properties to be applied to this component\n     */\n    WebGLSurface.prototype.componentWillReceiveProps = function (props) {\n        this.applyProps(props);\n    };\n    /**\n     * @override\n     * Release listeners and stop update loop\n     */\n    WebGLSurface.prototype.componentWillUnmount = function () {\n        this.stop = true;\n        if (this.quadTree) {\n            this.quadTree.destroy();\n        }\n        this.quadTree = null;\n        this.camera = null;\n        this.sizeCamera = null;\n        this.ctx = null;\n        this.renderEl = null;\n        this.renderer = null;\n        this.scene = null;\n        this.atlasManager.destroyAtlas(this.atlasNames.colors);\n        this.atlasManager.destroyAtlas(this.atlasNames.labels);\n        frame_info_1.FrameInfo.framesPlayed.delete(this);\n    };\n    /**\n     * This is a hook allowing sub classes to have a place to initialize their buffers\n     * and materials etc.\n     */\n    WebGLSurface.prototype.initBuffers = function () {\n        // NOTE: This is to be implemented by subclasses\n    };\n    /**\n     * Hook for subclasses to when the mouse moves. Provides some information\n     * about mouse location and interaction.\n     *\n     * @param {IPoint} mouse Position of the mouse relative to the canvas\n     * @param {IPoint} world Position of the mouse relative to the world space\n     * @param {boolean} isPanning The panning state of the mouse\n     */\n    WebGLSurface.prototype.onMouse = function (mouse, world, isPanning) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse down events\n     */\n    WebGLSurface.prototype.onMouseDown = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse out events\n     */\n    WebGLSurface.prototype.onMouseOut = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse up events and the items that were interacted with in the process\n     *\n     * @param {React.MouseEvent} e The react synthetic event associated with the action\n     * @param {Bounds[]} hitInside The items the mouse interacted with\n     * @param {IPoint} mouse The location of the mouse on the screen\n     * @param {IPoint} world The location of the mouse projected into the world\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseUp = function (e, hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse hovering over an item included in the quadtree\n     *\n     * @param {Bounds[]} hitInside The items hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseHover = function (hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse leaving an item included in the quadtree\n     *\n     * @param {Bounds[]} left The items no longer hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseLeave = function (left, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to changes in the viewport and currently visible items\n     *\n     * @param {Bounds[]} visible\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     * @param {IScreenContext} ctx\n     */\n    WebGLSurface.prototype.onViewport = function (visible, projection, ctx) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Places the camera at a given location in world space\n     *\n     * @param {number} x The x-coordinate for the camera in world space\n     * @param {number} y The x-coordinate for the camera in world space\n     */\n    WebGLSurface.prototype.positionCamera = function (x, y) {\n        if (this.camera) {\n            this.camera.position.set(Math.floor(x), Math.floor(y), this.camera.position.z);\n        }\n    };\n    /**\n     * Projects a screen coordinate to a world coordinate\n     *\n     * @param {number} x The x coord within the screen to project into the world\n     * @param {number} y The y coord within the screen to project into the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenToWorld = function (x, y, obj) {\n        // Get the coordinates in normalized screen space\n        vector.set((x / this.ctx.width) * 2 - 1, -(y / this.ctx.height) * 2 + 1, 0.0);\n        // Unproject the normalized space to the world. It will project\n        // The vector to a REALLY far away z coordinate, but it does not matter\n        // Since we are utilizing an orthographic camera (no perspective distortion)\n        vector.unproject(this.camera);\n        obj = obj || { x: 0, y: 0 };\n        obj.x = vector.x;\n        obj.y = vector.y;\n        return obj;\n    };\n    /**\n     * Projects a size on the screen to the size represented in the world\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenSizeToWorld = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        obj.height = h / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        return obj;\n    };\n    /**\n     * Projects a world coordinate to the screen\n     *\n     * @param {number} x The x coord in the world to project to the screen\n     * @param {number} y The y coord in the world to project to the screen\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {IPoint} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldToScreen = function (x, y, obj) {\n        // This projects to NORMALIZED screen space (-1, 1) range for x and y\n        vector.set(x, y, 0);\n        vector.project(this.camera);\n        // Use the window dimensions to denormalize the vector\n        obj = ramda_1.merge(obj || {}, {\n            x: (vector.x * this.ctx.widthHalf) + this.ctx.widthHalf,\n            y: -(vector.y * this.ctx.heightHalf) + this.ctx.heightHalf,\n        });\n        return obj;\n    };\n    /**\n     * Projects a size within the world to how it would appear on the screen\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldSizeToScreen = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w * this.sizeCamera.zoom;\n        obj.height = h * this.sizeCamera.zoom;\n        return obj;\n    };\n    /**\n     * Sets the zoom level the camera will view the world with\n     *\n     * @param {number} zoom The zoom level. Must be > 0\n     */\n    WebGLSurface.prototype.zoomCamera = function (zoom) {\n        this.camera.zoom = zoom;\n        this.sizeCamera.zoom = zoom;\n        this.camera.updateProjectionMatrix();\n        this.sizeCamera.updateProjectionMatrix();\n    };\n    /**\n     * This is a hook allowing a sub class to update uniforms when the camera is changed in\n     * any way\n     */\n    WebGLSurface.prototype.updateCameraUniforms = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * @override\n     * Only re-render if the dimensions of the component have changed. All other\n     * internal render updates are handled internally\n     *\n     * @param {T} nextProps The next properties injected\n     */\n    WebGLSurface.prototype.shouldComponentUpdate = function (nextProps) {\n        return this.props.width !== nextProps.width || this.props.height !== nextProps.height;\n    };\n    /**\n     * Hook to allow subclasses some control over panning distances\n     *\n     * @param {number} distanceX The distance to pan in the x direction\n     * @param {number} distanceY The distance to pan in the y direction\n     *\n     * @return {Vector3} The vector indicating the direction to pan\n     */\n    WebGLSurface.prototype.willPan = function (distanceX, distanceY) {\n        return new three_1.Vector3(distanceX, distanceY, 0.0);\n    };\n    // -----[ Render ]---------------------------------------------\n    //\n    // In a React app, it's nice to put the render function at the bottom of the\n    // File\n    /**\n     * This should only attempt rendering when the canvas DOM element needs to be resized.\n     * You will note shouldComponentUpdate helps facilitate this.\n     */\n    WebGLSurface.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, width = _a.width, height = _a.height;\n        if (!WEBGL_SUPPORTED) {\n            return React.createElement(\"div\", null, this.props.children || 'Web GL not supported');\n        }\n        return (React.createElement(\"div\", { onMouseDown: this.handleMouseDown, onMouseOut: this.handleMouseOut, onMouseUp: this.handleMouseUp, onMouseLeave: this.handleMouseOut, onMouseMove: this.handleMouseMove, onDoubleClick: function (e) {\n                if (_this.props.onDoubleClick) {\n                    _this.props.onDoubleClick(e);\n                }\n            }, style: { position: 'relative', width: width, height: height } },\n            React.createElement(\"div\", { ref: this.applyRef })));\n    };\n    return WebGLSurface;\n}(React.Component));\nexports.WebGLSurface = WebGLSurface;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/webgl-surface.tsx\n// module id = 26\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_27__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = 27\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process/browser.js\n// module id = 28\n// module chunks = 0","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/debug/src/debug.js\n// module id = 29\n// module chunks = 0","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ms/index.js\n// module id = 30\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_31__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bowser\"\n// module id = 31\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./animated/shared-control-curved-line-buffer-ants\"));\n__export(require(\"./animated/shared-control-curved-line-colors-buffer\"));\n__export(require(\"./base-buffer\"));\n__export(require(\"./static/shared-control-curved-line-buffer\"));\n__export(require(\"./static/simple-bezier-line-buffer\"));\n__export(require(\"./static/simple-label-buffer\"));\n__export(require(\"./static/simple-line-buffer\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/index.ts\n// module id = 32\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBufferAnts = (function (_super) {\n    __extends(SharedControlCurvedLineBufferAnts, _super);\n    function SharedControlCurvedLineBufferAnts() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBufferAnts.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'marching',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBufferAnts.prototype.update = function (shapeBuffer, atlasManager, sharedControl) {\n        if (!shapeBuffer) {\n            return false;\n        }\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control point for all of the vertices\n            uniforms.controlPoint.value = [sharedControl.x, sharedControl.y];\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var marchingAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        var antLength;\n        var antGap;\n        var antSpeed;\n        // We can not accurately send very large numbers via float point into the attributes\n        // So we trim down our time sent to the attribute down to a number that is less than\n        // 16,777,217 which means we can only reliably grab the last 7 digits of the date's time\n        var antStartTime = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            // We will not render the curved line with this buffer if the marching ants are not provided\n            if (!curvedLine.marchingAnts) {\n                console.error('Attempted to render a curved line shape with a marching ant buffer but provided no marching ant metrics. This curved line shape will be skipped', curvedLine);\n                return \"continue\";\n            }\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            antGap = curvedLine.marchingAnts.gapLength;\n            antSpeed = curvedLine.marchingAnts.speed;\n            antLength = curvedLine.marchingAnts.strokeLength + curvedLine.marchingAnts.gapLength;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos, marching, mpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                marching[mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBufferAnts;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBufferAnts = SharedControlCurvedLineBufferAnts;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/animated/shared-control-curved-line-buffer-ants.ts\n// module id = 33\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineColorsBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineColorsBuffer, _super);\n    function SharedControlCurvedLineColorsBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'colorPicks',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'timing',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.update = function (shapeBuffer, atlasManager) {\n        if (!shapeBuffer) {\n            return false;\n        }\n        var uniforms;\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var timingAttributeSize = 2;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorStartStop;\n        var colorEnd;\n        var colorEndStop;\n        var alpha;\n        var startTime;\n        var duration;\n        var controlRef;\n        var controlPoint;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorEnd = curvedLine.endColor.base.colorIndex;\n            colorEndStop = curvedLine.endColorStop.base.colorIndex;\n            colorStart = curvedLine.startColor.base.colorIndex;\n            colorStartStop = curvedLine.startColorStop.base.colorIndex;\n            duration = curvedLine.duration;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.currentStart;\n            p2 = curvedLine.currentEnd;\n            startTime = curvedLine.startTime;\n            controlPoint = curvedLine.controlPoints[1];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colorPicks, cpos, controlPick, ctpos, timing, tpos, normals, npos, endPoints, epos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                controlPick[ctpos] = controlRef;\n                cpos += colorAttributeSize;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[wpos] = halfWidthSize;\n                normals[npos] = 1;\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                tpos += timingAttributeSize;\n                // TR\n                colorPicks[cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[tpos] = startTime;\n                timing[++tpos] = duration;\n                // BR\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // TL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // BL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++ctpos] = controlRef;\n            }, \n            // We force updates for this buffer since it has animated properties\n            // Such as currentStartStop and currentEndStop which calculates\n            // Animations on the CPU side.\n            true);\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineColorsBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineColorsBuffer = SharedControlCurvedLineColorsBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/animated/shared-control-curved-line-colors-buffer.ts\n// module id = 34\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineBuffer, _super);\n    function SharedControlCurvedLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBuffer.prototype.update = function (shapeBuffer, atlasManager, sharedControl) {\n        if (!shapeBuffer) {\n            return false;\n        }\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control point for all of the vertices\n            uniforms.controlPoint.value = [sharedControl.x, sharedControl.y];\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBuffer = SharedControlCurvedLineBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/shared-control-curved-line-buffer.ts\n// module id = 35\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This ONLY supports a single color\n */\nvar SimpleStaticBezierLineBuffer = (function (_super) {\n    __extends(SimpleStaticBezierLineBuffer, _super);\n    function SimpleStaticBezierLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticBezierLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0, 0],\n                name: 'controlPoint',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticBezierLineBuffer.prototype.update = function (shapeBuffer) {\n        if (!shapeBuffer) {\n            return false;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var color;\n        var alpha;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            color = curvedLine.startColor.base.color;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colors, cpos, normals, npos, endPoints, epos, controlPoints, copos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                cpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticBezierLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticBezierLineBuffer = SimpleStaticBezierLineBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-bezier-line-buffer.ts\n// module id = 36\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\nvar SimpleStaticLabelBuffer = (function (_super) {\n    __extends(SimpleStaticLabelBuffer, _super);\n    function SimpleStaticLabelBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLabelBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 1],\n                name: 'texCoord',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'size',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0, 0],\n                name: 'anchor',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLabelBuffer.prototype.update = function (shapeBuffer, atlasManager, startFade, endFade, labelMaxSize) {\n        // Make some constants and props for our buffer update loop\n        var numVerticesPerQuad = 6;\n        var colorAttributeSize = 1;\n        var texCoordAttributeSize = 3;\n        var sizeAttributSize = 2;\n        var label;\n        var texture;\n        var color;\n        var alpha;\n        var anchor;\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].color;\n            var colorBase = colorRef.base;\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            atlas.needsUpdate = true;\n            if (startFade || endFade || labelMaxSize) {\n                material = this.bufferItems.system.material;\n                uniforms = material.uniforms;\n                if (startFade)\n                    uniforms.startFade.value = startFade;\n                if (endFade)\n                    uniforms.endFade.value = endFade;\n                if (labelMaxSize)\n                    uniforms.maxLabelSize.value = labelMaxSize;\n            }\n        }\n        if (!shapeBuffer) {\n            return false;\n        }\n        var updated = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this.bufferItems, numVerticesPerQuad, shapeBuffer.length, function (i, positions, ppos, colors, cpos, texCoords, tpos, sizes, spos, anchors, apos) {\n            label = shapeBuffer[i];\n            texture = label.rasterizedLabel;\n            color = label.color.base;\n            alpha = label.color.base.opacity;\n            anchor = {\n                x: label.getLocation().x + label.getSize().width * Math.cos(label.getRotation()),\n                y: label.getLocation().y + label.getSize().width * Math.sin(label.getRotation()),\n            };\n            // Make sure the label is updated with it's latest metrics\n            label.update();\n            // Copy first vertex twice for intro degenerate tri\n            positions[ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            anchors[apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // Skip over degenerate tris color and tex\n            cpos += colorAttributeSize;\n            tpos += texCoordAttributeSize;\n            spos += sizeAttributSize;\n            // TR\n            positions[++ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            texCoords[tpos] = texture.atlasTR.x;\n            texCoords[++tpos] = texture.atlasTR.y;\n            texCoords[++tpos] = alpha;\n            colors[cpos] = color.colorIndex;\n            sizes[spos] = label.getSize().width;\n            sizes[++spos] = label.getSize().height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BR\n            positions[++ppos] = label.BR.x;\n            positions[++ppos] = label.BR.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBR.x;\n            texCoords[++tpos] = texture.atlasBR.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = label.getSize().width;\n            sizes[++spos] = label.getSize().height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // TL\n            positions[++ppos] = label.TL.x;\n            positions[++ppos] = label.TL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasTL.x;\n            texCoords[++tpos] = texture.atlasTL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = label.getSize().width;\n            sizes[++spos] = label.getSize().height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BL\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBL.x;\n            texCoords[++tpos] = texture.atlasBL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = label.getSize().width;\n            sizes[++spos] = label.getSize().height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // Copy last vertex again for degenerate tri\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n        });\n        this.bufferItems.geometry.setDrawRange(0, numVerticesPerQuad * shapeBuffer.length);\n        return updated;\n    };\n    return SimpleStaticLabelBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLabelBuffer = SimpleStaticLabelBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-label-buffer.ts\n// module id = 37\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\nvar SimpleStaticLineBuffer = (function (_super) {\n    __extends(SimpleStaticLineBuffer, _super);\n    function SimpleStaticLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLineBuffer.prototype.update = function (shapeBuffer) {\n        var needsUpdate = false;\n        var numVerticesPerSegment = 6;\n        var colorAttributeSize = 4;\n        var stripPos = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var TR;\n        var BR;\n        var TL;\n        var BL;\n        var color;\n        var alpha;\n        var _loop_1 = function (curvedLine) {\n            var strip = curvedLine.getTriangleStrip();\n            color = curvedLine.startColor.base.color;\n            alpha = curvedLine.startColor.base.opacity;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, strip.length / 4, function (i, positions, ppos, colors, cpos) {\n                stripPos = i * 4;\n                TR = strip[stripPos];\n                BR = strip[stripPos + 1];\n                TL = strip[stripPos + 2];\n                BL = strip[stripPos + 3];\n                // 1\n                positions[ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n                // 2\n                positions[++ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 3\n                positions[++ppos] = BR.x;\n                positions[++ppos] = BR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 4\n                positions[++ppos] = TL.x;\n                positions[++ppos] = TL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 5\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 6\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n            });\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLineBuffer = SimpleStaticLineBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-line-buffer.ts\n// module id = 38\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./reference/reference-color\"));\n__export(require(\"./animation/animated-curved-line-shape\"));\n__export(require(\"./shape/circle-shape\"));\n__export(require(\"./shape/curved-line-shape\"));\n__export(require(\"./shape/edge-shape\"));\n__export(require(\"./shape/image-shape\"));\n__export(require(\"./shape/label\"));\n__export(require(\"./shape/line-shape\"));\n__export(require(\"./shape/quad-shape\"));\n__export(require(\"./texture/atlas-color\"));\n__export(require(\"./texture/atlas-manager\"));\n__export(require(\"./texture/atlas-texture\"));\n__export(require(\"./texture/sprite\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/index.ts\n// module id = 39\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines a reference to a color that has been rendered to a texture\n * (See AtlasColor). This exposes the only properties that MAY be utilized\n * in a shader to modify the existing values without altering what is rendered\n * on the texture.\n */\nvar ReferenceColor = (function () {\n    /**\n     * Creates an instance of ReferenceColor.\n     *\n     * @param {AtlasColor} base The color to be based off of\n     */\n    function ReferenceColor(base) {\n        this.base = base;\n    }\n    return ReferenceColor;\n}());\nexports.ReferenceColor = ReferenceColor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/reference/reference-color.ts\n// module id = 40\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar easing_1 = require(\"../../util/easing\");\nvar frame_info_1 = require(\"../../util/frame-info\");\nvar interpolation_1 = require(\"../../util/interpolation\");\nvar curved_line_shape_1 = require(\"../shape/curved-line-shape\");\n/**\n * This represents curved lines and what it would take to animate various properties.\n * While this provides helpers to aid in animating the properties, it is up to\n * buffers, shaders and materials to render those changes appropriately.\n */\nvar AnimatedCurvedLineShape = (function (_super) {\n    __extends(AnimatedCurvedLineShape, _super);\n    function AnimatedCurvedLineShape(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This defines the suggested easing for the animation for any of\n         * the values.\n         */\n        _this.easing = easing_1.linear;\n        _this._startColorChange = new three_1.Color(0, 0, 0);\n        _this._endColorChange = new three_1.Color(0, 0, 0);\n        /** The starting end point's destination */\n        _this.startStop = { x: 0, y: 0 };\n        _this.endStop = { x: 0, y: 0 };\n        /**\n         * This calculates the current start color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentStartColor = new three_1.Color(0, 0, 0);\n        /**\n         * This calculates the current end color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentEndColor = new three_1.Color(0, 0, 0);\n        if (options) {\n            _this.startStop = options.startStop || { x: 0, y: 0 };\n            _this.endStop = options.endStop || { x: 0, y: 0 };\n            if (options.startColorStop) {\n                _this.startColorStop = options.startColorStop;\n            }\n            if (options.endColorStop) {\n                _this.endColorStop = options.endColorStop;\n            }\n        }\n        return _this;\n    }\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"startColorStop\", {\n        get: function () {\n            return this._startColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._startColorStop = value;\n            this._startColorChange.r = newBase.r - startBase.r;\n            this._startColorChange.g = newBase.g - startBase.g;\n            this._startColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"endColorStop\", {\n        get: function () {\n            return this._endColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._endColorStop = value;\n            this._endColorChange.r = newBase.r - startBase.r;\n            this._endColorChange.g = newBase.g - startBase.g;\n            this._endColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStartColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var startBase = this.startColor.base.color;\n            this._currentStartColor.r = this.easing(time, startBase.r, this._startColorChange.r, this.duration);\n            this._currentStartColor.g = this.easing(time, startBase.g, this._startColorChange.g, this.duration);\n            this._currentStartColor.b = this.easing(time, startBase.b, this._startColorChange.b, this.duration);\n            return this._currentStartColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEndColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var endBase = this.endColor.base.color;\n            this._currentEndColor.r = this.easing(time, endBase.r, this._endColorChange.r, this.duration);\n            this._currentEndColor.g = this.easing(time, endBase.g, this._endColorChange.g, this.duration);\n            this._currentEndColor.b = this.easing(time, endBase.b, this._endColorChange.b, this.duration);\n            return this._currentEndColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStart\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            var newStart = interpolation_1.circular(easedTime, this.start, this.startStop, this.controlPoints[1]);\n            return newStart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEnd\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            // Apply the circular interpolation to the points\n            return interpolation_1.circular(easedTime, this.end, this.endStop, this.controlPoints[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimatedCurvedLineShape;\n}(curved_line_shape_1.CurvedLineShape));\nexports.AnimatedCurvedLineShape = AnimatedCurvedLineShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/animation/animated-curved-line-shape.ts\n// module id = 41\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = require(\"d3-color\");\nvar circle_1 = require(\"../../primitives/circle\");\n/**\n * Defines a circular shape that can be drawn\n */\nvar CircleShape = (function (_super) {\n    __extends(CircleShape, _super);\n    /**\n     * Sets the properties of the shape to be drawn\n     *\n     * @param x Center of the circle\n     * @param y Center of the circle\n     * @param r The radius of the circle\n     * @param color The color of the circle\n     * @param color The color within the inner radius of the circle\n     * @param innerR The inner radius of the circle\n     * @param d A data object to associate with this circle\n     */\n    function CircleShape(x, y, r, color, innerColor, innerR, d) {\n        var _this = _super.call(this, x, y, r, d) || this;\n        // Color\n        _this.r = 0;\n        _this.g = 0;\n        _this.b = 0;\n        _this.a = 0;\n        // Inner radius color\n        _this.r2 = 0;\n        _this.g2 = 0;\n        _this.b2 = 0;\n        _this.a2 = 0;\n        // Other properties\n        _this.alpha = 0;\n        _this.innerRadius = 0;\n        _this.ringWidth = 0;\n        _this.ringPad = 0;\n        _this.outline = false;\n        if (color) {\n            // FIXME: This is solving a bizarre potential race condition (or other voodoo) where the numbers are not being\n            // Applied correctly to this object when applying the d3 color object properties to this.\n            var r_1 = color.r, g = color.g, b = color.b, opacity = color.opacity;\n            _this.setOuterColor({ r: r_1, g: g, b: b, opacity: opacity });\n        }\n        if (innerR === undefined) {\n            innerR = 0;\n        }\n        _this.innerRadius = innerR;\n        if (innerColor) {\n            _this.setInnerColor(innerColor);\n        }\n        return _this;\n    }\n    /**\n     * Sets the color of the outer drawn radius\n     *\n     * @param color\n     */\n    CircleShape.prototype.setOuterColor = function (color) {\n        var r = color.r, g = color.g, b = color.b, opacity = color.opacity;\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = opacity;\n    };\n    /**\n     * Sets the color of the inner drawn radius\n     *\n     * @param color\n     */\n    CircleShape.prototype.setInnerColor = function (color) {\n        this.r2 = color.r;\n        this.g2 = color.g;\n        this.b2 = color.b;\n        this.a2 = color.opacity;\n    };\n    /**\n     * Clones this instance of the circle shape and creates a new instance of a circle shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this circleshape\n     */\n    CircleShape.prototype.clone = function (newProperties) {\n        return Object.assign(new CircleShape(this._centerX, this._centerY, this._radius, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.innerRadius, this.d), this, newProperties);\n    };\n    /**\n     * Clones this instance of the circle shape and creates a new instance of a circle shape that\n     * is identical to this one. This will perform the clone but will change the data type\n     * associated with the circle in the cloned instance\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this circleshape\n     */\n    CircleShape.prototype.cloneWithData = function (newProperties) {\n        return Object.assign(new CircleShape(this._centerX, this._centerY, this._radius, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.innerRadius), this, newProperties);\n    };\n    return CircleShape;\n}(circle_1.Circle));\nexports.CircleShape = CircleShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/circle-shape.ts\n// module id = 42\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = require(\"d3-color\");\nvar line_1 = require(\"../../primitives/line\");\nvar line_shape_1 = require(\"./line-shape\");\n/**\n * This defines an edge that can be drawn.\n * This type of edge is a quad with distorted ends. The quad will represent a\n * line with each end having potentially different sizes thus giving a four sided\n * polygon rather than a parallelogram.\n *\n * The edge shape also doubles up as a simple line shape should it be desired to\n * render differently.\n */\nvar EdgeShape = (function (_super) {\n    __extends(EdgeShape, _super);\n    /**\n     * Constructor with basic parameters to declare an edge\n     *\n     * @param p1 The point the edge begins at\n     * @param p2 The point the edge terminates at\n     * @param d The data associated with the edge\n     * @param p1Col The color at the start point\n     * @param p2Col The color at the end point\n     * @param p1Width The width at the start point. Example: if you specify 4, then\n     *                the start part of the edge will fan out 2 on either side of the\n     *                start point\n     * @param p2Width The width at the end point. Example: if you specify 4, then\n     *                the end part of the edge will fan out 2 on either side of the\n     *                end point\n     */\n    function EdgeShape(p1, p2, d, p1Col, p2Col, p1Width, p2Width) {\n        var _this = \n        // Set up all of our line shape based metrics\n        _super.call(this, p1, p2, d, p1Col.r, p1Col.g, p1Col.b, p1Col.opacity, p2Col.r, p2Col.g, p2Col.b, p2Col.opacity, p1Width) || this;\n        /** Top left of the quad to generate this edge */\n        _this.tl = { x: 0, y: 0 };\n        /** Bottom left of the quad to generate this edge */\n        _this.bl = { x: 0, y: 0 };\n        /** Top right of the quad to generate this edge */\n        _this.tr = { x: 0, y: 0 };\n        /** Bottom Right of the quad to generate this edge */\n        _this.br = { x: 0, y: 0 };\n        /** The width of the edge at the termination point */\n        _this.endWidth = 1;\n        _this.endWidth = p2Width;\n        _this.setPoints(p1, p2);\n        return _this;\n    }\n    /**\n     * Clones this instance of the edge shape and creates a new instance of an edge shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {EdgeShape} A newly cloned instance of this edgeshape\n     */\n    EdgeShape.prototype.clone = function (newProperties) {\n        return Object.assign(new EdgeShape(this.p1, this.p2, this.d, d3_color_1.rgb(this.r, this.g, this.b, this.a), d3_color_1.rgb(this.r2, this.g2, this.b2, this.a2), this.thickness, this.endWidth), this, newProperties);\n    };\n    /**\n     * Algorithm provided by\n     * https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n     * Adapted to Javascript by Chris @ VoidRay co\n     *\n     * Remember the point must be in the same\n     * coordinate system that the edge is using\n     *\n     * @param {number} point The point to test\n     *\n     * @return {boolean} True if the point is inside the edge\n     */\n    EdgeShape.prototype.pointInside = function (point) {\n        var testx = point.x;\n        var testy = point.y;\n        // This is an algortihm to handle any number of points for a polygon. In this\n        // Case our polygon is simply the points that make this fat edge. Note:\n        // The points MUST be in CW order\n        var points = [this.tl, this.tr, this.br, this.bl];\n        var numberVertices = points.length;\n        var isClockwise = false;\n        for (var i = 0, j = numberVertices - 1; i < numberVertices; j = i++) {\n            if (((points[i].y > testy) !== (points[j].y > testy)) &&\n                (testx < (points[j].x - points[i].x) * (testy - points[i].y) /\n                    (points[j].y - points[i].y) + points[i].x)) {\n                isClockwise = !isClockwise;\n            }\n        }\n        return isClockwise;\n    };\n    /**\n     * @override\n     * This sets the two endpoints for this edge and recalculates the bounds\n     * of the edge accordingly.\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    EdgeShape.prototype.setPoints = function (p1, p2) {\n        _super.prototype.setPoints.call(this, p1, p2);\n        if (this.tl) {\n            // Get the distance from the points we will go based on specified widths\n            var p1Dx = this.thickness / 2;\n            var p2Dx = this.endWidth / 2;\n            // Calculate the deltas to get from point to quad edge\n            var p1DeltaX = this.perpendicular.x * p1Dx;\n            var p1DeltaY = this.perpendicular.y * p1Dx;\n            var p2DeltaX = this.perpendicular.x * p2Dx;\n            var p2DeltaY = this.perpendicular.y * p2Dx;\n            // Apply the metrics to our quad points\n            // Start side of the edge\n            this.tl.x = this.p1.x + p1DeltaX;\n            this.tl.y = this.p1.y + p1DeltaY;\n            this.bl.x = this.p1.x - p1DeltaX;\n            this.bl.y = this.p1.y - p1DeltaY;\n            // End side of the edge\n            this.tr.x = this.p2.x + p2DeltaX;\n            this.tr.y = this.p2.y + p2DeltaY;\n            this.br.x = this.p2.x - p2DeltaX;\n            this.br.y = this.p2.y - p2DeltaY;\n            // Create lines for the edges for computations and faster hit detections\n            this.topEdge = new line_1.Line(this.tl, this.tr);\n            this.bottomEdge = new line_1.Line(this.bl, this.br);\n            // Make sure our bounds reflects the entirety of the fat edge\n            this.encapsulatePoints([this.tl, this.tr, this.bl, this.br]);\n        }\n    };\n    return EdgeShape;\n}(line_shape_1.LineShape));\nexports.EdgeShape = EdgeShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/edge-shape.ts\n// module id = 43\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * Defines an image that can be rendered by the gpu. This is an axis oriented\n * image only (no rotations)\n */\nvar ImageShape = (function (_super) {\n    __extends(ImageShape, _super);\n    /**\n     * Generates a new ImageShape that can be rendered\n     *\n     * @param {AtlasTexture} image The AtlasTexture to use when rendering this image\n     * @param {number} size This is the size of the longest edge of the image while\n     *                      retaining aspect ratio.\n     */\n    function ImageShape(image, size) {\n        var _this = _super.call(this, 0, 0, size, size) || this;\n        /** This is the level of opacity the image will be rendered with */\n        _this.opacity = 1.0;\n        _this.texture = image;\n        _this.size = size;\n        return _this;\n    }\n    Object.defineProperty(ImageShape.prototype, \"size\", {\n        /**\n         * Returns the largest edge of the image\n         */\n        get: function () {\n            return Math.max(this.width, this.height);\n        },\n        /**\n         * This is the size the image will be rendered within World Space. The size\n         * correlates to the largest edge of the image\n         */\n        set: function (val) {\n            if (this.texture.aspectRatio > 1) {\n                this.width = val;\n                this.height = val / this.texture.aspectRatio;\n            }\n            else {\n                this.width = val * this.texture.aspectRatio;\n                this.height = val;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Centers this image on a provided location\n     *\n     * @param {number} x The x coordinate in world space\n     * @param {number} y The y coordinate in world space\n     */\n    ImageShape.prototype.centerOn = function (x, y) {\n        this.x = x - (this.width / 2.0);\n        this.y = y - (this.height / 2.0);\n    };\n    return ImageShape;\n}(bounds_1.Bounds));\nexports.ImageShape = ImageShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/image-shape.ts\n// module id = 44\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar QuadShape = (function (_super) {\n    __extends(QuadShape, _super);\n    function QuadShape(bounds, color) {\n        var _this = _super.call(this, bounds.x, bounds.right, bounds.y, bounds.bottom) || this;\n        _this.r = 1.0;\n        _this.g = 0.0;\n        _this.b = 0.0;\n        _this.a = 1.0;\n        return _this;\n    }\n    return QuadShape;\n}(bounds_1.Bounds));\nexports.QuadShape = QuadShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/quad-shape.ts\n// module id = 45\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\n/**\n * Defines a color that is located on an atlas\n */\nvar AtlasColor = (function () {\n    /**\n     * Constructor implementation\n     */\n    function AtlasColor(color, g, b, a) {\n        if (a === void 0) { a = 1.0; }\n        // Value between 1 - 0 for the opacity of the color\n        this.opacity = 1.0;\n        // The pixel width and height of the color rendered onto the atlas\n        // This will always be a 2x2 so the color can be sampled in the middle\n        // For a guaranteed pure color regardless of gl sampling states\n        this.pixelWidth = 2;\n        this.pixelHeight = 2;\n        if (color instanceof three_1.Color) {\n            this.color = color.clone();\n            this.opacity = g === undefined ? 1.0 : g;\n        }\n        else {\n            this.color = new three_1.Color(color, g, b);\n            this.opacity = a;\n        }\n    }\n    return AtlasColor;\n}());\nexports.AtlasColor = AtlasColor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/atlas-color.ts\n// module id = 46\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./circle\"));\n__export(require(\"./curved-line\"));\n__export(require(\"./line\"));\n__export(require(\"./point\"));\n__export(require(\"./rotateable-quad\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/index.ts\n// module id = 47\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./buffer-util\"));\n__export(require(\"./custom-selection\"));\n__export(require(\"./get-font-metrics\"));\n__export(require(\"./pack-node\"));\n__export(require(\"./quad-tree\"));\n__export(require(\"./shape-buffer-cache\"));\n__export(require(\"./animated-shape-buffer-cache\"));\n__export(require(\"./interpolation\"));\n__export(require(\"./mouse\"));\n__export(require(\"./frame-info\"));\n__export(require(\"./easing\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/index.ts\n// module id = 48\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Takes a map of the form <T, boolean> and returns an array of the keys,\n * excluding entries who's mapped value is false.\n *\n * @param map The map to convert to a list\n *\n * @return T[] A list of the keys, exluding false mappings\n */\nfunction boolMapToArray(map) {\n    return Array\n        .from(map)\n        .filter(function (item) { return item[1]; })\n        .map(function (item) { return item[0]; });\n}\nexports.boolMapToArray = boolMapToArray;\n/**\n * Defines a selection control for custom types and categories\n */\nvar CustomSelection = (function () {\n    function CustomSelection() {\n        /** This caches the list generation of a selection */\n        this.cachedSelection = new Map();\n        /** Map of the custom categories to the selection state */\n        this.selections = new Map();\n        /** Keeps flags indicating if a selection for a given category has changed or not */\n        this._didSelectionChange = new Map();\n    }\n    /**\n     * Clears out all custom selections for every category\n     */\n    CustomSelection.prototype.clearAllSelections = function () {\n        for (var _i = 0, _a = Array.from(this.selections.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.clearSelection(key);\n        }\n    };\n    /**\n     * Clears the selection for the category specified\n     *\n     * @param {string} category Name of the category of selection\n     */\n    CustomSelection.prototype.clearSelection = function (category) {\n        // We must have selected items to clear the selection\n        if (this.getSelection(category).length) {\n            this.selections.set(category, null);\n            this.cachedSelection.set(category, null);\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Makes an item no longer flaged as selected within the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to remove from being selected\n     */\n    CustomSelection.prototype.deselect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        // See if the item is selected already, if it is, clear the selection and bust caches\n        if (selectionMap && selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, false);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Checks if a selection from a category has been modified\n     *\n     * @param {string} category The selection category to check\n     */\n    CustomSelection.prototype.didSelectionCategoryChange = function (category) {\n        return this._didSelectionChange.get(category);\n    };\n    /**\n     * Checks if ANY selection has changed\n     *\n     * @return {boolean} True if any selection has changed\n     */\n    CustomSelection.prototype.didSelectionChange = function () {\n        return boolMapToArray(this._didSelectionChange).length > 0;\n    };\n    /**\n     * This indicates that updates have taken place to account for selection\n     * changes.\n     */\n    CustomSelection.prototype.finalizeUpdate = function () {\n        for (var _i = 0, _a = Array.from(this._didSelectionChange.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this._didSelectionChange.set(key, false);\n        }\n    };\n    /**\n     * This retrieves a list of the items that are selected\n     *\n     * @param category The selection category to check on\n     *\n     * @return {T} Returns a list of items that are currently selected\n     */\n    CustomSelection.prototype.getSelection = function (category) {\n        if (!this.cachedSelection.get(category)) {\n            var theSelection = this.selections.get(category);\n            if (theSelection) {\n                this.cachedSelection.set(category, boolMapToArray(theSelection));\n            }\n            else {\n                this.cachedSelection.set(category, []);\n            }\n        }\n        return this.cachedSelection.get(category);\n    };\n    /**\n     * Specifies an item to flag as selected for the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.select = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        if (!selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, true);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Specifies an item to toggle it's selection status for the provided category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.toggleSelect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        // Clear the cache for the selection list\n        this.cachedSelection.set(category, null);\n        // Toggle the selection off if already selected\n        if (selectionMap.get(item)) {\n            this.deselect(category, item);\n        }\n        else {\n            this.select(category, item);\n        }\n        // Flag the category of selections as changed\n        this._didSelectionChange.set(category, true);\n    };\n    return CustomSelection;\n}());\nexports.CustomSelection = CustomSelection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/custom-selection.ts\n// module id = 49\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getFontMetrics(props) {\n    var ctx = props.ctx;\n    var text = props.text;\n    var bboxHeight = props.bboxHeight;\n    var canvasHeight = props.ctx.canvas.height;\n    var baseline = props.baseline || 'alphabetic';\n    var flip = props.flip || false;\n    var drawBaseline = props.drawBaseline || false;\n    var fontFamily = 'Arial, san-serif';\n    var fontSize = 14;\n    if (props.fontFamily) {\n        fontFamily = props.fontFamily;\n    }\n    if (props.fontSize) {\n        fontSize = props.fontSize;\n    }\n    // Setting up the canvas\n    ctx.save(); // Create canvas to use as buffer\n    ctx.font = fontSize + \"px \" + fontFamily;\n    var textWidth = ctx.measureText(text).width;\n    // This keeps font in-screen, measureText().width doesn't\n    // Quite do it in some cases. For instance \"j\", or the letter \"f\"\n    // In the font \"Zapfino\".\n    var offsetx = fontSize * 2;\n    var offsety = fontSize * 2;\n    var cwidth = ctx.canvas.width = Math.round(textWidth + offsetx * 2);\n    var cheight = ctx.canvas.height = canvasHeight ? canvasHeight : Math.round(offsety * 2);\n    if (typeof (baseline) === 'string') {\n        offsety = 0; // Using <canvas> baseline\n        ctx.textBaseline = baseline;\n    }\n    // Ctx.font has to be called twice because resetting the size resets the state\n    if (flip) {\n        ctx.scale(1, -1);\n    }\n    ctx.font = fontSize + \"px \" + fontFamily;\n    ctx.fillText(text, offsetx, (typeof (bboxHeight) === 'number' ? bboxHeight : offsety));\n    // Drawing baseline\n    if (drawBaseline) {\n        ctx.fillRect(0, canvasHeight / 2, ctx.canvas.width, 1);\n    }\n    // Grabbing image data\n    var imageData = ctx.getImageData(0, 0, cwidth, cheight);\n    var data = imageData.data;\n    // Calculating top\n    var top = 0;\n    var pos = data.length;\n    var bottom = 0;\n    var realBottom = 0;\n    var left = 0;\n    var right = 0;\n    while (pos > 0) {\n        if (data[pos + 3]) {\n            pos -= pos % (cwidth * 4); // Back to beginning of the line top = (pos / 4) / cwidth; // calculate pixel position top -= offsety - fontSize; pos = data.length; // exit loop } pos += 4; } // calculating bottom var bottom = 0; var pos = data.length; while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                bottom = (pos / 4) / cwidth;\n                bottom -= offsety - fontSize;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Calculating left\n        left = 0;\n        var col = 0;\n        var row = 0; // Left bounds\n        while (row < cheight && col < cwidth) {\n            var px = data[(row * cwidth * 4) + (col * 4) + 3];\n            if (px) {\n                left = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col++;\n            }\n        }\n        // Calculating right\n        right = 0;\n        col = cwidth;\n        row = 0; // Right bounds\n        while (row < cheight && col > 0) {\n            if (data[(row * cwidth * 4) + (col * 4) + 3]) {\n                right = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col--;\n            }\n        }\n        // Calculating real-bottom\n        realBottom = 0;\n        pos = data.length;\n        while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                realBottom = (pos / 4) / cwidth;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Restoring state\n        ctx.restore();\n    }\n    // Returning raw-metrics\n    return {\n        bottom: realBottom,\n        height: (bottom - top),\n        left: (-left),\n        top: (fontSize - top),\n        width: (right - left),\n    };\n}\nexports.getFontMetrics = getFontMetrics;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/get-font-metrics.ts\n// module id = 50\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shape_buffer_cache_1 = require(\"./shape-buffer-cache\");\nvar PlayState;\n(function (PlayState) {\n    PlayState[PlayState[\"INIT\"] = 0] = \"INIT\";\n    PlayState[PlayState[\"PLAY\"] = 1] = \"PLAY\";\n    PlayState[PlayState[\"STOP\"] = 2] = \"STOP\";\n})(PlayState = exports.PlayState || (exports.PlayState = {}));\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar AnimatedShapeBufferCache = (function (_super) {\n    __extends(AnimatedShapeBufferCache, _super);\n    function AnimatedShapeBufferCache() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.playState = PlayState.INIT;\n        _this.buffer = [];\n        _this.bustCache = true;\n        /**\n         * This is the internal control for managing execution of the animate method\n         */\n        _this.doAnimate = function () {\n            if (_this.playState === PlayState.PLAY) {\n                requestAnimationFrame(_this.doAnimate);\n            }\n            _this.animate();\n        };\n        return _this;\n    }\n    /**\n     * This is the method that will execute with the frame rate. Subclasses can\n     * override this to implement animated changes\n     */\n    AnimatedShapeBufferCache.prototype.animate = function () {\n        // Implemented by subclasses\n    };\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    AnimatedShapeBufferCache.prototype.generate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this.bustCache) {\n            this.buildCache.apply(this, args);\n            this.bustCache = false;\n            if (this.playState === PlayState.INIT) {\n                this.start();\n                requestAnimationFrame(this.doAnimate);\n            }\n        }\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    AnimatedShapeBufferCache.prototype.buildCache = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Animated buffers are ALWAYS new every frame if playing\n     * Get the buffer the cache has generated\n     */\n    AnimatedShapeBufferCache.prototype.getBuffer = function () {\n        if (this.playState === PlayState.PLAY) {\n            return [].concat(this.buffer);\n        }\n        return this.buffer;\n    };\n    /**\n     * Begins executing the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.start = function () {\n        this.playState = PlayState.PLAY;\n    };\n    /**\n     * Ceases the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.stop = function () {\n        this.playState = PlayState.STOP;\n    };\n    return AnimatedShapeBufferCache;\n}(shape_buffer_cache_1.ShapeBufferCache));\nexports.AnimatedShapeBufferCache = AnimatedShapeBufferCache;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/animated-shape-buffer-cache.ts\n// module id = 51\n// module chunks = 0"],"sourceRoot":""}