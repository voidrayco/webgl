{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.js","webpack:///webpack/bootstrap a3332646dfaa2fe730c3","webpack:///external \"three\"","webpack:///./src/webgl-surface/primitives/bounds.ts","webpack:///./node_modules/debug/src/browser.js","webpack:///./src/webgl-surface/util/buffer-util.ts","webpack:///./src/webgl-surface/buffers/base-buffer.ts","webpack:///./src/webgl-surface/primitives/point.ts","webpack:///./src/webgl-surface/primitives/line.ts","webpack:///external \"ramda\"","webpack:///./src/webgl-surface/drawing/texture/atlas-texture.ts","webpack:///./src/webgl-surface/util/frame-info.ts","webpack:///./src/webgl-surface/util/easing.ts","webpack:///./src/webgl-surface/util/interpolation.ts","webpack:///./src/webgl-surface/drawing/texture/atlas-manager.ts","webpack:///./src/webgl-surface/util/pack-node.ts","webpack:///./src/webgl-surface/drawing/shape/label.ts","webpack:///./src/webgl-surface/primitives/rotateable-quad.ts","webpack:///./src/webgl-surface/drawing/texture/sprite.ts","webpack:///./src/webgl-surface/util/mouse.ts","webpack:///./src/webgl-surface/util/quad-tree.ts","webpack:///./src/webgl-surface/util/webgl-stat.ts","webpack:///./src/webgl-surface/drawing/shape/curved-line-shape.ts","webpack:///./src/webgl-surface/primitives/curved-line.ts","webpack:///./src/webgl-surface/primitives/circle.ts","webpack:///./src/webgl-surface/drawing/shape/line-shape.ts","webpack:///./src/webgl-surface/util/multi-shape-buffer-cache.ts","webpack:///./src/webgl-surface/util/shape-buffer-cache.ts","webpack:///./src/index.ts","webpack:///./src/webgl-surface/webgl-surface.tsx","webpack:///external \"react\"","webpack:///external \"d3-color\"","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/debug/src/debug.js","webpack:///./node_modules/ms/index.js","webpack:///external \"bowser\"","webpack:///./src/webgl-surface/buffers/index.ts","webpack:///./src/webgl-surface/buffers/animated/shared-control-curved-line-buffer-ants.ts","webpack:///./src/webgl-surface/buffers/animated/shared-control-curved-line-colors-buffer.ts","webpack:///./src/webgl-surface/buffers/static/shared-control-curved-line-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-bezier-line-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-circle-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-label-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-line-buffer.ts","webpack:///./src/webgl-surface/buffers/static/simple-straight-line-buffer.ts","webpack:///./src/webgl-surface/drawing/index.ts","webpack:///./src/webgl-surface/drawing/reference/reference-color.ts","webpack:///./src/webgl-surface/drawing/animation/animated-curved-line-shape.ts","webpack:///./src/webgl-surface/drawing/shape/circle-shape.ts","webpack:///./src/webgl-surface/drawing/shape/edge-shape.ts","webpack:///./src/webgl-surface/drawing/shape/image-shape.ts","webpack:///./src/webgl-surface/drawing/shape/quad-shape.ts","webpack:///./src/webgl-surface/drawing/texture/atlas-color.ts","webpack:///./src/webgl-surface/primitives/index.ts","webpack:///./src/webgl-surface/util/index.ts","webpack:///./src/webgl-surface/util/animate.ts","webpack:///./src/webgl-surface/util/animated-shape-buffer-cache.ts","webpack:///./src/webgl-surface/util/custom-selection.ts","webpack:///./src/webgl-surface/util/get-font-metrics.ts"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_0__","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_28__","__WEBPACK_EXTERNAL_MODULE_29__","__WEBPACK_EXTERNAL_MODULE_33__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","Bounds","left","right","top","bottom","height","width","x","y","arguments","length","containsPoint","point","copyBounds","b","encapsulate","bounds","encapsulateBounds","sizeToFirst","minX","Number","MAX_VALUE","maxX","minY","maxY","forEach","encapsulatePoint","encapsulatePoints","points","undefined","fits","inner","hitBounds","pointInside","isBounds","isInside","maxBounds","MIN_VALUE","process","useColors","window","type","document","documentElement","style","WebkitAppearance","console","firebug","exception","table","navigator","userAgent","toLowerCase","match","parseInt","RegExp","$1","formatArgs","args","namespace","humanize","diff","color","splice","index","lastC","replace","log","Function","apply","save","namespaces","storage","removeItem","debug","e","load","r","env","DEBUG","chrome","local","localStorage","colors","formatters","j","v","JSON","stringify","err","message","enable","applyAttributeRegisters","attributeBuffers","incrementValues","attrRegister0","attrRegister1","attrRegister2","attrRegister3","attrRegister4","attrRegister5","attrRegister6","attrRegister7","attrRegister8","attrRegister9","attrRegister10","attrIndexIncr0","attrIndexIncr1","attrIndexIncr2","attrIndexIncr3","attrIndexIncr4","attrIndexIncr5","attrIndexIncr6","attrIndexIncr7","attrIndexIncr8","attrIndexIncr9","attrIndexIncr10","updateBuffer1","numBatches","updateAccessor","lastBatchRegister","attrIndex0","updateBuffer2","attrIndex1","updateBuffer3","attrIndex2","updateBuffer4","attrIndex3","updateBuffer5","attrIndex4","updateBuffer6","attrIndex5","updateBuffer7","attrIndex6","updateBuffer8","attrIndex7","updateBuffer9","attrIndex8","updateBuffer10","attrIndex9","updateBuffer11","attrIndex10","applyDefaultsHolders","defaults","defaultsHolder0","defaultsHolder1","defaultsHolder2","defaultsHolder3","fillSize1","buffer","start","fillSize2","fillSize3","fillSize4","isList","val","Array","isArray","three_1","debugGenerator","TriangleOrientation","AttributeSize","isStreamUpdatingRegister","fillMethodLookUp","_a","ONE","TWO","THREE","FOUR","updateBufferLookUp","1","2","3","4","5","6","7","8","9","10","11","BufferUtil","beginUpdates","dispose","buffers","bufferItems","attributes","currentData","geometry","system","endUpdates","totalBatches","examineBuffer","debugNamespace","debugBuffer","enabled","bufferAttributes","map","attr","array","triangles","drawMode","TrianglesDrawMode","currentVertex_1","attrSize_1","currentIndex_1","length_1","drawRange","count","tri","vertex_0","vertex_1","vertex_2","size","slice","push","TriangleStripDrawMode","currentVertex_2","attrSize_2","currentIndex_2","length_2","material","uniforms","flattenMultiBuffers","multiShapeBuffers","all","multiBuffer","getBuffers","concat","updateMultiBuffer","multiShapeBuffer","init","update","forceUpdates","shapeBuffers","didUpdate","reduce","flat","toFlatten","bufferLookup","Map","set","needsBuffer","shapes","delete","shift","shapeBuffer","vertexBuffer","vertexBuffers_1","from","values","setDrawRange","makeBuffer","numVertices","iMax","BufferGeometry","totalAttributeSize","attribute","attributeSize","Float32Array","fillMethod","name_1","k","BufferAttribute","setDynamic","addAttribute","warn","updateBuffer","newData","vertexBatch","force","testPerformed","updateMethod","updateRange","offset","itemSize","needsUpdate","makeBufferItems","buffer_util_1","BaseBuffer","unitCount","squareDistance","p1","p2","dx","dy","Point","add","out","getClosest","testPoint","distance","closestDistance","closestPoint","findClosest","getClosestIndex","getDirection","normalize","magnitude","Math","sqrt","getDistance","squared","getMidpoint","direction","make","scale","zero","__extends","extendStatics","setPrototypeOf","__proto__","__","constructor","create","bounds_1","Line","_super","_this","setPoints","directionTo","vector","perpendicular","distanceTo","abs","lines","closestLine","line","slope","mag","AtlasTexture","path","label","aspectRatio","imagePath","rasterizedLabel","getAttributeCurrentTime","time","FrameInfo","lastFrameTime","floor","Date","now","nextFrameTime","framesPlayed","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","PI","easeOutSine","sin","easeInOutSine","easeInExpo","pow","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","a","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","bezier2","c1","t2","mt","mt2","bezier3","c2","t3","mt3","circular","radiusEasing","direction1","point_1","theta1","atan2","direction2","theta2","dTheta","radius1","radius2","radius","easing_1","InterpolationMethod","pickInterpolation","BEZIER2","BEZIER3","CIRCULAR","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","verb","op","f","TypeError","_","ops","pop","trys","g","sent","throw","return","Symbol","iterator","d3_color_1","pack_node_1","label_1","atlas_texture_1","debugLabels","ZERO_IMAGE","atlasBL","atlasBR","atlasTL","atlasTR","Label","text","pixelHeight","pixelWidth","AtlasManager","atlasImages","atlasMap","atlasTexture","textureWidth","textureHeight","createAtlas","atlasName","images","canvas","_i","images_1","image","texture","_b","PackNode","createElement","getContext","draw","drawColors","Texture","premultiplyAlpha","generateMipmaps","destroyAtlas","destroy","none_1","atlasReferenceID","isValidImage","isValid","setDefaultImage","assign","loadedImage","rect","dimensions","node","insertedNode","ux","uy","uw","uh","atlasDimensions","loadImage","first","second","insert","nodeImage","nodeDimensions","drawImage","error","colorWidth","colorHeight","maxPerRow","rowWidth","rowCount","colCount","renderHeight","renderSpace","startX","startY","nextX","nextY","beginX","beginY","col","row","colors_1","min","ceil","colorIndex","colorsPerRow","firstColor","nextColor","fillStyle","round","opacity","fillRect","Error","getAtlasTexture","Image","onload","onerror","src","labelSize","getSize","ctx","rasterizationOffset","fontSize","rgb","base","font","makeCSSFont","textAlign","textBaseline","toString","fillText","image_1","setSize","toDataURL","child","isLeaf","hasChild","newNode","fitFlag","imgWidth","imgHeight","dWidth","dHeight","remove","removed","ramda_1","rotateable_quad_1","sprite_1","measurement","Sprite","options","AnchorPosition","TopLeft","depth","fontWeight","maxWidth","id","zoomable","rasterizationPadding","setFontSize","_baseLabel","baseLabel","_rasterizedLabel","copyLabel","omit","setText","getText","position","lbl","baseSize","context","size_1","measureText","RotateableQuad","anchorCalculations","BottomLeft","quad","BottomRight","Custom","Middle","MiddleBottom","MiddleLeft","MiddleRight","MiddleTop","TopRight","location","rotation","anchor","setAnchor","setLocation","setRotation","calculateAnchor","custom","anchorType","getAnchor","getAnchorType","getLocation","getRotation","angle","Vector4","anchorMat","Matrix4","makeTranslation","rotationMat","makeRotationZ","locationMat","transform","multiply","TL","clone","applyMatrix4","TR","BL","BR","w","h","contentScaleX","contentScaleY","scaleX","scaleY","getContentScale","getContentSize","getWidth","getHeight","normalizeFirefoxWheel","wheel","nativeEvent","deltaX","deltaY","sign","lowPassY","MAX_FIREFOX_WHEELDELTA","LOW_PASS_U0","LOW_PASS_U1","LOW_PASS_U2","LOW_PASS_U3","unshift","Vector2","normalizeChromeWheel","normalizeIE11Wheel","wheelDeltaX","IE_ADJUSTMENT","wheelDeltaY","wheelDelta","detail","OLD_IE_ADJUSTMENT","normalizeIE12Wheel","multiplyScalar","eventElementPosition","relative","mouseX","mouseY","eventX","eventY","target","event","pageX","pageY","clientX","clientY","scrollLeft","scrollTop","offsetParent","offsetLeft","offsetTop","normalizeWheel","browser","firefox","msie","version","msedge","filterQuery","queryValues","filtered","obj","find","Quadrants","mid","Node","children","childrenProps","nodes","props","doAdd","cover","addAll","allChildren","gatherChildren","split","isNaN","area","list","gatherProps","query","visit","queryBounds","queryPoint","cb","finished","Boolean","QuadTree","getProgramInfo","gl","program","attributeCount","uniformCount","activeUniforms","getProgramParameter","ACTIVE_UNIFORMS","activeAttributes","ACTIVE_ATTRIBUTES","enums","35664","35665","35666","35667","35668","35669","35670","35671","35672","35673","35674","35675","35676","35678","35680","5120","5121","5122","5123","5124","5125","5126","blocks","uniform","getActiveUniform","typeName","getActiveAttrib","WebGLStat","printCurrentProgramInfo","surface","info","getParameter","CURRENT_PROGRAM","MAX_VERTEX_UNIFORMS","MAX_FRAGMENT_UNIFORMS","MAX_ATTRIBUTES","WEBGL_SUPPORTED","WebGLRenderingContext","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_VERTEX_ATTRIBS","curved_line_1","line_1","CurvedLineShape","lineWidth","getTriangleStrip","cachesQuadSegments","cacheSegments","startColor","endColor","cachesSegments","controlPoints","end","resolution","max","cachedQuadSegments","strip","normal","lineStrip","getLineStrip","lineWidthHalf","scaledPoint","temp","previous","current","CurvedLine","bezierDistance","straightLine","closestIndex","circularDistance","straightDistance","makeBezier2Segments","cachedSegments","segments","dt","lineEnd","interpolation_1","makeBezier3Segments","makeCircularCWSegments","circleCenter","midPoint","minRadius","makeCircularCCWSegments","makeStraightSegments","CurveType","pickSegmentMethod","Bezier","CircularCW","CircularCCW","Straight","pickDistanceMethod","distanceMethod","segmentMethod","segmentMethods","numControlPoints","UID","Circle","_id","_radius","_centerX","_centerY","centerX","centerY","updateBounds","boundsInside","r2","dy2","dx2","notSquared","circles","closestCircle","circle","hitCircle","totalDistance","hitPoint","LineShape","thickness","newProperties","getIDProp","item","evenRoundRobinBufferAdd","smallest","found","some","tracker","noop","echoBuffer","shape_buffer_cache_1","multiBufferSelectionPrefix","multiBufferSelectionKeyUID","MultiShapeBufferCache","numBuffers","methods","selectionUID","addMethod","idMethod","initMethod","removeMethod","addShape","shape","store","allBuffers","idToItem","itemToBuffer","flagBuffersDirty","containsId","containsShape","isDirty","generate","selection","getStorage","processDirtyBuffers","getBuffer","getNumBuffers","getShapeById","getSelection","select","removeShape","indexOf","updateShape","ShapeBufferCache","bustCache","buildCache","__export","isAnimatedWithOptions","isAnimated","BaseApplyPropsMethods","React","atlas_manager_1","frame_info_1","mouse_1","quad_tree_1","webgl_stat_1","debugCam","debugColors","BaseAnimatedMethods","BACKGROUND_COLOR","Color","setRGB","Vector3","WebGLSurface","atlasManager","atlasNames","labels","animatedMethodList","animatedMethodBreak","camera","OrthographicCamera","disableMouseInteraction","sizeCamera","currentZoom","destinationX","destinationY","destinationZoom","isPanning","lastMousePosition","propsMethodList","inertia","inertiaBuild","inertiaDecay","inertiaMax","quadTree","shiftIsDown","stop","currentX","currentY","targetZoom","previousZoomToFit","zoomTargetX","zoomTargetY","animating","labelsReady","labelsCurrentLoadedId","labelsLoadId","colorsReady","currentHoverItems","dragOver","animate","requestAnimationFrame","response","doDraw","method","break","updateCameraUniforms","forceDraw","emitViewport","applyProps","el","scene","renderEl","heightHalf","widthHalf","initCamera","Scene","initBuffers","renderer","WebGLRenderer","alpha","backgroundColor","antialias","preserveDrawingBuffer","setPixelRatio","devicePixelRatio","setClearColor","setFaceCulling","CullFaceNone","appendChild","domElement","makeDraggable","getElementById","viewSize","viewport","far","near","z","resizeContext","renderSize","zoom","updateProjectionMatrix","tl","screenToWorld","br","updateMatrixWorld","visible","onViewport","projection","handleMouseDown","onMouseDown","handleMouseOut","onMouseOut","handleMouseUp","mouse","world","hitInside","hitItems","hitItems_1","onMouseUp","handleMouseMove","onMouse","xDistance","yDistance","pan","willPan","maxInertia","hitItems_2","onMouseHover","onMouseLeave","applyRef","animatedMethods","baseAnimatedMethods","orderedBaseAnimatedMethods","animatedMethodsBase","CONTEXT","INERTIA","POSITION","positionCamera","ZOOM","destZoom","dZoom","screenZoomTarget","worldToScreen","zoomCamera","newScreenZoomTarget","zoomDX","zoomDY","applyColorBufferChanges","applyLabelBufferChanges","applyPropsMethods","basePropsMethods","orderedBasePropsMethods","applyPropsMethodsBase","INITIALIZE","oldColor","LABELS","textures","COLORS","BUFFERCHANGES","applyBufferChanges","CAMERA","appliedViewport","zoomToFitViewH","zoomToFitViewV","zoomToFit","onZoomRequest","componentDidMount","componentWillMount","screenSizeToWorld","bind","worldSizeToScreen","componentWillReceiveProps","componentWillUnmount","render","onRender","imageData","element","stage","onmousedown","onmousemove","scrollY","distanceX","distanceY","onmouseup","onmouseover","onselectstart","unproject","project","merge","shouldComponentUpdate","nextProps","onMouseMove","onDoubleClick","ref","Component","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","timeout","len","run","Item","nextTick","title","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","selectColor","hash","charCodeAt","createDebug","self","curr","ms","prevTime","prev","coerce","format","formatter","names","skips","substr","disable","test","stack","parse","str","String","exec","parseFloat","fmtShort","fmtLong","plural","long","base_buffer_1","SharedControlCurvedLineBufferAnts","numQuads","Mesh","frustumCulled","controlPointSource","controlUniform","controlReference","colorRef","colorBase","atlas","colorAtlas","colorStart","colorEnd","antLength","antGap","antSpeed","controlPoint","controlRef","halfWidthSize","this_1","shapeBuffer_1","curvedLine","marchingAnts","gapLength","speed","strokeLength","controlLength","positions","ppos","scpos","ecpos","normals","npos","endPoints","epos","halfWidth","wpos","marching","mpos","controlPick","cpos","SharedControlCurvedLineColorsBuffer","colorStartStop","colorEndStop","startTime","duration","endColorStop","startColorStop","currentStart","currentEnd","colorPicks","ctpos","timing","tpos","SharedControlCurvedLineBuffer","SimpleStaticBezierLineBuffer","copos","SimpleStaticCircleBuffer","Points","outerColor","rpos","isCluster","SimpleStaticLabelBuffer","startFade","endFade","labelMaxSize","flatten","maxLabelSize","updated","texCoords","sizes","spos","anchors","apos","SimpleStaticLineBuffer","stripPos","SimpleStaticStraightLineBuffer","ReferenceColor","curved_line_shape_1","AnimatedCurvedLineShape","easing","_startColorChange","_endColorChange","startStop","endStop","_currentStartColor","_currentEndColor","_startColorStop","startBase","newBase","_endColorStop","endBase","easedTime","circle_1","CircleShape","innerColor","innerRadius","instance","line_shape_1","EdgeShape","startWidth","bl","tr","endWidth","testx","testy","numberVertices","isClockwise","p1Dx","p2Dx","p1DeltaX","p1DeltaY","p2DeltaX","p2DeltaY","topEdge","bottomEdge","ImageShape","centerOn","QuadShape","AtlasColor","PlayState","Animate","playState","PLAY","propToItem","cancel","container","prop","ease","multi_shape_buffer_cache_1","AnimatedShapeBufferCache","INIT","doAnimate","STOP","boolMapToArray","filter","CustomSelection","cachedSelection","selections","_didSelectionChange","clearAllSelections","keys","key","clearSelection","category","deselect","selectionMap","didSelectionCategoryChange","didSelectionChange","finalizeUpdate","theSelection","toggleSelect","getFontMetrics","bboxHeight","canvasHeight","baseline","flip","drawBaseline","fontFamily","textWidth","offsetx","offsety","cwidth","cheight","getImageData","data","pos","realBottom","restore"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"ramda\"), require(\"react\"), require(\"d3-color\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"ramda\", \"react\", \"d3-color\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"ramda\"), require(\"react\"), require(\"d3-color\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"ramda\"], root[\"react\"], root[\"d3-color\"], root[\"bowser\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_28__, __WEBPACK_EXTERNAL_MODULE_29__, __WEBPACK_EXTERNAL_MODULE_33__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"), require(\"ramda\"), require(\"react\"), require(\"d3-color\"), require(\"bowser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\", \"ramda\", \"react\", \"d3-color\", \"bowser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"voidgl\"] = factory(require(\"three\"), require(\"ramda\"), require(\"react\"), require(\"d3-color\"), require(\"bowser\"));\n\telse\n\t\troot[\"voidgl\"] = factory(root[\"three\"], root[\"ramda\"], root[\"react\"], root[\"d3-color\"], root[\"bowser\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_28__, __WEBPACK_EXTERNAL_MODULE_29__, __WEBPACK_EXTERNAL_MODULE_33__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 26);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(left, right, top, bottom) {\n        this.height = 0;\n        this.width = 0;\n        this.x = 0;\n        this.y = 0;\n        if (arguments.length === 4) {\n            this.x = left;\n            this.width = right - left;\n            this.y = top;\n            this.height = top - bottom;\n        }\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        /** The total rectangular surface area of this instance */\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        /** The bottom coordinate for this instance (y + height) */\n        get: function () {\n            return this.y - this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        /** An x, y coordinate pair representing the center of this object */\n        get: function () {\n            return {\n                x: this.x + (this.width / 2),\n                y: this.y - (this.height / 2),\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Check to see if a given point lies within the bounds of this instance\n     *\n     * @param point The point to check\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        if (point.x < this.x) {\n            return false;\n        }\n        if (point.y > this.y) {\n            return false;\n        }\n        if (point.x > this.right) {\n            return false;\n        }\n        if (point.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Copies the properties of the bounds specified\n     *\n     * @param b The bounds whose dimensions we wish to copy\n     */\n    Bounds.prototype.copyBounds = function (b) {\n        this.height = b.height;\n        this.width = b.width;\n        this.x = b.x;\n        this.y = b.y;\n    };\n    /**\n     * Ensure that this object contains the smaller bounds\n     *\n     * This method will not shrink this class, but only grow it as necessary to\n     * fit the destination object\n     *\n     * @param bounds The bounds to encapsulate\n     */\n    Bounds.prototype.encapsulate = function (bounds) {\n        if (bounds.x < this.x) {\n            this.width += this.x - bounds.x;\n            this.x = bounds.x;\n        }\n        if (bounds.y > this.y) {\n            this.height += bounds.y - this.y;\n            this.y = bounds.y;\n        }\n        if (bounds.right > this.right) {\n            this.width = bounds.right - this.x;\n        }\n        if (bounds.bottom < this.bottom) {\n            this.height = this.y - bounds.bottom;\n        }\n    };\n    /**\n     * Ensure that this object contains the provided list of bounds\n     *\n     * This will never shrink or modify the original area covered by this bounds\n     * but will instead stay the same or include the original area plus the specified\n     * list of bounds.\n     *\n     * @param {Bounds<any>[]} bounds The list of bounds objects to encapsulate\n     * @param {boolean} sizeToFirst If this is set, the procedure will start by making this bounds\n     *                              be a clone of the first bounds object in the list\n     */\n    Bounds.prototype.encapsulateBounds = function (bounds, sizeToFirst) {\n        if (sizeToFirst && bounds.length) {\n            this.copyBounds(bounds[0]);\n        }\n        if (bounds.length === 0) {\n            return;\n        }\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        bounds.forEach(function (p) {\n            if (p.x < minX) {\n                minX = p.x;\n            }\n            if (p.right > maxX) {\n                maxX = p.right;\n            }\n            if (p.bottom < minY) {\n                minY = p.bottom;\n            }\n            if (p.y > maxY) {\n                maxY = p.y;\n            }\n        });\n        // Make bounds that encompasses the bounds list, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Grow this class to contain the specified point\n     *\n     * This method will not shrink this instance. It will only grow it as\n     * necessary.\n     *\n     * @param point The point to encapsulate\n     */\n    Bounds.prototype.encapsulatePoint = function (point) {\n        if (point.x < this.x) {\n            this.width += this.x - point.x;\n            this.x = point.x;\n        }\n        if (point.y > this.y) {\n            this.height += point.y - this.y;\n            this.y = point.y;\n        }\n        if (point.x > this.right) {\n            this.width = point.x - this.x;\n        }\n        if (point.y < this.bottom) {\n            this.height = this.y - point.y;\n        }\n    };\n    /**\n     * Efficiently encapsulates a set of points by growing the current dimensions\n     * of the bounds until the points are enclosed. This will perform faster than\n     * running encapsulatePoint for a list of points.\n     *\n     * @param points An array of points that Can be of format {x, y} or [x, y]\n     *\n     * @memberOf Bounds\n     */\n    Bounds.prototype.encapsulatePoints = function (points) {\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        if (points[0] !== undefined && points[0].x) {\n            points.forEach(function (p) {\n                if (p.x < minX) {\n                    minX = p.x;\n                }\n                else if (p.x > maxX) {\n                    maxX = p.x;\n                }\n                if (p.y < minY) {\n                    minY = p.y;\n                }\n                else if (p.y > maxY) {\n                    maxY = p.y;\n                }\n            });\n        }\n        else {\n            points.forEach(function (p) {\n                if (p[0] < minX) {\n                    minX = p[0];\n                }\n                else if (p[0] > maxX) {\n                    maxX = p[0];\n                }\n                if (p[1] < minY) {\n                    minY = p[1];\n                }\n                else if (p[1] > maxY) {\n                    maxY = p[1];\n                }\n            });\n        }\n        // Make bounds that encompasses the points, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Checks to see if another bounds fits in itself.\n     *\n     * @param {Bounds} inner The bounds to test against\n     *\n     * @return {number} int 1 is an exact fit, 2 it fits with space, 0 it doesn't fit\n     */\n    Bounds.prototype.fits = function (inner) {\n        if (this.width === inner.width) {\n            if (this.height === inner.height) {\n                return 1;\n            }\n        }\n        if (this.width >= inner.width) {\n            if (this.height >= inner.height) {\n                return 2;\n            }\n        }\n        return 0;\n    };\n    /**\n     * Check to see if the provided bounds intersects with this instance\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if the other object intersects with this instance\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        if (bounds.right < this.x) {\n            return false;\n        }\n        if (bounds.x > this.right) {\n            return false;\n        }\n        if (bounds.bottom > this.y) {\n            return false;\n        }\n        if (bounds.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Tests if a point is inside this bounds\n     *\n     * @param p The point to test\n     *\n     * @return boolean The point to test\n     */\n    Bounds.prototype.pointInside = function (p) {\n        if (p.x < this.x) {\n            return false;\n        }\n        if (p.y > this.y) {\n            return false;\n        }\n        if (p.x > this.right) {\n            return false;\n        }\n        if (p.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Test function to type check the provided value\n     *\n     * @return True if value is a bounds object\n     */\n    Bounds.isBounds = function (value) {\n        // Falsy values aren't bounds objects\n        if (!value) {\n            return false;\n        }\n        // Direct test for bounds objects\n        if (value instanceof this) {\n            return true;\n        }\n        // Duck-typing check\n        return value &&\n            'containsPoint' in value &&\n            'encapsulate' in value &&\n            'hitTest' in value;\n    };\n    /**\n     * Check if this instance is completely inside the provided bounds\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if this instance is inside the provided bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return (bounds.x <= this.x &&\n            bounds.right >= this.right &&\n            bounds.y >= this.y &&\n            bounds.bottom <= this.bottom);\n    };\n    /**\n     * Generates a Bounds object covering max extents\n     *\n     * @return {Bounds} bounds covering as wide of a range as possible\n     */\n    Bounds.maxBounds = function () {\n        return new Bounds(Number.MIN_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MAX_VALUE);\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(31);\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * This class and set of methods is provided to attempt to create as efficient as possible\n * methods for updating large vertex buffers with values. The first portion of the file is\n * a list of methods and registers. This is to prevent any instantiation needed for the methods\n * and registers to exist. Also, the methods have no useable parent scope to ensure nothing like\n * a 'this' is used. These methods utilize the registers and their own simple loops to pound\n * through large amounts of information while providing capabilities to edit vertices in batches.\n *\n * You will also notice there are many many similar methods with just a single extra parameter\n * here and there. This is to prevent ANY calculations on trying to determine a proper parameter set\n * while also making method calls directly without any .call or .apply.\n *\n * The number of update methods is how many differing attributes are supported. If you need more supported\n * attributes add an updateBufferN method and provide the required attributes. Insert the logic in the EXACT\n * pattern seen in the other methods. DO NOT attempt to add additional logic lest the performance be something\n * terrible.\n *\n * The BufferUtil class makes use of these methods and registers. It also provides some very handy methods\n * for working with your large buffers.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar debugGenerator = __webpack_require__(2);\nvar debug = __webpack_require__(2)('WebGLSurface:BufferUtil');\nvar TriangleOrientation;\n(function (TriangleOrientation) {\n    // The triangles points are clockwise\n    TriangleOrientation[TriangleOrientation[\"CW\"] = 0] = \"CW\";\n    // The triangles points are Counter clockwise\n    TriangleOrientation[TriangleOrientation[\"CCW\"] = 1] = \"CCW\";\n    // The triangles points are linear, thus degenerate\n    TriangleOrientation[TriangleOrientation[\"DEGENERATE\"] = 2] = \"DEGENERATE\";\n})(TriangleOrientation = exports.TriangleOrientation || (exports.TriangleOrientation = {}));\nvar AttributeSize;\n(function (AttributeSize) {\n    AttributeSize[AttributeSize[\"ONE\"] = 0] = \"ONE\";\n    AttributeSize[AttributeSize[\"TWO\"] = 1] = \"TWO\";\n    AttributeSize[AttributeSize[\"THREE\"] = 2] = \"THREE\";\n    AttributeSize[AttributeSize[\"FOUR\"] = 3] = \"FOUR\";\n})(AttributeSize = exports.AttributeSize || (exports.AttributeSize = {}));\n/**\n * These are for fast look ups of the default values provided\n * Doing this fashion avoids array look ups in the defaults values\n */\nvar defaultsHolder0 = 0;\nvar defaultsHolder1 = 0;\nvar defaultsHolder2 = 0;\nvar defaultsHolder3 = 0;\n/**\n * These are for fast look ups of attribute buffers that are going\n * through the update process. We do everything to mitigate array look ups\n * when and where we can\n */\nvar attrRegister0 = [];\nvar attrRegister1 = [];\nvar attrRegister2 = [];\nvar attrRegister3 = [];\nvar attrRegister4 = [];\nvar attrRegister5 = [];\nvar attrRegister6 = [];\nvar attrRegister7 = [];\nvar attrRegister8 = [];\nvar attrRegister9 = [];\nvar attrRegister10 = [];\nvar attrIndex0 = 0;\nvar attrIndex1 = 0;\nvar attrIndex2 = 0;\nvar attrIndex3 = 0;\nvar attrIndex4 = 0;\nvar attrIndex5 = 0;\nvar attrIndex6 = 0;\nvar attrIndex7 = 0;\nvar attrIndex8 = 0;\nvar attrIndex9 = 0;\nvar attrIndex10 = 0;\nvar attrIndexIncr0 = 0;\nvar attrIndexIncr1 = 0;\nvar attrIndexIncr2 = 0;\nvar attrIndexIncr3 = 0;\nvar attrIndexIncr4 = 0;\nvar attrIndexIncr5 = 0;\nvar attrIndexIncr6 = 0;\nvar attrIndexIncr7 = 0;\nvar attrIndexIncr8 = 0;\nvar attrIndexIncr9 = 0;\nvar attrIndexIncr10 = 0;\n/** This is used to define a starting batch location to aid in continuing batch updates */\nvar lastBatchRegister = 0;\nvar isStreamUpdatingRegister = false;\n/**\n * This takes our list of attribute buffers and applies them to the registers for rapid lookups\n *\n * @param {number[][]} attributeBuffers The buffers for each attribute to be updated\n * @param {number[]} incrementValues How much each batch increments it's lookup index\n */\nfunction applyAttributeRegisters(attributeBuffers, incrementValues) {\n    attrRegister0 = attributeBuffers[0];\n    attrRegister1 = attributeBuffers[1];\n    attrRegister2 = attributeBuffers[2];\n    attrRegister3 = attributeBuffers[3];\n    attrRegister4 = attributeBuffers[4];\n    attrRegister5 = attributeBuffers[5];\n    attrRegister6 = attributeBuffers[6];\n    attrRegister7 = attributeBuffers[7];\n    attrRegister8 = attributeBuffers[8];\n    attrRegister9 = attributeBuffers[9];\n    attrRegister10 = attributeBuffers[10];\n    attrIndexIncr0 = incrementValues[0];\n    attrIndexIncr1 = incrementValues[1];\n    attrIndexIncr2 = incrementValues[2];\n    attrIndexIncr3 = incrementValues[3];\n    attrIndexIncr4 = incrementValues[4];\n    attrIndexIncr5 = incrementValues[5];\n    attrIndexIncr6 = incrementValues[6];\n    attrIndexIncr7 = incrementValues[7];\n    attrIndexIncr8 = incrementValues[8];\n    attrIndexIncr9 = incrementValues[9];\n    attrIndexIncr10 = incrementValues[10];\n}\n/**\n * The following methods are targetted at executing the update accessor with varying number\n * of parameters while mitigating array look ups.\n *\n * @param {number} numBatches The number of batches to execute\n * @param {Function} updateAccessor The accessor function that will update the buffer values\n */\nfunction updateBuffer1(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0);\n    }\n}\nfunction updateBuffer2(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1);\n    }\n}\nfunction updateBuffer3(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2);\n    }\n}\nfunction updateBuffer4(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3);\n    }\n}\nfunction updateBuffer5(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4);\n    }\n}\nfunction updateBuffer6(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5);\n    }\n}\nfunction updateBuffer7(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6);\n    }\n}\nfunction updateBuffer8(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7);\n    }\n}\nfunction updateBuffer9(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8);\n    }\n}\nfunction updateBuffer10(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        attrIndex9 = i * attrIndexIncr9;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8, attrRegister9, attrIndex9);\n    }\n}\nfunction updateBuffer11(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        attrIndex9 = i * attrIndexIncr9;\n        attrIndex10 = i * attrIndexIncr10;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8, attrRegister9, attrIndex9, attrRegister10, attrIndex10);\n    }\n}\n/**\n * This takes the defaults array provided and loads them into our default\n * lookup values\n *\n * @param {number[]} defaults The array with the default values in them for our buffer attribute\n */\nfunction applyDefaultsHolders(defaults) {\n    defaultsHolder0 = defaults[0] || 0;\n    defaultsHolder1 = defaults[1] || 0;\n    defaultsHolder2 = defaults[2] || 0;\n    defaultsHolder3 = defaults[3] || 0;\n}\n/**\n * The following methods are rapid ways of populating the buffer without\n * setting up a generic loop. This saves on performance by not creating a loop\n * nor allocating the variables necessary for the generic loop.\n *\n * @param {Float32Array} buffer The buffer to populate\n * @param {number} start The index the data should be populated into\n */\nfunction fillSize1(buffer, start) {\n    buffer[start] = defaultsHolder0;\n}\nfunction fillSize2(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n}\nfunction fillSize3(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n}\nfunction fillSize4(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n    buffer[++start] = defaultsHolder3;\n}\nfunction isList(val) {\n    if (Array.isArray(val))\n        return true;\n    return false;\n}\n/**\n * This is a quick lookup to find the correct filler method for the given attribute size\n */\nvar fillMethodLookUp = (_a = {},\n    _a[AttributeSize.ONE] = fillSize1,\n    _a[AttributeSize.TWO] = fillSize2,\n    _a[AttributeSize.THREE] = fillSize3,\n    _a[AttributeSize.FOUR] = fillSize4,\n    _a);\nvar updateBufferLookUp = {\n    1: updateBuffer1,\n    2: updateBuffer2,\n    3: updateBuffer3,\n    4: updateBuffer4,\n    5: updateBuffer5,\n    6: updateBuffer6,\n    7: updateBuffer7,\n    8: updateBuffer8,\n    9: updateBuffer9,\n    10: updateBuffer10,\n    11: updateBuffer11,\n};\n/**\n * This provides methods for handling common buffer tasks such as construction\n * and population.\n */\nvar BufferUtil = (function () {\n    function BufferUtil() {\n    }\n    /**\n     * This places our updateBuffer into a mode where the updates start at index 0 of the\n     * buffer. Subsequent calls will start where the previous call left off. This lets\n     * you stream in updates to the buffer rather than just update the entire buffer\n     * all at once.\n     */\n    BufferUtil.beginUpdates = function () {\n        isStreamUpdatingRegister = true;\n        lastBatchRegister = 0;\n    };\n    /**\n     * This takes the buffer items and cleans up their use within memory as best as possible.\n     *\n     * @param bufferItems\n     */\n    BufferUtil.dispose = function (buffers) {\n        if (buffers) {\n            buffers.forEach(function (bufferItems) {\n                bufferItems.attributes = null;\n                bufferItems.currentData = null;\n                bufferItems.geometry.dispose();\n                bufferItems.geometry = null;\n                bufferItems.system = null;\n            });\n        }\n    };\n    /**\n     * This stops updates streaming into the buffers and makes it where an update\n     * will always just start at the beginning of the buffer.\n     */\n    BufferUtil.endUpdates = function () {\n        var totalBatches = lastBatchRegister;\n        isStreamUpdatingRegister = false;\n        lastBatchRegister = 0;\n        return totalBatches;\n    };\n    /**\n     * It is often needed to examine a given buffer and see how the triangles are packed in.\n     * This is a common debugging need and will speed up debugging significantly.\n     *\n     * @param {IBufferItems<T, U>} bufferItems This is the buffer whose structure we want\n     *                                         to examine.\n     * @param {string} message This is the message for the debug statement. There are two\n     *                         predefined %o. The first is the vertex information the second\n     *                         is the uniform info. Leave null for a default message.\n     * @param {string} debugNamespace The namespace for the debugging info.\n     */\n    BufferUtil.examineBuffer = function (bufferItems, message, debugNamespace) {\n        // Get the appropriate debug namespace\n        var debugBuffer = debugGenerator(debugNamespace);\n        // Quick quit if the debugger is not enabled\n        if (!debugBuffer.enabled) {\n            return;\n        }\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // Get the attributes by name out of the three js buffer\n        var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n        // Get the raw number buffers\n        var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n        // This will store all of the examined triangles for easy viewing\n        var triangles = [];\n        if (bufferItems.system.drawMode === three_1.TrianglesDrawMode) {\n            var currentVertex_1 = 0;\n            var attrSize_1 = 0;\n            var currentIndex_1 = 0;\n            var length_1 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_1 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_2 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_1 = attr.size + 1;\n                        currentIndex_1 = currentVertex_1 * attrSize_1;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_1, currentIndex_1 + attrSize_1);\n                    });\n                    // Move to the next vertex\n                    currentVertex_1++;\n                };\n                // Each new triangle is a culmination of three vertices which are packed in\n                // The buffer with no vertex sharing\n                for (var i = 0; i < 3; ++i) {\n                    _loop_2(i);\n                }\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_1 < length_1) {\n                _loop_1();\n            }\n        }\n        else if (bufferItems.system.drawMode === three_1.TriangleStripDrawMode) {\n            var currentVertex_2 = 0;\n            var attrSize_2 = 0;\n            var currentIndex_2 = 0;\n            var length_2 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_3 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_4 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_2 = attr.size + 1;\n                        currentIndex_2 = currentVertex_2 * attrSize_2;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_2, currentIndex_2 + attrSize_2);\n                    });\n                    // Move to the next vertex\n                    currentVertex_2++;\n                };\n                // Each new triangle is three vertices, where the first two are shared with\n                // The previous triangle's last two vertices\n                for (var i = 0; i < 3; ++i) {\n                    _loop_4(i);\n                }\n                // Go back two vertices as the next tri will use them + the next vertex to\n                // Make the next triangle\n                currentVertex_2 -= 2;\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_2 < length_2) {\n                _loop_3();\n            }\n        }\n        // Log the debug info to the console using the debug utility\n        debugBuffer(message || 'vertices: %o uniforms: %o', {\n            drawRange: buffer.drawRange,\n            triangles: triangles,\n        }, bufferItems.system.material.uniforms);\n    };\n    /**\n     * Aids in taking in multiple multibuffers and flattening it to a single list\n     *\n     * @param multiShapeBuffers\n     */\n    BufferUtil.flattenMultiBuffers = function (multiShapeBuffers) {\n        var all = [];\n        multiShapeBuffers.forEach(function (multiBuffer) {\n            multiBuffer.getBuffers().forEach(function (buffer) { return all = all.concat(buffer); });\n        });\n        return all;\n    };\n    /**\n     * @static\n     * This helps aid in updating a complex multi buffer. It will establish when a new\n     * buffer needs to be created and initialized and it will automatically call a BaseBuffer's\n     * update when an update is detected as a need for the buffer.\n     *\n     * @param multiShapeBuffer\n     * @param buffers\n     * @param init\n     *\n     * @return {boolean} True if a buffer was updated\n     */\n    BufferUtil.updateMultiBuffer = function (multiShapeBuffer, buffers, init, update, forceUpdates) {\n        // This flag indicates whether an update occurred or not\n        var didUpdate = false;\n        // Get the shape buffers we need rendered into vertex buffers\n        var shapeBuffers;\n        // If this is a list of multibuffers, we flatten out all of the sub buffers\n        // This is a one level deep flatten as we do not want to accidentally handle shape clustering here\n        if (isList(multiShapeBuffer)) {\n            shapeBuffers = multiShapeBuffer.reduce(function (flat, toFlatten) { return flat.concat(toFlatten.getBuffers()); }, []);\n        }\n        else {\n            shapeBuffers = multiShapeBuffer.getBuffers();\n        }\n        // Make a lookup to identify the buffers that already exists for the given multi shape buffers\n        var bufferLookup = new Map();\n        buffers.forEach(function (buffer) { return bufferLookup.set(buffer.bufferItems.currentData, buffer); });\n        // This will store all of the shape buffers that needs to be rendered into a vertex buffer\n        var needsBuffer = [];\n        // If we're forcing updates then we should be ensuring all shapeBuffers needs a buffer\n        // And leave all of the bufferLookup so they will all be updated with the provided needed shape buffer updates\n        if (forceUpdates) {\n            needsBuffer = [].concat(shapeBuffers);\n        }\n        else {\n            shapeBuffers.forEach(function (shapes) {\n                if (bufferLookup.get(shapes)) {\n                    bufferLookup.delete(shapes);\n                }\n                else {\n                    needsBuffer.push(shapes);\n                }\n            });\n        }\n        // All buffers remaining in the buffer lookup are available for re-rendering the\n        // Shape buffers that still needs updates\n        // If the shape buffers needing updates is greater than the vertex buffers available\n        // Then we update with what we have and initialize any additional vertex buffers needed\n        if (needsBuffer.length >= bufferLookup.size) {\n            // Take any buffer that is not found with an existing shape buffer and update it\n            // With a buffer that needs an update\n            bufferLookup.forEach(function (value) {\n                didUpdate = update(value, needsBuffer.shift()) || didUpdate;\n            });\n            // Any remaining buffers that need updates will have to initialize a buffer\n            // To cram it in\n            needsBuffer.forEach(function (shapeBuffer) {\n                var vertexBuffer = init();\n                buffers.push(vertexBuffer);\n                didUpdate = update(vertexBuffer, shapeBuffer) || didUpdate;\n            });\n        }\n        else {\n            var vertexBuffers_1 = Array.from(bufferLookup.values());\n            needsBuffer.forEach(function (shapeBuffer) {\n                var vertexBuffer = vertexBuffers_1.shift();\n                didUpdate = update(vertexBuffer, shapeBuffer) || didUpdate;\n            });\n            vertexBuffers_1.forEach(function (buffer) {\n                buffer.bufferItems.geometry.setDrawRange(0, 0);\n            });\n        }\n        return didUpdate;\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with constructing a new buffer\n     * such as applying the name, generating the buffer, and populating default values to\n     * that buffer.\n     *\n     * @param {number} numVertices The number of vertices this buffer will have\n     * @param {IAttributeInfo[]} attributes A description of each attribute in the buffer\n     *\n     * @returns {BufferGeometry} The newly made buffer\n     */\n    BufferUtil.makeBuffer = function (numVertices, attributes) {\n        var iMax = attributes.length;\n        var geometry = new three_1.BufferGeometry();\n        var totalAttributeSize = 0;\n        for (var i = 0; i < iMax; ++i) {\n            var attribute = attributes[i];\n            var attributeSize = attribute.size + 1;\n            totalAttributeSize += attributeSize;\n            var buffer = new Float32Array(attributeSize * numVertices);\n            var fillMethod = fillMethodLookUp[attribute.size];\n            var name_1 = attribute.name;\n            // We set up our default value registers before executing the fill method\n            applyDefaultsHolders(attribute.defaults);\n            // Fill our buffer with the indicated default values\n            for (var k = 0; k < numVertices; ++k) {\n                fillMethod(buffer, k * attributeSize);\n            }\n            // Apply the buffer to our geometry buffer\n            var attr = new three_1.BufferAttribute(buffer, attributeSize);\n            attr.setDynamic(true);\n            geometry.addAttribute(name_1, attr);\n            debug('Made Buffer Attribute:', name_1, attributeSize);\n        }\n        if (totalAttributeSize > 16) {\n            console.warn('A Buffer has specified more attributes than available. The max is 16 and the buffer provided:', totalAttributeSize);\n        }\n        return geometry;\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with updating a buffer. You specify how many vertices\n     * to update in a batch and you specify how many batches are present.\n     *\n     * Batches are used to represent your full shape object that is being loaded from the cpu:\n     *\n     * IE- you have a rectangle object you wish to update in your buffer. This takes around 6 vertices typically\n     * so you make your vertexBatch 6 and the numBatches the number of quads you need to update in the buffer.\n     *\n     * You then provide an accessor which aids in pointing to the buffer items that need updating. The accessor has\n     * variable arguments depending on the attributes you inject in.\n     *\n     * If you have attributes like:\n     * [\n     *  {name: position, size: AttributeSize.Three},\n     *  {name: color, size: AttributeSize.Four},\n     * ]\n     *\n     * Then your accessor will be delievered arguments in this form:\n     *\n     * function(batchIndex: number, positionBuffer: number[], positionIndex: number, colorBuffer: number[], colorIndex: number)\n     *\n     * NOTE: The params handed in ARE ORDERED BY the attributes injected in\n     *\n     * You then can update the buffers based on the index information handed alongside each buffer\n     *\n     * @param {T[]} newData The new data that is going to be injected into the buffer. This must be a NEW REFERENCE of data\n     *                      that does NOT match the reference in the bufferItems.currentData. So newData !== bufferItems.currentData\n     *                      in order for the update to occur.\n     * @param {BufferGeometry} bufferItems The buffer related items used to identify how to update the buffer\n     * @param {number} vertexBatch The number of vertices to include per update batch\n     * @param {number} numBatches The number of batches to execute\n     * @param {Function} updateAccessor The accessor for performing the data update to the buffer\n     * @param {boolean} force This bypasses the typical checks that determines if the buffer SHOULD update.\n     *\n     * @return {boolean} True if the buffer was updated with this call\n     */\n    BufferUtil.updateBuffer = function (newData, bufferItems, vertexBatch, numBatches, updateAccessor, force) {\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // If we passed the data check on the first pass, then all future streamed updates\n        // Should pass as well\n        var testPerformed = lastBatchRegister !== 0 && isStreamUpdatingRegister;\n        // We check if there is a reference change in the data indicating a buffer push needs to happen\n        if ((newData !== undefined && newData !== bufferItems.currentData) || testPerformed || force) {\n            // If we aren't streaming updates, then we always start at the beginning\n            if (!isStreamUpdatingRegister) {\n                // Reset out last batch register as this is an entriely new update\n                lastBatchRegister = 0;\n            }\n            // Flag the newly rendered data as our current data\n            bufferItems.currentData = newData;\n            // Get the attributes by name out of the three js buffer\n            var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n            // Get the raw number buffers\n            var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n            // Determine what kind of buffer pointer increments we will need\n            var incrementValues = attributes.map(function (attr) { return (attr.size + 1) * vertexBatch; });\n            // Apply all data needed to any registers we need\n            applyAttributeRegisters(attributeBuffers, incrementValues);\n            // Get the method that will perform the update based on number of attributes\n            var updateMethod = updateBufferLookUp[attributes.length];\n            // Execute the update method\n            updateMethod(numBatches + lastBatchRegister, updateAccessor);\n            // Flag each buffer attribute for needing an update\n            bufferAttributes.forEach(function (attr) {\n                if (attr.updateRange) {\n                    attr.updateRange.offset = 0;\n                    attr.updateRange.count = vertexBatch * (lastBatchRegister + numBatches) * attr.itemSize;\n                }\n                attr.needsUpdate = true;\n            });\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n            return true;\n        }\n        else {\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n        }\n        return false;\n    };\n    /**\n     * This makes all of the typical items used in creating and managing a buffer of items rendered to the screen\n     *\n     * @returns {IBufferItems<T>} An empty object of the particular buffer items needed\n     */\n    BufferUtil.makeBufferItems = function () {\n        return {\n            attributes: [],\n            currentData: [],\n            geometry: null,\n            system: null,\n        };\n    };\n    return BufferUtil;\n}());\nexports.BufferUtil = BufferUtil;\nvar _a;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar buffer_util_1 = __webpack_require__(3);\n/**\n * This deinfes the minimal set of methods that should be implemented to create\n * a reusable buffer object that can be initialized and populated.\n */\nvar BaseBuffer = (function () {\n    function BaseBuffer() {\n    }\n    /**\n     * This disposes the resources associated with a buffer.\n     */\n    BaseBuffer.prototype.dispose = function () {\n        if (this.bufferItems) {\n            buffer_util_1.BufferUtil.dispose([this.bufferItems]);\n        }\n    };\n    /**\n     * This initializes the buffer and generates the buffer items object.\n     */\n    BaseBuffer.prototype.init = function (material, unitCount) {\n        // To be implemented by a subclass\n    };\n    /**\n     * This updates the buffer by providing the shape buffer needed to update\n     * the internal buffer items\n     *\n     * @param {T[]} shapeBuffer The shape buffer containing all of the shape data\n     *                          to be placed into the buffer.\n     *\n     * @return {boolean} Retrusn true if this pushed up any updates\n     */\n    BaseBuffer.prototype.update = function (shapeBuffer) {\n        // To be implemented by a subclass\n        return false;\n    };\n    return BaseBuffer;\n}());\nexports.BaseBuffer = BaseBuffer;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} p1 The start of the direction\n     * @param {IPoint} p2 The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.getDirection = function (p1, p2, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.getDirection(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n/**\n * Represents a line with a given slope\n */\nvar Line = (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates a new line that passes through the two specified points\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    function Line(p1, p2) {\n        var _this = _super.call(this, 0, 1, 1, 0) || this;\n        _this.setPoints(p1, p2);\n        return _this;\n    }\n    /**\n     * This calculates the distance to a point from the provided line\n     * BUT this ALSO retains the directionality of that distance. So one side of\n     * the line will be positive while the other negative\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.directionTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line, but we won't take the absolute to retain the direction\n        return this.perpendicular.x * vector.x + this.perpendicular.y * vector.y;\n    };\n    /**\n     * This calculates the distance to a point from the provided line\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.distanceTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line\n        return Math.abs(this.perpendicular.x * vector.x +\n            this.perpendicular.y * vector.y);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {Array} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    Line.getClosest = function (lines, p) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(p);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This sets the two endpoints for this line and recalculates the bounds\n     * of the line accordingly\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    Line.prototype.setPoints = function (p1, p2) {\n        this.x = p1.x - 1;\n        this.y = p1.y - 1;\n        this.width = 2;\n        this.height = 2;\n        this.encapsulatePoint(p2);\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        this.slope = dy / dx;\n        this.p1 = p1;\n        this.p2 = p2;\n        this.magnitude = Math.sqrt(dx * dx + dy * dy);\n        this.perpendicular = {\n            x: this.p2.y - this.p1.y,\n            y: -(this.p2.x - this.p1.x),\n        };\n        // Normalize the perpendicular line\n        var mag = Math.sqrt(this.perpendicular.x * this.perpendicular.x +\n            this.perpendicular.y * this.perpendicular.y);\n        this.perpendicular.x /= mag;\n        this.perpendicular.y /= mag;\n    };\n    return Line;\n}(bounds_1.Bounds));\nexports.Line = Line;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar AtlasTexture = (function () {\n    /**\n     * Generates a new atlas texture that points to a specific image resource.\n     *\n     * @param path The path to the image resource to be loaded into the atlas.\n     */\n    function AtlasTexture(path, label) {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        this.imagePath = path;\n        this.label = label;\n        // Let the label keep track of it's rasterization\n        if (label) {\n            this.label.rasterizedLabel = this;\n        }\n    }\n    return AtlasTexture;\n}());\nexports.AtlasTexture = AtlasTexture;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FrameInfo = (function () {\n    function FrameInfo() {\n    }\n    /** Contains the time the previous frame started */\n    FrameInfo.lastFrameTime = Date.now();\n    /** Contains a theoretical approximation the next frame will start */\n    FrameInfo.nextFrameTime = Date.now();\n    /** Contains how many frames have been played for a given WebGLSurface context */\n    FrameInfo.framesPlayed = new Map();\n    return FrameInfo;\n}());\nexports.FrameInfo = FrameInfo;\n/**\n * This gets an integer time value that can fit within an attribute. Be aware,\n * this only supports up to 7 digits of the millisecond time.\n */\nfunction getAttributeCurrentTime() {\n    var time = FrameInfo.lastFrameTime / 1E7;\n    return Math.floor((time - Math.floor(time)) * 1E7);\n}\nexports.getAttributeCurrentTime = getAttributeCurrentTime;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Does a linear easing of a value\n *\n * @param {number} t The time elapsed: 0 to d\n * @param {number} s The start value\n * @param {number} c The change in value\n * @param {number} d The duration of the change\n *\n * @returns A number linearly progressing from s to s+c depending on the value of\n *          t in relation to d\n */\nfunction linear(t, s, c, d) {\n    return c * t / d + s;\n}\nexports.linear = linear;\nfunction easeInQuad(t, b, c, d) {\n    return c * (t /= d) * t + b;\n}\nexports.easeInQuad = easeInQuad;\nfunction easeOutQuad(t, b, c, d) {\n    return -c * (t /= d) * (t - 2) + b;\n}\nexports.easeOutQuad = easeOutQuad;\nfunction easeInOutQuad(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t + b;\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\n}\nexports.easeInOutQuad = easeInOutQuad;\nfunction easeInCubic(t, b, c, d) {\n    return c * (t /= d) * t * t + b;\n}\nexports.easeInCubic = easeInCubic;\nfunction easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n}\nexports.easeOutCubic = easeOutCubic;\nfunction easeInOutCubic(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n}\nexports.easeInOutCubic = easeInOutCubic;\nfunction easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n}\nexports.easeInQuart = easeInQuart;\nfunction easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n}\nexports.easeOutQuart = easeOutQuart;\nfunction easeInOutQuart(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t + b;\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n}\nexports.easeInOutQuart = easeInOutQuart;\nfunction easeInQuint(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n}\nexports.easeInQuint = easeInQuint;\nfunction easeOutQuint(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n}\nexports.easeOutQuint = easeOutQuint;\nfunction easeInOutQuint(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n}\nexports.easeInOutQuint = easeInOutQuint;\nfunction easeInSine(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n}\nexports.easeInSine = easeInSine;\nfunction easeOutSine(t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n}\nexports.easeOutSine = easeOutSine;\nfunction easeInOutSine(t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n}\nexports.easeInOutSine = easeInOutSine;\nfunction easeInExpo(t, b, c, d) {\n    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nexports.easeInExpo = easeInExpo;\nfunction easeOutExpo(t, b, c, d) {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nexports.easeOutExpo = easeOutExpo;\nfunction easeInOutExpo(t, b, c, d) {\n    if (t === 0)\n        return b;\n    if (t === d)\n        return b + c;\n    if ((t /= d / 2) < 1)\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n}\nexports.easeInOutExpo = easeInOutExpo;\nfunction easeInCirc(t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n}\nexports.easeInCirc = easeInCirc;\nfunction easeOutCirc(t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n}\nexports.easeOutCirc = easeOutCirc;\nfunction easeInOutCirc(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n}\nexports.easeInOutCirc = easeInOutCirc;\nfunction easeInElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n}\nexports.easeInElastic = easeInElastic;\nfunction easeOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n}\nexports.easeOutElastic = easeOutElastic;\nfunction easeInOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return b + c;\n    if (!p)\n        p = d * (.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    if (t < 1)\n        return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n}\nexports.easeInOutElastic = easeInOutElastic;\nfunction easeInBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n}\nexports.easeInBack = easeInBack;\nfunction easeOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n}\nexports.easeOutBack = easeOutBack;\nfunction easeInOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    if ((t /= d / 2) < 1)\n        return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n}\nexports.easeInOutBack = easeInOutBack;\nfunction easeInBounce(t, b, c, d) {\n    return c - easeOutBounce(d - t, 0, c, d) + b;\n}\nexports.easeInBounce = easeInBounce;\nfunction easeOutBounce(t, b, c, d) {\n    if ((t /= d) < (1 / 2.75)) {\n        return c * (7.5625 * t * t) + b;\n    }\n    else if (t < (2 / 2.75)) {\n        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\n    }\n    else if (t < (2.5 / 2.75)) {\n        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\n    }\n    else {\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\n    }\n}\nexports.easeOutBounce = easeOutBounce;\nfunction easeInOutBounce(t, b, c, d) {\n    if (t < d / 2)\n        return easeInBounce(t * 2, 0, c, d) * .5 + b;\n    return easeOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b;\n}\nexports.easeInOutBounce = easeInOutBounce;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar point_1 = __webpack_require__(5);\nvar easing_1 = __webpack_require__(10);\n/**\n * This enum is just a common way to define interpolation types\n */\nvar InterpolationMethod;\n(function (InterpolationMethod) {\n    InterpolationMethod[InterpolationMethod[\"BEZIER2\"] = 0] = \"BEZIER2\";\n    InterpolationMethod[InterpolationMethod[\"BEZIER3\"] = 1] = \"BEZIER3\";\n    InterpolationMethod[InterpolationMethod[\"CIRCULAR\"] = 2] = \"CIRCULAR\";\n})(InterpolationMethod = exports.InterpolationMethod || (exports.InterpolationMethod = {}));\n/**\n * This calculates a quadratic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier2(t, p1, p2, c1) {\n    var t2 = t * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    return {\n        x: p1.x * mt2 + c1.x * 2 * mt * t + p2.x * t2,\n        y: p1.y * mt2 + c1.y * 2 * mt * t + p2.y * t2,\n    };\n}\nexports.bezier2 = bezier2;\n/**\n * This calculates a cubic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The first control point of the curve\n * @param {IPoint} c2 The second control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier3(t, p1, p2, c1, c2) {\n    var t2 = t * t;\n    var t3 = t2 * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    var mt3 = mt2 * mt;\n    return {\n        x: p1.x * mt3 + 3 * c1.x * mt2 * t + 3 * c2.x * mt * t2 + p2.x * t3,\n        y: p1.y * mt3 + 3 * c1.y * mt2 * t + 3 * c2.y * mt * t2 + p2.y * t3,\n    };\n}\nexports.bezier3 = bezier3;\n/**\n * This calculates a point along a path defined as a circular path which is a\n * path moving along the edge of a circle from one point to the next. This will\n * even allow for moving along a circle with a growing radius.\n *\n * @param {number} t The 0 - 1 time interval for the part of the path we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point, or more importantly, the center of the circle\n * @param {EasingMethod} radiusEasing Default easing for the radius growing is linear.\n *                                    Insert a custom easing method to change this.\n *\n * @returns {IPoint}\n */\nfunction circular(t, p1, p2, c1, radiusEasing) {\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(c1, p1);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(c1, p2);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Ensure our theta's are definitely between 0 to Math.PI * 2 after the atan\n    // Calculation\n    if (theta1 < 0)\n        theta1 += Math.PI * 2;\n    if (theta2 < 0)\n        theta2 += Math.PI * 2;\n    var dTheta = theta2 - theta1;\n    // We ALWAYS want our path to be the shortest around the circle\n    if (dTheta > Math.PI) {\n        dTheta = theta1 - theta2;\n    }\n    // We use this to calculate how far we are between the two points in radians\n    // Based on the time parameter provided for the interpolation\n    dTheta *= t;\n    // We must have the radial distance of both points to properly calculate\n    // An easing between the two radii\n    var radius1 = point_1.Point.getDistance(p1, c1);\n    var radius2 = point_1.Point.getDistance(p2, c1);\n    // We control how the radius eases out for the path, which is determined by\n    // The easing method, otherwise, it just linearly radiates out\n    var radius = (radiusEasing || easing_1.linear)(t, radius1, radius2 - radius1, 1.0);\n    return {\n        x: Math.cos(theta1 + dTheta) * radius + c1.x,\n        y: Math.sin(theta1 + dTheta) * radius + c1.y,\n    };\n}\nexports.circular = circular;\nexports.pickInterpolation = (_a = {},\n    _a[InterpolationMethod.BEZIER2] = bezier2,\n    _a[InterpolationMethod.BEZIER3] = bezier3,\n    _a[InterpolationMethod.CIRCULAR] = circular,\n    _a);\nvar _a;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = __webpack_require__(29);\nvar three_1 = __webpack_require__(0);\nvar bounds_1 = __webpack_require__(1);\nvar pack_node_1 = __webpack_require__(13);\nvar label_1 = __webpack_require__(14);\nvar atlas_texture_1 = __webpack_require__(8);\nvar debug = __webpack_require__(2)('webgl-surface:Atlas');\nvar debugLabels = __webpack_require__(2)('webgl-surface:Labels');\nvar ZERO_IMAGE = {\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    label: new label_1.Label({ text: ' ' }),\n    pixelHeight: 0,\n    pixelWidth: 0,\n};\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = (function () {\n    /**\n     * Generates a new manager for atlas'. This will create and destroy atlas' and\n     * ensure they have the correct settings applied. A manager will also aid in\n     * packing images into the atlas indicated.\n     *\n     * @param {number} width The width of all atlas' generated\n     * @param {number} height The height of all atlas' generated\n     */\n    function AtlasManager(width, height) {\n        /** Gives a reference of all of the images loaded for the atlas */\n        this.atlasImages = {};\n        /** Stores the current mapping of the atlas */\n        this.atlasMap = {};\n        /** Stores all of the textures that are our atlases */\n        this.atlasTexture = {};\n        this.textureWidth = width;\n        this.textureHeight = height;\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param atlasName The unique name of the atlas so it can be retrieved/referenced easily\n     * @param images The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (atlasName, images, colors) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlasMap, canvas, _i, images_1, image, image, texture, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        atlasMap = new pack_node_1.PackNode(0, 0, this.textureWidth, this.textureHeight);\n                        // Create the mapping element for the new atlas so we can track insertions / deletions\n                        this.atlasMap[atlasName] = atlasMap;\n                        // Make a listing of images that is within the atlas\n                        this.atlasImages[atlasName] = [];\n                        canvas = document.createElement('canvas').getContext('2d');\n                        // Size the canvas to the atlas size\n                        canvas.canvas.width = this.textureWidth;\n                        canvas.canvas.height = this.textureHeight;\n                        if (!images) return [3 /*break*/, 4];\n                        _i = 0, images_1 = images;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < images_1.length)) return [3 /*break*/, 4];\n                        image = images_1[_i];\n                        return [4 /*yield*/, this.draw(image, atlasName, canvas)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        if (!colors) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.drawColors(colors, atlasName, canvas)];\n                    case 5:\n                        image = _b.sent();\n                        // Add the dummy texture info as an image to our list of images\n                        if (image) {\n                            this.atlasImages[atlasName].push(image);\n                        }\n                        _b.label = 6;\n                    case 6:\n                        texture = new three_1.Texture(canvas.canvas);\n                        texture.premultiplyAlpha = true;\n                        texture.generateMipmaps = true;\n                        // Store the texture as the atlas.\n                        this.atlasTexture[atlasName] = texture;\n                        // Store the images as images within the atlas\n                        if (images) {\n                            (_a = this.atlasImages[atlasName]).push.apply(_a, images);\n                        }\n                        debug('Atlas Created-> texture: %o mapping: %o images: %o', texture, atlasMap, images);\n                        return [2 /*return*/, texture];\n                }\n            });\n        });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        if (this.atlasTexture[atlasName]) {\n            this.atlasTexture[atlasName].dispose();\n            this.atlasTexture[atlasName] = null;\n        }\n        if (this.atlasMap[atlasName]) {\n            this.atlasMap[atlasName].destroy();\n            this.atlasMap[atlasName] = null;\n        }\n        if (this.atlasImages[atlasName]) {\n            var none_1 = { x: 0, y: 0 };\n            this.atlasImages[atlasName].forEach(function (image) {\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                image.pixelHeight = 0;\n                image.atlasBL = none_1;\n                image.atlasBR = none_1;\n                image.atlasTL = none_1;\n                image.atlasTR = none_1;\n            });\n            this.atlasImages[atlasName] = null;\n        }\n    };\n    AtlasManager.prototype.isValidImage = function (image) {\n        var isValid = false;\n        if (image && (image.imagePath || (image.label && image.label.text))) {\n            if (image.pixelWidth && image.pixelHeight) {\n                isValid = true;\n            }\n        }\n        return isValid;\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param image The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (image, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var loadedImage, rect, dimensions, node, insertedNode, ux, uy, uw, uh, atlasDimensions;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Validate the index\n                        if (!this.atlasMap[atlasName]) {\n                            debug('Can not load image, invalid Atlas Name: %o for atlasMaps: %o', atlasName, this.atlasMap);\n                            return [2 /*return*/, false];\n                        }\n                        return [4 /*yield*/, this.loadImage(image)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Make sure at this point the image knows it is not affiliated with an atlas\n                        // If something goes wrong with loading or insertting this image, then a null\n                        // Atlas value will indicate the image can not be used appropriately\n                        image.atlasReferenceID = null;\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && this.isValidImage(image)) {\n                            debug('Image loaded: %o', image.imagePath);\n                            rect = new bounds_1.Bounds(0, image.pixelWidth, image.pixelHeight, 0);\n                            dimensions = {\n                                first: image,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            node = this.atlasMap[atlasName];\n                            insertedNode = node.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                if (image.label) {\n                                    debugLabels('Atlas location determined. PackNode: %o Dimensions: %o', insertedNode, dimensions);\n                                }\n                                // Apply the image to the node\n                                insertedNode.nodeImage = image;\n                                ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                                uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                                uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                                uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                                debugLabels('uy is %o', uy);\n                                atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                                image.atlasReferenceID = atlasName;\n                                image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                                image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                                // Now draw the image to the indicated canvas\n                                canvas.drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit image into atlas \" + image.imagePath);\n                                image = this.setDefaultImage(image, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default image\n                            console.error(\"Could not load image \" + image.imagePath);\n                            image = this.setDefaultImage(image, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders a list of colors to the canvas. This using the same packing\n     * algorithm as any image so the rendering is placed correctly or determines\n     * if enough space is not available.\n     *\n     * @param {AtlasColor[]} colors The list of colors to be rendered to the atlas\n     * @param {string} atlasName The name of the atlas being rendered to\n     * @param {CanvasRenderingContext2D} canvas The canvas of the atlas being rendered to\n     *\n     * @returns {Promise<boolean>} Resolves to true if the operation was successful\n     */\n    AtlasManager.prototype.drawColors = function (colors, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var colorWidth, colorHeight, maxPerRow, rowWidth, rowCount, colCount, renderHeight, dimensions, node, insertedNode, image, ux, uy, uw, uh, atlasDimensions, renderSpace, startX, startY, nextX, nextY, beginX, beginY, col, row, _i, colors_1, color, _a, r, g, b;\n            return __generator(this, function (_b) {\n                debug('Finding space for colors on the atlas: %o', colors);\n                colorWidth = 2;\n                colorHeight = 2;\n                maxPerRow = 1024 / colorWidth;\n                rowWidth = Math.min(this.textureWidth, maxPerRow * colorWidth);\n                rowCount = Math.ceil((colors.length * colorWidth) / rowWidth);\n                colCount = Math.ceil(rowWidth / colorWidth);\n                renderHeight = rowCount * colorHeight;\n                dimensions = {\n                    // Since the algorithm requires something to fill this slot, just make a\n                    // Dummy object\n                    first: new atlas_texture_1.AtlasTexture(null, null),\n                    // Set the dimensions we calculated for the space our colors will take up\n                    // Within the atlas\n                    second: new bounds_1.Bounds(0, rowWidth, renderHeight, 0),\n                };\n                // Auto add a buffer in\n                dimensions.second.width += 1;\n                dimensions.second.height += 1;\n                node = this.atlasMap[atlasName];\n                insertedNode = node.insert(dimensions);\n                // If the result was NULL we did not successfully insert the image into any map\n                if (insertedNode) {\n                    debug('Atlas location determined for colors: %o', insertedNode);\n                    image = insertedNode.nodeImage = dimensions.first;\n                    ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                    uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                    uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                    uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                    atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                    image.atlasReferenceID = atlasName;\n                    image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                    image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                    renderSpace = insertedNode.nodeDimensions;\n                    startX = renderSpace.x;\n                    startY = renderSpace.y;\n                    nextX = colorWidth / this.textureWidth;\n                    nextY = -colorHeight / this.textureHeight;\n                    beginX = (startX / this.textureWidth) + (nextX / 2.0);\n                    beginY = 1.0 - (startY / this.textureHeight) + (nextY / 2.0);\n                    col = 0;\n                    row = 0;\n                    // Loop through each color, establish metrics, draw to the atlas\n                    for (_i = 0, colors_1 = colors; _i < colors_1.length; _i++) {\n                        color = colors_1[_i];\n                        // Staore the info needed to make the color referenceable again\n                        color.atlasReferenceID = atlasName;\n                        color.colorIndex = col + (row * colCount);\n                        color.colorsPerRow = colCount;\n                        // The location of the middle of the first color\n                        color.firstColor = {\n                            x: beginX,\n                            y: beginY,\n                        };\n                        color.nextColor = {\n                            x: nextX,\n                            y: nextY,\n                        };\n                        _a = color.color, r = _a.r, g = _a.g, b = _a.b;\n                        // Draw the color to the canvas\n                        canvas.fillStyle = \"rgba(\" + Math.round(r * 255.0) + \", \" + Math.round(g * 255.0) + \", \" + Math.round(b * 255.0) + \", \" + color.opacity + \")\";\n                        canvas.fillRect(col * colorWidth + startX, row * colorHeight + startY, colorWidth, colorHeight);\n                        col++;\n                        if (col === colCount) {\n                            col = 0;\n                            row++;\n                        }\n                    }\n                    // We have finished inserting\n                    return [2 /*return*/, image];\n                }\n                else {\n                    // Log an error\n                    throw new Error('Could not fit colors into atlas');\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.atlasTexture[atlasName];\n    };\n    /**\n     * This reads the input path and loads the image specified by the path\n     *\n     * @param {AtlasTexture} texture This is an atlas texture with the path set\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (texture) {\n        if (texture.imagePath) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    texture.pixelWidth = image.width;\n                    texture.pixelHeight = image.height;\n                    texture.aspectRatio = image.width / image.height;\n                    resolve(image);\n                };\n                image.onerror = function () {\n                    resolve(null);\n                };\n                image.src = texture.imagePath;\n            });\n        }\n        else if (texture.label) {\n            return new Promise(function (resolve, reject) {\n                var label = texture.label;\n                var labelSize = label.getSize();\n                var canvas = document.createElement('canvas');\n                var ctx = canvas.getContext('2d');\n                // Set the dimensions of the canvas/texture space we will be using to rasterize\n                // The label. Use the label's rasterization controls to aid in rendering the label\n                canvas.width = labelSize.width + texture.label.rasterizationOffset.x;\n                canvas.height = labelSize.height;\n                debug('label X %o', texture.label.rasterizationOffset.x);\n                if (ctx) {\n                    var fontSize = label.fontSize;\n                    var color = d3_color_1.rgb(label.color.base.color.r * 255, label.color.base.color.g * 255, label.color.base.color.b * 255, label.color.base.opacity);\n                    ctx.font = label.makeCSSFont(fontSize);\n                    ctx.textAlign = label.textAlign;\n                    ctx.textBaseline = label.textBaseline;\n                    ctx.fillStyle = color.toString();\n                    // Render the label to the canvas/texture space. This utilizes the label's\n                    // Rasterization metrics to aid in getting a clean render.\n                    ctx.fillText(label.text, texture.label.rasterizationOffset.x, texture.label.rasterizationOffset.y);\n                    var image_1 = new Image();\n                    image_1.onload = function () {\n                        // Here we use the canvas dimensions and NOT the image dimensions\n                        // As the image dimensions are unreliable here when setting the src\n                        // To a data url\n                        texture.pixelWidth = image_1.width;\n                        texture.pixelHeight = image_1.height;\n                        texture.aspectRatio = image_1.width / image_1.height;\n                        debugLabels('Applying size based on rasterization to the Label: w: %o h: %o', image_1.width, image_1.height);\n                        label.setSize({\n                            height: image_1.height,\n                            width: image_1.width,\n                        });\n                        resolve(image_1);\n                    };\n                    image_1.onerror = function () {\n                        resolve(null);\n                    };\n                    image_1.src = canvas.toDataURL('image/png');\n                }\n            });\n        }\n        return Promise.resolve(null);\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds(x, x + width, y, y - height);\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        this.nodeImage = null;\n        if (this.child[0]) {\n            this.child[0].destroy();\n        }\n        if (this.child[1]) {\n            this.child[1].destroy();\n        }\n        this.child[0] = undefined;\n        this.child[1] = undefined;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        if (this.child[0] && !this.child[0].nodeImage) {\n            return !this.child[0].isLeaf;\n        }\n        if (this.child[1] && !this.child[1].nodeImage) {\n            return !this.child[1].isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        if (!this.isLeaf) {\n            // Try inserting into first child\n            var newNode = this.child[0].insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return this.child[1].insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = __webpack_require__(7);\nvar rotateable_quad_1 = __webpack_require__(15);\nvar sprite_1 = __webpack_require__(16);\nvar measurement = new sprite_1.Sprite(200, 200, 1, 1);\nvar Label = (function (_super) {\n    __extends(Label, _super);\n    /**\n     * Creates an instance of Label.\n     *\n     * @param {Partial<Label<T>>} [options={}]\n     */\n    function Label(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, { x: 0, y: 1 }, { width: 1, height: 1 }, 0, rotateable_quad_1.AnchorPosition.TopLeft) || this;\n        _this.depth = 40;\n        _this.direction = 'inherit';\n        _this.font = 'serif';\n        _this.fontSize = 10;\n        _this.fontWeight = 400;\n        _this.maxWidth = undefined;\n        _this.text = '';\n        _this.id = '';\n        _this.textAlign = 'start';\n        _this.textBaseline = 'alphabetic';\n        _this.zoomable = false;\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to offset the rasterization if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationOffset = { x: 20, y: 0 };\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to pad the rasterization space if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationPadding = { width: 0, height: 0 };\n        // Set props\n        Object.assign(_this, options);\n        // Make sure our dimensions are set\n        _this.setFontSize(options.fontSize || 12);\n        return _this;\n    }\n    Object.defineProperty(Label.prototype, \"baseLabel\", {\n        get: function () {\n            return this._baseLabel;\n        },\n        set: function (value) {\n            this._baseLabel = value;\n            this.text = value.text;\n            this.fontSize = value.fontSize;\n            this.font = value.font;\n            this.textAlign = value.textAlign;\n            this.textBaseline = value.textBaseline;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Label.prototype, \"rasterizedLabel\", {\n        /**\n         * This getter ensures the rasterized label retrieved is either this labels own rasterization\n         * or from a base.\n         */\n        get: function () {\n            if (this.baseLabel) {\n                return this.baseLabel.rasterizedLabel;\n            }\n            return this._rasterizedLabel;\n        },\n        set: function (value) {\n            this._rasterizedLabel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies all of the properties of a label and makes this label use them\n     *\n     * @param {Label} label The labels whose properties we wish to copy\n     */\n    Label.prototype.copyLabel = function (label) {\n        // Assign the properties of the other label to this\n        // Specifically, ONLY label properties\n        Object.assign(this, ramda_1.omit(['x', 'y', 'width', 'height'], label));\n        // Use this to set the text to make sure all of the metrics are re-calculated\n        this.setText(label.text);\n    };\n    /**\n     * This gets the actual text this label is capable of rendering\n     */\n    Label.prototype.getText = function () {\n        if (this._baseLabel) {\n            return this._baseLabel.getText();\n        }\n        return this.text;\n    };\n    /**\n     * Takes all of the current settings and makes a CSS font string\n     */\n    Label.prototype.makeCSSFont = function (fontSize) {\n        return this.fontWeight + \" \" + (fontSize || this.fontSize) + \"px \" + this.font;\n    };\n    /**\n     * Change the position this text is rendered to\n     *\n     * @param x X world coordinate\n     * @param y Y world coordinate\n     */\n    Label.prototype.position = function (x, y) {\n        this.x = x;\n        this.y = y;\n    };\n    /**\n     * This sets the font size for the label based on the base text dimensions\n     *\n     * @param {number} fontSize\n     */\n    Label.prototype.setFontSize = function (fontSize) {\n        var lbl = this.getText();\n        var size = this.getSize();\n        var width = size.width;\n        var height = size.height;\n        if (this.baseLabel) {\n            var baseSize = this.baseLabel.getSize();\n            var scale = fontSize / this.baseLabel.fontSize;\n            height = baseSize.height * scale;\n            width = baseSize.width * scale;\n        }\n        else {\n            measurement.context.font = this.makeCSSFont();\n            var size_1 = measurement.context.measureText(lbl);\n            // Set our properties based on the calculated size\n            height = fontSize;\n            width = size_1.width;\n        }\n        this.fontSize = fontSize;\n        this.setSize({ width: width, height: height });\n    };\n    /**\n     * Change the text and the calculated bounding box for this label\n     */\n    Label.prototype.setText = function (lbl) {\n        this.text = lbl;\n        this.setFontSize(this.fontSize);\n    };\n    Label.prototype.update = function () {\n        this.setFontSize(this.fontSize);\n        _super.prototype.update.call(this);\n    };\n    return Label;\n}(rotateable_quad_1.RotateableQuad));\nexports.Label = Label;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar bounds_1 = __webpack_require__(1);\nvar AnchorPosition;\n(function (AnchorPosition) {\n    AnchorPosition[AnchorPosition[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorPosition[AnchorPosition[\"BottomRight\"] = 1] = \"BottomRight\";\n    AnchorPosition[AnchorPosition[\"Custom\"] = 2] = \"Custom\";\n    AnchorPosition[AnchorPosition[\"Middle\"] = 3] = \"Middle\";\n    AnchorPosition[AnchorPosition[\"MiddleBottom\"] = 4] = \"MiddleBottom\";\n    AnchorPosition[AnchorPosition[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorPosition[AnchorPosition[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorPosition[AnchorPosition[\"MiddleTop\"] = 7] = \"MiddleTop\";\n    AnchorPosition[AnchorPosition[\"TopLeft\"] = 8] = \"TopLeft\";\n    AnchorPosition[AnchorPosition[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorPosition = exports.AnchorPosition || (exports.AnchorPosition = {}));\nvar anchorCalculations = (_a = {},\n    _a[AnchorPosition.BottomLeft] = function (quad) { return ({\n        x: 0,\n        y: 0,\n    }); },\n    _a[AnchorPosition.BottomRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: 0,\n    }); },\n    _a[AnchorPosition.Custom] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.Middle] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleBottom] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: 0,\n    }); },\n    _a[AnchorPosition.MiddleLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleTop] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height,\n    }); },\n    _a);\nvar RotateableQuad = (function (_super) {\n    __extends(RotateableQuad, _super);\n    /**\n     * Generates a quad\n     *\n     * @param {IPoint} location The location of the quad (it's anchorpoint will be placed here)\n     * @param {number} width The width of the quad\n     * @param {number} height The height of the quad\n     * @param {AnchorPosition} anchor The anchor location of the quad.\n     *                                Location and rotation will be relative to this.\n     */\n    function RotateableQuad(location, size, rotation, anchor) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        // Apply our properties\n        _this.setSize(size);\n        _this.setAnchor(anchor);\n        _this.setLocation(location);\n        _this.setRotation(rotation);\n        // Update the transform and the corner vertices\n        _this.update();\n        return _this;\n    }\n    /**\n     * @private\n     * Recalculates this anchor position based on the anchor type\n     *\n     * @param {AnchorPosition} anchor\n     */\n    RotateableQuad.prototype.calculateAnchor = function (anchor) {\n        this.anchor = anchorCalculations[anchor](this);\n    };\n    /**\n     * Get the base size of the quad\n     *\n     * @returns {ISize} The base size of this quad\n     */\n    RotateableQuad.prototype.getSize = function () {\n        return this.size;\n    };\n    /**\n     * Sets the specified anchor position on the quad\n     *\n     * @param {AnchorPosition} anchor This specifies an auto calculated position for the anchor\n     * @param {IPoint} custom If specified, will set a custom anchor location rather\n     *                        than the calculated version.\n     */\n    RotateableQuad.prototype.setAnchor = function (anchor, custom) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        this.anchorType = anchor;\n        // Apply the custom position if present\n        if (custom) {\n            this.anchorType = AnchorPosition.Custom;\n            this.anchor = custom;\n            return;\n        }\n        this.calculateAnchor(anchor);\n    };\n    RotateableQuad.prototype.getAnchor = function () {\n        return this.anchor;\n    };\n    RotateableQuad.prototype.getAnchorType = function () {\n        return this.anchorType;\n    };\n    /**\n     * This sets the location of this quad to a given position where the anchor\n     * point will be located on top of the location provided.\n     *\n     * @param {IPoint} location The location to place the quad\n     */\n    RotateableQuad.prototype.setLocation = function (location) {\n        this.location = location;\n    };\n    RotateableQuad.prototype.getLocation = function () {\n        return this.location;\n    };\n    /**\n     * Sets the rotation of this quad, in radians, rotated around the anchor point.\n     *\n     * @param {number} rotation The rotation of the quad\n     */\n    RotateableQuad.prototype.setRotation = function (rotation) {\n        this.rotation = rotation;\n    };\n    /**\n     * get Rotation\n     */\n    RotateableQuad.prototype.getRotation = function () {\n        return this.rotation;\n    };\n    /**\n     * get direction as a point\n     */\n    RotateableQuad.prototype.getDirection = function () {\n        var angle = this.rotation;\n        return {\n            x: Math.cos(angle),\n            y: Math.sin(angle),\n        };\n    };\n    /**\n     * Applies the size to the base\n     *\n     * @param {ISize} size The size of the base quad\n     */\n    RotateableQuad.prototype.setSize = function (size) {\n        this.size = size;\n        this.base = [\n            new three_1.Vector4(0, size.height, 0, 1),\n            new three_1.Vector4(size.width, size.height, 0, 1),\n            new three_1.Vector4(0, 0, 0, 1),\n            new three_1.Vector4(size.width, 0, 0, 1),\n        ];\n        if (this.anchorType) {\n            this.calculateAnchor(this.anchorType);\n        }\n    };\n    /**\n     * This re-calculates the transform for this quad and applies the transform to\n     * the corners.\n     */\n    RotateableQuad.prototype.update = function () {\n        // Calculate the pieces of the transformation\n        var anchorMat = new three_1.Matrix4().makeTranslation(this.anchor.x, -this.anchor.y, 0);\n        var rotationMat = new three_1.Matrix4().makeRotationZ(this.rotation);\n        var locationMat = new three_1.Matrix4().makeTranslation(this.location.x, this.location.y, 0);\n        // Compose the transform based on the pieces and apply them\n        // In the proper compositing order\n        this.transform = new three_1.Matrix4()\n            .multiply(locationMat)\n            .multiply(rotationMat)\n            .multiply(anchorMat);\n        // Apply the transform to all of our base vertices\n        this.TL = this.base[0].clone().applyMatrix4(this.transform);\n        this.TR = this.base[1].clone().applyMatrix4(this.transform);\n        this.BL = this.base[2].clone().applyMatrix4(this.transform);\n        this.BR = this.base[3].clone().applyMatrix4(this.transform);\n        // Update the bounds of this object\n        this.x = this.TL.x;\n        this.y = this.TL.y;\n        this.width = 1;\n        this.height = 1;\n        this.encapsulatePoints([this.TR, this.BL, this.BR]);\n    };\n    return RotateableQuad;\n}(bounds_1.Bounds));\nexports.RotateableQuad = RotateableQuad;\nvar _a;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A canvas element wrapper that aids in tracking a canvas element along with\n * content scaling properties.\n *\n * @class Sprite\n */\nvar Sprite = (function () {\n    //\n    // Ctor at the top below props\n    //\n    /**\n     * Creates an instance of Sprite.\n     *\n     * @param w             The width of the context to create\n     * @param h             The height of the context to create\n     * @param contentScaleX The content scaling of the content\n     * @param contentScaleY The content scaling of the content\n     *\n     * @memberOf Sprite\n     */\n    function Sprite(w, h, contentScaleX, contentScaleY) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n        var canvas = document.createElement('canvas');\n        if (canvas) {\n            this.scaleX = contentScaleX || this.scaleX;\n            this.scaleY = contentScaleY || this.scaleY;\n            canvas.width = w * this.scaleX;\n            canvas.height = h * this.scaleY;\n            this.context = canvas.getContext('2d');\n            this.canvas = canvas;\n        }\n    }\n    /**\n     * Retrieves the content scaling of this object\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentScale = function () {\n        return {\n            x: this.scaleX,\n            y: this.scaleY,\n        };\n    };\n    /**\n     * Retrieves the size of the content ignoring scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentSize = function () {\n        return {\n            height: this.canvas.height,\n            width: this.canvas.width,\n        };\n    };\n    /**\n     * Retrieves the dimensional width of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getWidth = function () {\n        return this.canvas.width / this.scaleX;\n    };\n    /**\n     * Retrieves the dimensional height of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getHeight = function () {\n        return this.canvas.height / this.scaleY;\n    };\n    return Sprite;\n}());\nexports.Sprite = Sprite;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = __webpack_require__(33);\nvar three_1 = __webpack_require__(0);\nvar debug = __webpack_require__(2)('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e.nativeEvent;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || e.nativeEvent.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.bounds = null;\n        this.children = [];\n        this.childrenProps = [];\n        this.depth = 0;\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds(left, right, top, bottom);\n        }\n        else {\n            this.bounds = new bounds_1.Bounds(0, 1, 1, 0);\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        this.children = null;\n        this.bounds = null;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom < minY) {\n                minY = child.bottom;\n            }\n            if (child.y > maxY) {\n                maxY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds(minX, maxX, maxY, minY));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y += 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Collects all props associated with the children. This array of props will\n     * mirror the list retrieved with gatherChildren.\n     *\n     * @param list\n     *\n     * @returns The list specified as the list paramter\n     *\n     * @memberOf Node\n     */\n    Node.prototype.gatherProps = function (list) {\n        var _this = this;\n        this.children.forEach(function (c, index) {\n            list.push(_this.childrenProps[index]);\n        });\n        if (this.nodes) {\n            this.nodes.TL.gatherProps(list);\n            this.nodes.TR.gatherProps(list);\n            this.nodes.BL.gatherProps(list);\n            this.nodes.BR.gatherProps(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        this.childrenProps = [];\n        while (allChildren.length > 0) {\n            this.doAdd(allChildren.pop());\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nvar WebGLStat = (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.printCurrentProgramInfo = function (debug, surface) {\n        if (surface.gl) {\n            var info = getProgramInfo(surface.gl, surface.gl.getParameter(surface.gl.CURRENT_PROGRAM));\n            var table = window.table;\n            if (table) {\n                table(info.uniforms);\n            }\n        }\n        else {\n            debug('Attempted to printProgramInfo but the surface has not established its gl context yet');\n        }\n    };\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    }\n}\ninitStats();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar curved_line_1 = __webpack_require__(21);\nvar line_1 = __webpack_require__(6);\nvar point_1 = __webpack_require__(5);\n/**\n * This defines a drawable curved line shape. It contains the information necessary\n * to efficiently render the line.\n *\n * @export\n * @class CurvedLineShape\n * @extends {CurvedLine<T>}\n * @template T An associated data type that can be linked to this shape to make data retrieval from interacting\n *             with the shape easier.\n */\nvar CurvedLineShape = (function (_super) {\n    __extends(CurvedLineShape, _super);\n    /**\n     * Creates an instance of CurvedLineShape.\n     *\n     * @param {ICurvedLineShapeOptions} options The options for creating this line\n     */\n    function CurvedLineShape(options) {\n        var _this = \n        // We pass our properties to the curve line but we do not let it cache it's version of the line segments\n        // As we will be constructing our own segmentation requiring a new type of cache\n        _super.call(this, options) || this;\n        /** Depeth of draw location */\n        _this.depth = 0;\n        /** How thick the line should be */\n        _this.lineWidth = 1;\n        _this.encapsulatePoints(_this.getTriangleStrip());\n        _this.cachesQuadSegments = options.cacheSegments;\n        _this.depth = options.depth || 0;\n        _this.lineWidth = options.lineWidth || 1;\n        _this.startColor = options.startColor;\n        _this.endColor = options.endColor;\n        return _this;\n    }\n    /**\n     * Returns a new instance of this object that mimicks the properties of this Object\n     *\n     * @returns {CurvedLineShape<T>} The cloned object\n     */\n    CurvedLineShape.prototype.clone = function () {\n        // Perform the clone\n        var clone = new CurvedLineShape({\n            cacheSegments: this.cachesSegments,\n            controlPoints: this.controlPoints,\n            end: this.end,\n            endColor: this.endColor,\n            lineWidth: this.lineWidth,\n            resolution: this.resolution,\n            start: this.start,\n            startColor: this.startColor,\n            type: this.type,\n        });\n        clone.d = this.d;\n        return clone;\n    };\n    /**\n     * @override\n     * See base definition\n     */\n    CurvedLineShape.prototype.distanceTo = function (point) {\n        return Math.max(0, _super.prototype.distanceTo.call(this, point) - (this.lineWidth / 2.0));\n    };\n    /**\n     * This produces a triangle strip that represents the quads that composes this line. If caching is present,\n     * subsequent calls to this method will be much faster unless the cache gets invalidated.\n     *\n     * @return {IPoint[]} The Triangle Strip of points to create the quads that make each segment of the curve\n     */\n    CurvedLineShape.prototype.getTriangleStrip = function () {\n        if (this.cachesSegments && this.cachedQuadSegments) {\n            return this.cachedQuadSegments;\n        }\n        // Make a container to hold our triangle strip info\n        var strip = [];\n        var normal = [];\n        // Start with calculating the line strip so we can use the line segments\n        // To produce the quads we need to render\n        var lineStrip = this.getLineStrip();\n        var lineWidthHalf = this.lineWidth / 2.0;\n        var line = new line_1.Line(point_1.Point.zero(), point_1.Point.zero());\n        // We make a container point for the scaling operation to reduce allocations\n        var scaledPoint = point_1.Point.zero();\n        // If the line strip is empty, then there is nothing to produce and makes\n        // Us unable to reduce the lineStrip, so return empty here\n        if (lineStrip.length < 2) {\n            return [];\n        }\n        // Calculate bisecting normal or each node\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            line.setPoints(lineStrip[i], lineStrip[i + 1]);\n            if (normal.length === 0) {\n                normal.push(line.perpendicular);\n            }\n            else {\n                // Sum of two normals of a point\n                var temp = {\n                    x: normal[i].x + line.perpendicular.x,\n                    y: normal[i].y + line.perpendicular.y,\n                };\n                // Normalize the sum of two normals\n                var sqrt = Math.sqrt(temp.x * temp.x + temp.y * temp.y);\n                temp.x = temp.x / sqrt;\n                temp.y = temp.y / sqrt;\n                normal[i] = temp;\n            }\n            normal.push(line.perpendicular);\n        }\n        // Use the new normals to generate quads\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            var previous = lineStrip[i];\n            var current = lineStrip[i + 1];\n            // TR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], -lineWidthHalf, scaledPoint), current));\n            // BR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], lineWidthHalf, scaledPoint), current));\n            // TL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], -lineWidthHalf, scaledPoint), previous));\n            // BL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], lineWidthHalf, scaledPoint), previous));\n        }\n        return strip;\n    };\n    /**\n     * @override\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     */\n    CurvedLineShape.prototype.setPoints = function (start, end, controlPoints) {\n        _super.prototype.setPoints.call(this, start, end, controlPoints);\n        this.cachedQuadSegments = [];\n    };\n    return CurvedLineShape;\n}(curved_line_1.CurvedLine));\nexports.CurvedLineShape = CurvedLineShape;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar interpolation_1 = __webpack_require__(11);\nvar bounds_1 = __webpack_require__(1);\nvar line_1 = __webpack_require__(6);\nvar point_1 = __webpack_require__(5);\nvar debug = __webpack_require__(2)('bezier');\n/**\n * This enum covers the type of curved lines that can be made. Making a specific curve\n *\n * @export\n * @enum {number}\n */\nvar CurveType;\n(function (CurveType) {\n    /** This will make the curve be generated from interpolating between the end points and provided control points */\n    CurveType[CurveType[\"Bezier\"] = 0] = \"Bezier\";\n    /**\n     * This will draw a curve as though there is a circular arc passing over the two end points. The radius of the\n     * circular arc is determined by how far the control point is from the straight line that can be made from the two\n     * end points.\n     */\n    CurveType[CurveType[\"CircularCCW\"] = 1] = \"CircularCCW\";\n    CurveType[CurveType[\"CircularCW\"] = 2] = \"CircularCW\";\n    /**\n     * This ignores the control points altogether and just created a straight line with a single segment that consists\n     * of the specified endpoints\n     */\n    CurveType[CurveType[\"Straight\"] = 3] = \"Straight\";\n})(CurveType = exports.CurveType || (exports.CurveType = {}));\n// -------[ Distance Calculating Methods ]----------------------------\n/**\n * Calculates the distance to the bezier curve by testing all of the bezier curve's segment lines\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction bezierDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a circle\n * TODO: Using the segment approach for now. Can be sped up by using circle math\n * instead\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction circularDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a straight line\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction straightDistance(line, testPoint) {\n    return new line_1.Line(line.start, line.end).distanceTo(testPoint);\n}\n// -------[ Segment Generating Methods ]----------------------------\n/**\n * Uses quadratic bezier principles to create the segments for a quadratic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier2Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var lineEnd = line.end;\n    var c1 = line.controlPoints[0];\n    for (var i = 0, end = line.resolution; i <= end; ++i) {\n        segments.push(interpolation_1.bezier2(dt * i, start, lineEnd, c1));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Uses cubic bezier principles to create the segments for a cubic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier3Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var lineEnd = line.end;\n    var c1 = line.controlPoints[0];\n    var c2 = line.controlPoints[1];\n    for (var i = 0, end = line.resolution; i <= end; ++i) {\n        segments.push(interpolation_1.bezier3(dt * i, start, lineEnd, c1, c2));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that follows along a circular path on the line.\n * The distance the control point is from the straight line that flows through the two\n * end points of the line determines the radius of the curvature of the line\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeCircularCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    debug('CW');\n    // Generate a line so we can have a perpendicular calculation\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    var circleCenter = line.controlPoints[1];\n    if (!circleCenter) {\n        // We get the midpoint of the line as we want to align the center of the circle with this point\n        var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n        var minRadius = point_1.Point.getDistance(midPoint, line.start);\n        // The shortest the radius can be is the distance from the line to the mid point\n        // Anything shorter will just result in a hemisphere being rendered\n        if (radius < minRadius) {\n            radius = point_1.Point.getDistance(midPoint, line.start);\n        }\n        // Get the perpendicular direction to the line so we can calculate the center of our circle\n        // From the mid point\n        var perpendicular = straightLine.perpendicular;\n        var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n        // Calculate the location of the center of the circle\n        circleCenter = {\n            x: perpendicular.x * distance + midPoint.x,\n            y: perpendicular.y * distance + midPoint.y,\n        };\n        // Store the circle center as an extra control point in case the value is needed\n        // (which it often is)\n        line.controlPoints[1] = circleCenter;\n    }\n    debug(' center of circle is %o  %o', circleCenter.x, circleCenter.y);\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Calculate how much to increment theta in our parametric circular equation\n    if (theta1 < theta2)\n        theta1 += Math.PI * 2;\n    var dTheta = (theta1 - theta2) / line.resolution;\n    debug('theta1 is %o, theta2 is %o', theta1, theta2);\n    // Compute the segments based on the information we have gathered by applying it to a circular\n    // Parametric equation\n    var segments = [];\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 - (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 - (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    // Cache the segments if specified by the curved line\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    debug('Generated Circular Segments: %o dTheta: %o radius: %o', segments, dTheta, radius);\n    return segments;\n}\nfunction makeCircularCCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    var circleCenter = line.controlPoints[1];\n    if (!circleCenter) {\n        var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n        var minRadius = point_1.Point.getDistance(midPoint, line.start);\n        if (radius < minRadius) {\n            radius = point_1.Point.getDistance(midPoint, line.start);\n        }\n        var perpendicular = straightLine.perpendicular;\n        var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n        circleCenter = {\n            x: -perpendicular.x * distance + midPoint.x,\n            y: -perpendicular.y * distance + midPoint.y,\n        };\n        // Store the circle center as an extra control point in case the value is needed\n        // (which it often is)\n        line.controlPoints[1] = circleCenter;\n    }\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    if (theta2 < theta1)\n        theta2 += Math.PI * 2;\n    var dTheta = (theta2 - theta1) / line.resolution;\n    var segments = [];\n    // CCW, from end to start\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 + (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 + (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    if (line.cachedSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that is straight, thus only 1 segments is needed\n * and will be generated.\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeStraightSegments(line) {\n    return [line.start, line.end];\n}\n/** A quick lookup for a proper segment creating method for a curved line  */\nvar pickSegmentMethod = (_a = {},\n    _a[CurveType.Bezier] = [\n        null,\n        makeBezier2Segments,\n        makeBezier3Segments,\n    ],\n    _a[CurveType.CircularCW] = [\n        null,\n        makeCircularCWSegments,\n        makeCircularCWSegments,\n    ],\n    _a[CurveType.CircularCCW] = [\n        null,\n        makeCircularCCWSegments,\n        makeCircularCCWSegments,\n    ],\n    _a[CurveType.Straight] = [\n        makeStraightSegments,\n    ],\n    _a);\n/** A quick lookup for a proper distance calculating method for a curved line  */\nvar pickDistanceMethod = (_b = {},\n    _b[CurveType.Bezier] = bezierDistance,\n    _b[CurveType.CircularCW] = circularDistance,\n    _b[CurveType.CircularCCW] = circularDistance,\n    _b[CurveType.Straight] = straightDistance,\n    _b);\n/**\n * Defines an object which illustrates a curved line. Curved lines can be formed in many\n * ways but most often from two end points and some provided control points.\n *\n * @export\n * @class CurvedLine\n * @extends {Bounds<T>}\n * @template T An associated data type with this object. Use <never> if no data type is ever associated\n */\nvar CurvedLine = (function (_super) {\n    __extends(CurvedLine, _super);\n    /**\n     * Generates a primitive that describes a curved line, which is defined by the lines end points, type, and control points\n     *\n     * @param {ICurvedLineOptions} options The configuration options of this curved line\n     */\n    function CurvedLine(options) {\n        var _this = this;\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        _this = _super.call(this, minX, maxX, maxY, minY) || this;\n        // Apply the relevant properties to the curve\n        _this.cachesSegments = options.cacheSegments || false;\n        _this.type = options.type;\n        _this.resolution = options.resolution || 20;\n        // Set the metrics for this curved line\n        _this.setPoints(options.start, options.end, options.controlPoints);\n        // Set the method that will be used for calculating distance from a point\n        _this.distanceMethod = pickDistanceMethod[options.type];\n        return _this;\n    }\n    Object.defineProperty(CurvedLine.prototype, \"values\", {\n        get: function () {\n            return {\n                controlPoints: this.controlPoints,\n                end: this.end,\n                start: this.start,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the nearest distance from the provided point to this curved line\n     *\n     * @param {IPoint} point The point to test the distance from\n     *\n     * @returns {number} The calculated nearest distance from this curve to the point\n     */\n    CurvedLine.prototype.distanceTo = function (point) {\n        return this.distanceMethod(this, point);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {CurvedLine<any>[]} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    CurvedLine.getClosest = function (lines, point) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(point);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This returns the line strip that represents the curve. A line strip is specifically a group of points\n     * that forms line segments by taking the current point as one end and the previous point as the second end\n     * thus, you would start at index 1 and loop to the end to generate all of the lines composing this single\n     * line.\n     *\n     * @return {IPoint[]} All of the points in the line strip\n     */\n    CurvedLine.prototype.getLineStrip = function () {\n        return this.segmentMethod(this);\n    };\n    /**\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     * @param {boolean} preventRebounding If set, this will prevent the bounds from being recalculated\n     */\n    CurvedLine.prototype.setPoints = function (start, end, controlPoints) {\n        // Apply the points\n        this.start = start;\n        this.end = end;\n        if (controlPoints.length === 0)\n            debug('start: %o, end:%o', start, end);\n        // Get the available segment methods for the given type\n        var segmentMethods = pickSegmentMethod[this.type];\n        // If we adjust the control points we need to re-evaluate the type of segment creation method we use\n        if (controlPoints) {\n            this.controlPoints = controlPoints;\n            // Get the number of control points we want to base the curve off of\n            var numControlPoints = controlPoints.length;\n            // If we have more control points than the methods available, then we use the greatest method available to best\n            // Handle as many control points as possible\n            if (numControlPoints > segmentMethods.length) {\n                numControlPoints = segmentMethods.length - 1;\n            }\n            // Set the method that will be used for generating segments\n            this.segmentMethod = segmentMethods[numControlPoints];\n            // Make sure the input wasn't bad\n            if (!this.segmentMethod) {\n                throw new Error('An Invalid number of control points was provided to a curved line. You must have at LEAST 1 control point. Or 0 for a straight line');\n            }\n            if (this.type === CurveType.Bezier) {\n                this.encapsulatePoints(controlPoints);\n            }\n            else if (this.type === CurveType.CircularCCW || this.type === CurveType.CircularCW) {\n                this.encapsulatePoints(this.getLineStrip());\n            }\n        }\n        this.encapsulatePoint(start);\n        this.encapsulatePoint(end);\n        // Invalidate caches if they exist\n        this.cachedSegments = null;\n    };\n    return CurvedLine;\n}(bounds_1.Bounds));\nexports.CurvedLine = CurvedLine;\nvar _a, _b;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\nvar UID = 0;\nvar Circle = (function (_super) {\n    __extends(Circle, _super);\n    /**\n     * Generate a new Circle object\n     *\n     * @param x The center of the circle\n     * @param y The center of the circle\n     * @param r The radius of the circle\n     * @param d A data object to associate with the circle\n     */\n    function Circle(options) {\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        /** a UID of the circle */\n        _this._id = ++UID;\n        /** Radius of the circle */\n        _this._radius = 0;\n        /** X coord of the center of the circle */\n        _this._centerX = 0;\n        /** Y coord of the center of the circle */\n        _this._centerY = 0;\n        _this._centerX = options.centerX;\n        _this._centerY = options.centerY;\n        _this._radius = options.radius;\n        _this.updateBounds();\n        return _this;\n    }\n    Object.defineProperty(Circle.prototype, \"values\", {\n        get: function () {\n            return {\n                radius: this._radius,\n                x: this._centerX,\n                y: this._centerY,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"radius\", {\n        get: function () {\n            return this._radius;\n        },\n        set: function (val) {\n            this._radius = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerX\", {\n        get: function () {\n            return this._centerX;\n        },\n        set: function (val) {\n            this._centerX = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerY\", {\n        get: function () {\n            return this._centerY;\n        },\n        set: function (val) {\n            this._centerY = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Tests if the specified bounds is inside this circle\n     *\n     * @param b The bounds to test against\n     */\n    Circle.prototype.boundsInside = function (b) {\n        var r2 = this._radius * this._radius;\n        var dx = b.x - this._centerX;\n        var dy = b.y - this._centerY;\n        var dy2 = dy * dy;\n        var dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.right - this._centerX;\n        dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dy = b.bottom - this._centerY;\n        dy2 = dy * dy;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.x - this._centerX;\n        dx2 = dx * dx;\n        return (dx2 + dy2) < r2;\n    };\n    /**\n     * Calculates the distance to a provided point\n     *\n     * @param {IPoint} p The point to calculate the distance of the middle of the\n     *                   circle to\n     * @param {boolean} notSquared Flag true to prevent the Math.sqrt operation, leaving\n     *                             the result as distance^2\n     *\n     * @return {number} The distance from mid circle to the point\n     */\n    Circle.prototype.distanceTo = function (p, notSquared) {\n        var dx = this._centerX - p.x;\n        var dy = this._centerY - p.y;\n        if (notSquared) {\n            return dx * dx + dy * dy;\n        }\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n    /**\n     * Retrieves the closest circle to a provided point\n     *\n     * @param {Array} circles The circles to see who is the nearest\n     * @param {IPoint} p The point to compare the circles against for nearness\n     *\n     * @return {Circle} The nearest circle\n     */\n    Circle.getClosest = function (circles, p) {\n        var closestCircle;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        circles.forEach(function (circle) {\n            distance = circle.distanceTo(p, true);\n            if (distance < closestDistance) {\n                closestCircle = circle;\n                closestDistance = distance;\n            }\n        });\n        return closestCircle;\n    };\n    /**\n     * Tests if this circle is colliding with the specified circle\n     *\n     * @param c The circle to test against\n     *\n     * @return {boolean} True if colliding\n     */\n    Circle.prototype.hitCircle = function (c) {\n        var totalDistance = c._radius + this._radius;\n        totalDistance *= totalDistance;\n        return this.distanceTo({ x: c._centerX, y: c._centerY }, true) < totalDistance;\n    };\n    /**\n     * @override\n     * This makes it so the test of a point tests based on a Circle shape\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.hitPoint = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * If there are multiple metrics to update for the circle, this is the most\n     * efficient way to do that as it will update it's bounds only once.\n     *\n     * @param x\n     * @param y\n     * @param r\n     */\n    Circle.prototype.position = function (x, y, r) {\n        this._centerX = x;\n        this._centerY = y;\n        this._radius = r;\n        this.updateBounds();\n    };\n    /**\n     * @override\n     * Tests if a point is inside the circle\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.pointInside = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * When the circle gains different circle metrics, it's Bounds must adjust\n     * accordingly, which is what this method recalculates.\n     */\n    Circle.prototype.updateBounds = function () {\n        var radius = this._radius;\n        this.x = this._centerX - radius;\n        this.y = this._centerY - radius;\n        this.height = radius * 2;\n        this.width = radius * 2;\n    };\n    /**\n     * Pretty print the metrics of this circle\n     */\n    Circle.prototype.toString = function () {\n        return \"[Circle {x: \" + this._centerX + \", y: \" + this._centerY + \", r: \" + this._radius + \"}]\";\n    };\n    return Circle;\n}(bounds_1.Bounds));\nexports.Circle = Circle;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar line_1 = __webpack_require__(6);\n/**\n * Defines a line that can be drawn\n */\nvar LineShape = (function (_super) {\n    __extends(LineShape, _super);\n    /**\n     * Generate a new line that can be drawn\n     */\n    function LineShape(options) {\n        var _this = _super.call(this, options.p1, options.p2) || this;\n        _this.depth = options.depth || 0.0;\n        _this.endColor = options.endColor;\n        _this.startColor = options.startColor;\n        _this.thickness = options.thickness || 1.0;\n        return _this;\n    }\n    /**\n     * Clones this instance of the line shape and creates a new instance of a line shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this line shape\n     */\n    LineShape.prototype.clone = function (newProperties) {\n        return Object.assign(new LineShape(this), newProperties);\n    };\n    return LineShape;\n}(line_1.Line));\nexports.LineShape = LineShape;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shape_buffer_cache_1 = __webpack_require__(25);\n/** This is a part of the identifier that is used to retrieve a multibuffer's storage */\nvar multiBufferSelectionPrefix = '__mb__';\n/** This is to ensure each multibuffer gets it's own unique selection identifier */\nvar multiBufferSelectionKeyUID = 0;\nfunction getIDProp(item) {\n    return item.id;\n}\nfunction evenRoundRobinBufferAdd(item, buffers) {\n    var smallest = buffers[0].buffer.length;\n    var found = buffers[0];\n    // Look for the next buffer that has the smallest length\n    // To fill it up\n    buffers.some(function (tracker) {\n        if (tracker.buffer.length < smallest) {\n            found = tracker;\n            return true;\n        }\n        return false;\n    });\n    found.buffer.push(item);\n    return [found];\n}\nfunction noop() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // NO-OP\n}\nfunction echoBuffer(item, buffer, buffers) {\n    return [buffer];\n}\n/**\n * This class helps facilitate breaking up a potentially large shape buffer into multiple buffers.\n */\nvar MultiShapeBufferCache = (function (_super) {\n    __extends(MultiShapeBufferCache, _super);\n    /**\n     * Makes a new multi shape buffer for minimizing changes\n     *\n     * @param numBuffers The number of buffers this multibuffer will manage\n     */\n    function MultiShapeBufferCache(numBuffers, methods) {\n        var _this = _super.call(this) || this;\n        /** The number of buffers this multi buffer manages */\n        _this.numBuffers = 0;\n        /** UID for storing the data for this buffer in the selection */\n        _this.selectionUID = multiBufferSelectionPrefix + (++multiBufferSelectionKeyUID);\n        /**\n         * The method used to add to the buffers. This is changeable so one can implement geometric or\n         * logical adds for invalidation. This returns a list of buffers that will be invalidated from\n         * the operation. The first buffer returned in the invalidation is the strongly associated buffer\n         * to the item injected. This first buffer is the most likely buffer the item is injected into.\n         */\n        _this.addMethod = evenRoundRobinBufferAdd;\n        /**\n         * Gives an implentor opportunity to define the way an is is specified for a given item. It\n         * defaults to searching for an 'id' property on the item.\n         */\n        _this.idMethod = getIDProp;\n        /**\n         * The method that is called right after the initial buffers get constructed. This is changeable\n         * so monitors can.\n         */\n        _this.initMethod = noop;\n        /**\n         * The method that is called right before a shape is removed from a buffer.\n         * This let's the\n         */\n        _this.removeMethod = echoBuffer;\n        /**\n         * The method that is called when an item is updated. This gives a monitor a chance to invalidate\n         * a number of buffers.\n         */\n        _this.updateMethod = echoBuffer;\n        // Store the number of buffers that are created when the buffers are initialized\n        _this.numBuffers = numBuffers;\n        // Set the hook methods if any are specified\n        if (methods) {\n            _this.addMethod = methods.add || _this.addMethod;\n            _this.idMethod = methods.id || _this.idMethod;\n            _this.initMethod = methods.init || _this.initMethod;\n            _this.removeMethod = methods.remove || _this.removeMethod;\n            _this.updateMethod = methods.update || _this.updateMethod;\n        }\n        return _this;\n    }\n    /**\n     * Adds a shape to a buffer and invalidates it\n     *\n     * @param shape The shape to add to a buffer\n     */\n    MultiShapeBufferCache.prototype.addShape = function (shape) {\n        // Perform the custom add opearation\n        var buffers = this.addMethod(shape, this.store.allBuffers);\n        // Stores the shape for lookup via id\n        this.store.idToItem.set(this.idMethod(shape), shape);\n        // Stores the shape for lookup to buffer. We count the\n        // First dirty buffer as the buffer the item is the closest to\n        // Association.\n        this.store.itemToBuffer.set(shape, buffers[0]);\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    /**\n     * Sees if there is a shape associated with this id\n     *\n     * @param id\n     */\n    MultiShapeBufferCache.prototype.containsId = function (id) {\n        return Boolean(this.store.idToItem.get(id));\n    };\n    /**\n     * Sees if this shape has been added to this buffer or not\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.containsShape = function (shape) {\n        // Check if this multibuffer has the shape or no\n        return Boolean(this.store.itemToBuffer.get(shape));\n    };\n    /**\n     * This flags a list of buffers as dirty\n     *\n     * @param buffers\n     */\n    MultiShapeBufferCache.prototype.flagBuffersDirty = function (buffers) {\n        // Flag provided buffers as dirty\n        if (buffers) {\n            // This flags the indicated buffers as dirty\n            buffers.forEach(function (buffer) { return buffer.isDirty = true; });\n        }\n        else {\n            this.store.allBuffers.forEach(function (buffer) { return buffer.isDirty = true; });\n        }\n    };\n    /**\n     * @override\n     * This is called with triggers all of the updates necessary.\n     * We add in our buffer update and invalidation to this process here.\n     *\n     * @param args\n     */\n    MultiShapeBufferCache.prototype.generate = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Make sure the storage is established before trying to create modifications of any sort\n        this.getStorage(selection);\n        // Run the generation which will trigger cache building and modding\n        _super.prototype.generate.apply(this, arguments);\n        // We now invalidate any buffers that have been flagged\n        this.processDirtyBuffers();\n    };\n    /**\n     * @override\n     * This retrieves the multibuffer for this shape buffer\n     */\n    MultiShapeBufferCache.prototype.getBuffer = function () {\n        console.warn('A multishape buffer should have getBuffers called instead');\n        return [];\n    };\n    /**\n     * Get all of the buffers.\n     * WARNING: do NOT modify the output values in any way.\n     *\n     * @return {T[][]} All of the buffers\n     */\n    MultiShapeBufferCache.prototype.getBuffers = function () {\n        if (this.store) {\n            return this.store.allBuffers.map(function (tracker) { return tracker.buffer; });\n        }\n        return [];\n    };\n    /**\n     * Returns the number of buffers this MultiShapeBuffer is managing.\n     */\n    MultiShapeBufferCache.prototype.getNumBuffers = function () {\n        return this.store.allBuffers.length;\n    };\n    /**\n     * Retrieves a shape by the given id. Is undefined if the id is not recognized.\n     *\n     * @param id\n     */\n    MultiShapeBufferCache.prototype.getShapeById = function (id) {\n        return this.store.idToItem.get(id);\n    };\n    /**\n     * This makes all buffers a part of a new array pointer thus making sure\n     * they will be committed to the gpu.\n     */\n    MultiShapeBufferCache.prototype.processDirtyBuffers = function () {\n        this.store.allBuffers.forEach(function (tracker) {\n            if (tracker.isDirty) {\n                tracker.isDirty = false;\n                tracker.buffer = [].concat(tracker.buffer);\n            }\n        });\n    };\n    /**\n     * This retrieves the storage inside the selection. If it doesn't exist,\n     * then the storage is created.\n     *\n     * @param selection\n     */\n    MultiShapeBufferCache.prototype.getStorage = function (selection) {\n        // Get the storage from the selection\n        var storage = (selection.getSelection(this.selectionUID) || [])[0];\n        // If the storage is not stored in the selection, then we create a storage and update the selection with that storage\n        if (!storage) {\n            storage = {\n                allBuffers: [],\n                idToItem: new Map(),\n                itemToBuffer: new Map(),\n            };\n            // Generate the buffers indicated\n            for (var i = 0; i < this.numBuffers; ++i) {\n                storage.allBuffers.push({\n                    buffer: [],\n                    isDirty: false,\n                });\n            }\n            // Initialize anything that may be monitoring the buffers\n            this.initMethod(storage.allBuffers);\n            // Add the storage to the selection\n            selection.select(this.selectionUID, storage);\n        }\n        // Make sure our internal pointer to the storage is set correctly\n        return (this.store = storage);\n    };\n    /**\n     * Removes a shape from the buffer it is a part of.\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.removeShape = function (shape) {\n        // This is the buffer associated with the shape\n        var buffer = this.store.itemToBuffer.get(shape);\n        // Get the buffers invalidated by the remove\n        var buffers = this.removeMethod(shape, buffer, this.store.allBuffers);\n        // Clear the shape out from the buffer\n        buffer.buffer.splice(buffer.buffer.indexOf(shape), 1);\n        // Delete the item from the id lookup\n        this.store.idToItem.delete(this.idMethod(shape));\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    /**\n     * This is called to indicate an update to an item has occurred.\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.updateShape = function (shape) {\n        // Flag each element that needs updating\n        var buffers = this.updateMethod(shape, this.store.itemToBuffer.get(shape), this.store.allBuffers);\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    return MultiShapeBufferCache;\n}(shape_buffer_cache_1.ShapeBufferCache));\nexports.MultiShapeBufferCache = MultiShapeBufferCache;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar ShapeBufferCache = (function () {\n    function ShapeBufferCache() {\n        this.buffer = [];\n        this.bustCache = true;\n    }\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    ShapeBufferCache.prototype.generate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this.bustCache) {\n            this.buildCache.apply(this, args);\n            this.bustCache = false;\n        }\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    ShapeBufferCache.prototype.buildCache = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Get the buffer the cache has generated\n     */\n    ShapeBufferCache.prototype.getBuffer = function () {\n        return this.buffer;\n    };\n    return ShapeBufferCache;\n}());\nexports.ShapeBufferCache = ShapeBufferCache;\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(27));\n__export(__webpack_require__(34));\n__export(__webpack_require__(43));\n__export(__webpack_require__(51));\n__export(__webpack_require__(52));\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = __webpack_require__(7);\nvar React = __webpack_require__(28);\nvar three_1 = __webpack_require__(0);\nvar atlas_manager_1 = __webpack_require__(12);\nvar atlas_texture_1 = __webpack_require__(8);\nvar bounds_1 = __webpack_require__(1);\nvar frame_info_1 = __webpack_require__(9);\nvar mouse_1 = __webpack_require__(17);\nvar quad_tree_1 = __webpack_require__(18);\nvar webgl_stat_1 = __webpack_require__(19);\nvar debug = __webpack_require__(2)('webgl-surface:GPU');\nvar debugCam = __webpack_require__(2)('webgl-surface:Camera');\nvar debugLabels = __webpack_require__(2)('webgl-surface:Labels');\nvar debugColors = __webpack_require__(2)('webgl-surface:Colors');\n/**\n * This enum names the base methods that are passed into the applyPropsMethods\n * method. This allows subclasses to easily pick the property setting methods they need\n * from the base\n */\nvar BaseApplyPropsMethods;\n(function (BaseApplyPropsMethods) {\n    /** Initializes any context that needs to be set up before the props are set */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"INITIALIZE\"] = 0] = \"INITIALIZE\";\n    /** Moment when any buffer changes should be applied */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"BUFFERCHANGES\"] = 1] = \"BUFFERCHANGES\";\n    /** Initializes camera properties to facilitate smoothe start up */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"CAMERA\"] = 2] = \"CAMERA\";\n    /** Generates the labels as images within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"LABELS\"] = 3] = \"LABELS\";\n    /** Generates the colors within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"COLORS\"] = 4] = \"COLORS\";\n})(BaseApplyPropsMethods = exports.BaseApplyPropsMethods || (exports.BaseApplyPropsMethods = {}));\n/**\n * This enum names the base methods that are passed into the animatedMethods\n * method. This allows subsclasses to easily pick the animated methods they need\n * from the base\n */\nvar BaseAnimatedMethods;\n(function (BaseAnimatedMethods) {\n    /** Sets up the base context needed to execute most methods */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"CONTEXT\"] = 0] = \"CONTEXT\";\n    /** Sets up the inertia method for inertial panning */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"INERTIA\"] = 1] = \"INERTIA\";\n    /** Animates the postion of the camera to a destination */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"POSITION\"] = 2] = \"POSITION\";\n    /** Zooms the camera based on a point of focus */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"ZOOM\"] = 3] = \"ZOOM\";\n})(BaseAnimatedMethods = exports.BaseAnimatedMethods || (exports.BaseAnimatedMethods = {}));\nfunction isAnimatedWithOptions(value) {\n    if (value.options) {\n        return true;\n    }\n    return false;\n}\nfunction isAnimated(value) {\n    if (!value.options) {\n        return true;\n    }\n    return false;\n}\n/** This is the smallest increment the zoom can make. Anything less and nothing will happen */\nvar MIN_ZOOM_INCREMENT = 0.001;\nvar BYTE_MAX = 0xFF;\nvar BACKGROUND_COLOR = new three_1.Color().setRGB(38 / BYTE_MAX, 50 / BYTE_MAX, 78 / BYTE_MAX);\n// --[ CONSTANTS ]-------------------------------------------\n// Make a container vector for performing operations within\nvar vector = new three_1.Vector3();\n// --[ SHADERS ]-------------------------------------------\n/**\n * Equivalent of Math.sign, but faster, and works in all browsers\n *\n * @param {number} value The number to determine the sign\n *\n * @return {number} Returns zero if a sign can not be determined, -1 for a negative, 1 for a positive\n */\nfunction sign(value) {\n    if (!value) {\n        return 0;\n    }\n    if (value > 0) {\n        return 1;\n    }\n    if (value < 0) {\n        return -1;\n    }\n    return 0;\n}\n/**\n * The base component for the communications view\n */\nvar WebGLSurface = (function (_super) {\n    __extends(WebGLSurface, _super);\n    function WebGLSurface() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** This is the atlas manager for managing images and labels rendered as textures */\n        _this.atlasManager = new atlas_manager_1.AtlasManager(2048, 2048);\n        /** Tracks the names of the atlas' generated */\n        _this.atlasNames = {\n            colors: 'colors',\n            labels: 'labels',\n        };\n        /**\n         * List of methods that execute within the animation loop. Makes adding and removing these methods\n         * simpler to manage, as well as gives a clear and optimized way of overriding existing methods\n         * or reordering their execution\n         */\n        _this.animatedMethodList = [];\n        /**\n         * If this is set to true during an animated method's lifecycle, then all subsequent animated methods\n         * will not be executed for the current frame. Upon reaching the end of the frame, the break will reset\n         * and the animated methods will attempt executing again\n         */\n        _this.animatedMethodBreak = false;\n        /**\n         * The camera that 'looks' at our world and gives us the ability to convert\n         * screen coordinates to world coordinates, and vice versa\n         */\n        _this.camera = new three_1.OrthographicCamera(0, 0, 0, 0, 0, 0);\n        /**\n         * While this number is positive it will be decremented every frame.\n         * While positive, mouse interactions will not occur. This utilizes frame ticks\n         * as SOME values and numbers settle per frame, not necessarily within timelapses.\n         * More often than not, there will only be a need for 1-2 frames of mouse disable to\n         * allow the camera to be positioned in a correct location before screen to world projections\n         * start taking place.\n         */\n        _this.disableMouseInteraction = 0;\n        /** Used to aid in mouse interactions */\n        _this.distance = 0;\n        _this.sizeCamera = null;\n        /** Keep track of the current zoom so it can be set in requestAnimationFrame */\n        _this.currentZoom = 1;\n        /** Horizontal destination the camera will pan to */\n        _this.destinationX = 0;\n        /** Vertical position the camera will pan to */\n        _this.destinationY = 0;\n        /** The destination zoom level the camera used during panning */\n        _this.destinationZoom = 1;\n        /** Is the camera currently in a panning state */\n        _this.isPanning = false;\n        /** Last known screen position of the mouse */\n        _this.lastMousePosition = { x: 0, y: 0 };\n        /** List of methods to execute when applying props */\n        _this.propsMethodList = [];\n        /** Inertial values for drag panning */\n        _this.inertia = null;\n        _this.inertiaBuild = 1.5;\n        _this.inertiaDecay = .9;\n        _this.inertiaMax = 100;\n        /**\n         * All data is put into this quad tree so we can query spatial regions for\n         * items\n         */\n        _this.quadTree = null;\n        /**\n         * True if the shift key is currently being held\n         *\n         * Panning is affected by whether or not the shift key is being held down, but\n         * I don't know how yet.\n         */\n        _this.shiftIsDown = false;\n        _this.stop = false;\n        /** The current rendered position and zoom */\n        _this.currentX = 0;\n        _this.currentY = 0;\n        _this.targetZoom = 1;\n        /** The (world) position the focus will zoom in and out of */\n        _this.previousZoomToFit = 0;\n        _this.zoomTargetX = 0;\n        _this.zoomTargetY = 0;\n        /** When this is set, the draw loop continues to run. Used by the draw loop to complete animations */\n        _this.animating = false;\n        _this.labels = [];\n        _this.labelsReady = false;\n        /**\n         * This is the latest labels loading identifier, used to determine if the labels\n         * last loaded matches the labels currently needing to be rendered.\n         */\n        _this.labelsCurrentLoadedId = 0;\n        _this.labelsLoadId = 0;\n        /** When this is set to true, the atlas with the colors is now ready to be referenced */\n        _this.colors = [];\n        _this.colorsReady = false;\n        /** Holds the items currently hovered over */\n        _this.currentHoverItems = [];\n        /** Mouse in stage or not */\n        _this.dragOver = true;\n        /** Flag for detecting whether or not webgl is supported at all */\n        /**\n         * This is the update loop that operates at the requestAnimationFrame speed.\n         * This updates the cameras current position and causes changes over time for\n         * any property that has a start and a destination.\n         */\n        _this.animate = function () {\n            if (_this.stop) {\n                return;\n            }\n            frame_info_1.FrameInfo.lastFrameTime = Date.now();\n            frame_info_1.FrameInfo.framesPlayed.set(_this, (frame_info_1.FrameInfo.framesPlayed.get(_this) || 0) + 1);\n            requestAnimationFrame(function () { return _this.animate(); });\n            var response;\n            var doDraw = false;\n            var didBreak = _this.animatedMethodList.some(function (method) {\n                if (isAnimatedWithOptions(method)) {\n                    if (method.options.labelsReady && method.options.colorsReady) {\n                        if (_this.labelsReady && _this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.labelsReady) {\n                        if (_this.labelsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.colorsReady) {\n                        if (_this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                }\n                else if (isAnimated(method)) {\n                    response = method();\n                }\n                // Update our draw status based on response\n                if (!doDraw) {\n                    doDraw = response.doDraw;\n                }\n                // Stop the system if needed\n                if (response.stop) {\n                    _this.stop = true;\n                }\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            // We prevent any animation loop execution if we did break\n            if (didBreak) {\n                return;\n            }\n            // Make sure all camera related uniforms are up to date\n            _this.updateCameraUniforms();\n            // Handle the deactivation period of mouse interactions by decrementing it\n            // If it's positive\n            if (_this.disableMouseInteraction > 0) {\n                _this.disableMouseInteraction--;\n            }\n            if (doDraw || _this.forceDraw) {\n                _this.forceDraw = false;\n                _this.emitViewport();\n                _this.draw();\n            }\n        };\n        /**\n         * Applies new props injected into this component.\n         *\n         * Applying new props does not entail that a re-render will happen so we\n         * handle application of props as a separate concept. Here we:\n         *\n         * set up zoom targetting and apply quested zoom levels\n         *\n         * Create our quad tree and associate properties to objects if a new dataset\n         * is provided\n         *\n         * Analyze our dataset for interesting and useful metrics such as max and mins\n         * to aid in visualization normalization\n         *\n         * @param {T} props The new properties for this component\n         */\n        _this.applyProps = function (props) {\n            debug('Applying props');\n            var response;\n            _this.propsMethodList.some(function (method) {\n                response = method(props);\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            debugCam('current cam', _this.currentX, _this.currentY, _this.destinationX, _this.destinationY);\n            debugCam('Zoom Target: [%o, %o]', _this.zoomTargetX, _this.zoomTargetY);\n            debugCam('Last Mouse: [%o, %o]', _this.lastMousePosition.x, _this.lastMousePosition.y);\n        };\n        /**\n         * This initializes the surface and calls for sub class classes to initialize\n         * their buffers\n         *\n         * @param {HTMLElement} el The DOM element this component is contained in\n         * @param {number} w The width of the rendering\n         * @param {number} h The height of the rendering\n         */\n        _this.init = function (el, w, h) {\n            if (!el || _this.scene) {\n                return;\n            }\n            _this.renderEl = el;\n            if (w === 0 || h === 0) {\n                return;\n            }\n            debug('Initializing GPU objects el: %o width: %o height: %o', el, w, h);\n            // Set up a ctx for our render space\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2.0,\n                width: w,\n                widthHalf: w / 2.0,\n            };\n            // Set up the camera now that the ctx is set up\n            _this.initCamera();\n            // Create a scene so we can add our buffer objects to it\n            // We also add the scene to the window to make threejs tools available\n            window.scene = _this.scene = new three_1.Scene();\n            // Fire our hook for starting up our specific buffer implementation\n            _this.initBuffers();\n            // FINALIZE SET UP\n            // Generate the renderer along with it's properties\n            _this.renderer = new three_1.WebGLRenderer({\n                alpha: _this.props.backgroundColor && (_this.props.backgroundColor.opacity < 1.0),\n                antialias: true,\n                preserveDrawingBuffer: true,\n            });\n            // This sets the pixel ratio to handle differing pixel densities in screens\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            // Applies the background color and establishes whether or not the context supports\n            // Alpha or not\n            if (_this.props.backgroundColor) {\n                _this.renderer.setClearColor(new three_1.Color(_this.props.backgroundColor.r, _this.props.backgroundColor.g, _this.props.backgroundColor.b), _this.props.backgroundColor.opacity);\n            }\n            else {\n                _this.renderer.setClearColor(BACKGROUND_COLOR);\n            }\n            // We render shapes. We care not for culling.\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            // Set up DOM interaction with the renderer\n            var container = el;\n            container.appendChild(_this.renderer.domElement);\n            // Get the gl context for queries and advanced operations\n            _this.gl = _this.renderer.domElement.getContext('webgl');\n            _this.makeDraggable(document.getElementById('div'), _this);\n        };\n        /**\n         * Initializes the camera and any contexts associated with it\n         */\n        _this.initCamera = function () {\n            debug('Initializing Camera');\n            // INITIALIZE THE CAMERA\n            var h = _this.ctx.height;\n            var viewSize = h;\n            var w = _this.ctx.width;\n            var aspectRatio = w / h;\n            var viewport = {\n                aspectRatio: aspectRatio,\n                bottom: -viewSize / 2,\n                far: 10000000,\n                left: (-aspectRatio * viewSize) / 2,\n                near: -100,\n                right: (aspectRatio * viewSize) / 2,\n                top: viewSize / 2,\n                viewSize: viewSize,\n            };\n            _this.camera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.sizeCamera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.camera.position.z = 300;\n            _this.sizeCamera.position.set(0, 0, 300);\n        };\n        /**\n         * This is executed when our rendering surface (the canvas) changes in size in any\n         * way. It will make sure our renderer matches the context to prevent scaling\n         * and other deformations.\n         */\n        _this.resizeContext = function () {\n            var w = _this.props.width;\n            var h = _this.props.height;\n            // See if a renderer even exists yet\n            if (!_this.renderer) {\n                return false;\n            }\n            var renderSize = _this.renderer.getSize();\n            // Check if the resize is needed\n            if (renderSize.width === w && renderSize.height === h) {\n                return false;\n            }\n            debug('RENDERER RESIZE');\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2,\n                width: w,\n                widthHalf: w / 2,\n            };\n            var zoom = _this.camera.zoom;\n            var position = _this.camera.position.clone();\n            _this.initCamera();\n            _this.camera.zoom = zoom;\n            _this.camera.position.set(position.x, position.y, position.z);\n            _this.camera.updateProjectionMatrix();\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            if (_this.props.backgroundColor) {\n                var color = _this.props.backgroundColor;\n                _this.renderer.setClearColor(new three_1.Color(color.r, color.g, color.b), color.opacity < 1.0 ? color.opacity : undefined);\n            }\n            else {\n                _this.renderer.setClearColor(BACKGROUND_COLOR);\n            }\n            return true;\n        };\n        /**\n         * This method handles emitting the viewport and the current visible elements\n         * to the subclass that needs detailed information regarding the viewport.\n         */\n        _this.emitViewport = function () {\n            var tl = _this.screenToWorld(0, 0);\n            var br = _this.screenToWorld(_this.ctx.width, _this.ctx.height);\n            _this.camera.updateMatrixWorld(true);\n            var visible = _this.quadTree.query(new bounds_1.Bounds(tl.x, br.x, tl.y, br.y));\n            _this.onViewport(visible, _this.projection, _this.ctx);\n        };\n        /**\n         * Handles mouse interactions when the mouse is pressed on the canvas. This\n         * engages panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseDown = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = true;\n            _this.distance = 0;\n            _this.onMouseDown();\n        };\n        /**\n         * Handles mouse interactions when the mouse is release or left the canvas. This\n         * stops panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseOut = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            _this.distance = 0;\n            _this.onMouseOut();\n        };\n        /**\n         * Handles mouse interactions when the mouse is released on the canvas. This\n         * stops panning and engages click events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseUp = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            // Handle mouse interaction\n            if (_this.distance < 5) {\n                var hitInside = [];\n                // Circle Interaction\n                var hitItems = _this.quadTree.query(world);\n                for (var _i = 0, hitItems_1 = hitItems; _i < hitItems_1.length; _i++) {\n                    var item = hitItems_1[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                    }\n                }\n                // Tell the listener that the user clicked on some items\n                if (hitInside.length) {\n                    _this.onMouseUp(e, hitInside, mouse, world, _this.projection);\n                }\n                else {\n                    _this.onMouseUp(e, null, mouse, world, _this.projection);\n                }\n            }\n        };\n        /**\n         * Handles mouse interactions when the mouse is moving on the canvas. This\n         * causes panning and hover events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseMove = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            var onMouse = _this.props.onMouse;\n            var zoom = _this.props.zoom;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            _this.distance++;\n            debug('mouse X %o Y %o', mouse.x, mouse.y);\n            // Handle panning\n            if (_this.isPanning) {\n                debug('down and moving ~~');\n                var xDistance = (mouse.x - _this.lastMousePosition.x) / _this.targetZoom;\n                var yDistance = -(mouse.y - _this.lastMousePosition.y) / _this.targetZoom;\n                // Execute the hook to allow subclasses\n                var pan = _this.willPan(xDistance, yDistance);\n                xDistance = pan.x;\n                yDistance = pan.y;\n                _this.destinationX -= xDistance;\n                _this.destinationY -= yDistance;\n                _this.inertia = _this.inertia || { x: 0, y: 0 };\n                if (sign(xDistance) !== sign(_this.inertia.x)) {\n                    _this.inertia.x = 0;\n                }\n                if (sign(yDistance) !== sign(_this.inertia.y)) {\n                    _this.inertia.y = 0;\n                }\n                _this.inertia.x = xDistance * _this.inertiaBuild;\n                _this.inertia.y = yDistance * _this.inertiaBuild;\n                var maxInertia = _this.inertiaMax / zoom;\n                var mag = Math.sqrt(_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y);\n                // Make sure the magnitude of the inertia is less than our max allowed\n                if (mag > maxInertia) {\n                    // Since it's greater, let's confine the inertia's magnitude to the max magnitude\n                    // By normalizing the intertia vector and multilying it by the max\n                    _this.inertia.x = (_this.inertia.x / mag) * maxInertia;\n                    _this.inertia.y = (_this.inertia.y / mag) * maxInertia;\n                }\n            }\n            if (_this.quadTree && !_this.isPanning) {\n                // Empty the last hovered items to populate a new list\n                var currentHoverItems = [];\n                // Handle mouse interaction with items\n                // Interaction with circles\n                var hitItems = _this.quadTree.query(world);\n                var hitInside = [];\n                for (var _i = 0, hitItems_2 = hitItems; _i < hitItems_2.length; _i++) {\n                    var item = hitItems_2[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                        currentHoverItems.push(item);\n                    }\n                }\n                // Inform of all items hit or hovered\n                _this.onMouseHover(hitInside, mouse, world, _this.projection);\n                // Diff the currently hovered items with the old ones to see what is\n                // No longer hit\n                var left = [];\n                for (var _a = 0, _b = _this.currentHoverItems; _a < _b.length; _a++) {\n                    var item = _b[_a];\n                    if (currentHoverItems.indexOf(item) < 0) {\n                        left.push(item);\n                    }\n                }\n                // Inform of all items no longer hovered\n                _this.onMouseLeave(left, mouse, world, _this.projection);\n                _this.currentHoverItems = currentHoverItems;\n            }\n            if (onMouse) {\n                _this.onMouse(mouse, world, _this.isPanning);\n            }\n            _this.lastMousePosition = mouse;\n        };\n        /**\n         * We make the ref application be a declared function so react does not find the need to execute the\n         * application numerous times for a detected changed method\n         *\n         * @param {HTMLElement} n This is the canvas element from the dom\n         */\n        _this.applyRef = function (n) {\n            _this.init(n, _this.props.width, _this.props.height);\n            _this.applyProps(_this.props);\n        };\n        return _this;\n    }\n    /**\n     * This is a hook so subclasses can contribute animated methods to the animation loop and organize the base methods\n     * as desired.\n     *\n     * @param {AnimatedMethodLookup} baseAnimatedMethods The base animated methods referenceable by name\n     * @param {AnimatedMethod[]} orderedBaseAnimatedMethods The base animated methods in their default order for ease of use\n     *\n     * @return {AnimatedMethods[]} The list of animated methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.animatedMethods = function (baseAnimatedMethods, orderedBaseAnimatedMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBaseAnimatedMethods;\n    };\n    /**\n     * This generates the base animated methods lookup.\n     * We do not make these methods a part of the class as this is the base class\n     * We want the start up methods to be inconsequential to sub classes, thus allowing\n     * us to override, sort, or replace the initial methods and have the method get garbage\n     * collected and no longer a part of the object. It is recommended to make the sub classes\n     * actually point to class methods for better clarity\n     *\n     * @return {ANimatedMethodLookup} The base animated methods in a lookup\n     */\n    WebGLSurface.prototype.animatedMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            // Context changes and early checks\n            _a[BaseAnimatedMethods.CONTEXT] = function () {\n                var response = {\n                    break: false,\n                    doDraw: false,\n                };\n                if (_this.resizeContext()) {\n                    response.doDraw = true;\n                }\n                // Quadtree MUST be present to do proper computations\n                if (!_this.quadTree) {\n                    response.break = true;\n                }\n                return response;\n            },\n            // Apply inertia\n            _a[BaseAnimatedMethods.INERTIA] = function () {\n                if (!_this.isPanning) {\n                    if (_this.inertia) {\n                        // Disabled inertia for now\n                        // This.destinationX -= this.inertia.x\n                        // This.destinationY -= this.inertia.y\n                        _this.inertia.x *= _this.inertiaDecay;\n                        _this.inertia.y *= _this.inertiaDecay;\n                        if (_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y < 1) {\n                            _this.inertia = null;\n                        }\n                    }\n                }\n                // A non response\n                return {\n                    doDraw: false,\n                };\n            },\n            // Apply position\n            _a[BaseAnimatedMethods.POSITION] = function () {\n                // If values are transitioned rather than immediately applied, this is\n                // The value you would want the minimum change to be before cutting off\n                // The transition\n                // Const minAdjust = 1 / this.props.zoom\n                // If there is change in X apply the new position to the old\n                // This is where animated values were originally placed and can be placed\n                // Again if a transition is desired\n                var response = {\n                    doDraw: (_this.currentX !== _this.destinationX) || (_this.currentY !== _this.destinationY),\n                };\n                _this.currentX = _this.destinationX;\n                _this.currentY = _this.destinationY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            // Apply zooming\n            _a[BaseAnimatedMethods.ZOOM] = function () {\n                var response = {\n                    doDraw: false,\n                };\n                // Apply Zoom\n                // Const zoomToFitH = this.ctx.width / Math.max(this.quadTree.bounds.width, this.props.viewport.width);\n                // Const zoomToFitV = this.ctx.height / Math.max(this.quadTree.bounds.height, this.props.viewport.height);\n                // Const zoomToFit = Math.min(zoomToFitH, zoomToFitV);\n                var zoomToFit = 1;\n                var destZoom = _this.destinationZoom * zoomToFit;\n                var dZoom = Math.abs(destZoom - _this.targetZoom);\n                var minDZoom = MIN_ZOOM_INCREMENT;\n                var zoomRate = 3;\n                if (dZoom > minDZoom) {\n                    _this.targetZoom = _this.targetZoom + ((destZoom - _this.targetZoom) / zoomRate);\n                    response.doDraw = true;\n                }\n                else if (dZoom !== 0) {\n                    _this.targetZoom = destZoom;\n                    response.doDraw = true;\n                }\n                // Get the zoom target metrics before zooming\n                var zoomTargetX = _this.zoomTargetX;\n                var zoomTargetY = _this.zoomTargetY;\n                var screenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Update the camera zoom level\n                _this.zoomCamera(_this.targetZoom);\n                // After we have zoomed we see how much our target location moved on screen\n                var newScreenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Now we move our screen by the moved delta to keep it exactly where it was before hand\n                var zoomDX = -(newScreenZoomTarget.x - screenZoomTarget.x) / _this.targetZoom;\n                var zoomDY = (newScreenZoomTarget.y - screenZoomTarget.y) / _this.targetZoom;\n                _this.currentX -= zoomDX;\n                _this.currentY -= zoomDY;\n                _this.destinationX -= zoomDX;\n                _this.destinationY -= zoomDY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for subclasses to be able to apply buffer changes that rely\n     * on colors rendered into the atlas after the system has prepped the colors for render.\n     */\n    WebGLSurface.prototype.applyColorBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * This is a hook for subclasses to be able to apply label buffer changes after the system has\n     * prepped the labels for render.\n     */\n    WebGLSurface.prototype.applyLabelBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * @override\n     * This is a hook so subclasses can contribute property application methods to the applyProps process and organize the base methods\n     * as desired.\n     *\n     * @param {ApplyPropsMethodLookup<T>} basePropsMethods The base props methods referenceable by name\n     * @param {ApplyPropsMethod<T>[]} orderedBasePropsMethods The base animated methods in their default order for ease of use\n     *\n     * @return {ApplyPropsMethod<T>[]} The list of property application methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.applyPropsMethods = function (basePropsMethods, orderedBasePropsMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBasePropsMethods;\n    };\n    /**\n     * This is a hook so subclasses can contribute methods to the applying props procedure and organize the base methods\n     * as desired.\n     *\n     * @return {ApplyPropsMethodLookup<T>} The base apply props method that are indexed for ease of reference\n     */\n    WebGLSurface.prototype.applyPropsMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            _a[BaseApplyPropsMethods.INITIALIZE] = function (props) {\n                var backgroundColor = props.backgroundColor, height = props.height, width = props.width;\n                _this.init(_this.renderEl, width, height);\n                if (!_this.renderEl || width === 0 || height === 0) {\n                    return {\n                        break: true,\n                    };\n                }\n                // Get the target for zooming\n                if (_this.camera) {\n                    var world = _this.screenToWorld(_this.lastMousePosition.x, _this.lastMousePosition.y);\n                    _this.zoomTargetX = world.x;\n                    _this.zoomTargetY = world.y;\n                }\n                if (_this.renderer && backgroundColor) {\n                    var oldColor = _this.props.backgroundColor || {\n                        b: BACKGROUND_COLOR.b,\n                        g: BACKGROUND_COLOR.g,\n                        opacity: 1.0,\n                        r: BACKGROUND_COLOR.r,\n                    };\n                    var same = oldColor.r === backgroundColor.r &&\n                        oldColor.g === backgroundColor.g &&\n                        oldColor.b === backgroundColor.b &&\n                        oldColor.opacity === backgroundColor.opacity;\n                    if (!same) {\n                        _this.renderer.setClearColor(new three_1.Color(backgroundColor.r, backgroundColor.g, backgroundColor.b), \n                        // Only if a transparent background is specified should we\n                        // Allow the parameter. We avoid the parameter to ensure\n                        // Transparent mode it not activated unless absolutely necessary\n                        backgroundColor.opacity < 1 ? backgroundColor.opacity : undefined);\n                    }\n                }\n                debug('props', props);\n                return {};\n            },\n            _a[BaseApplyPropsMethods.LABELS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.labels && props.labels !== _this.labels) {\n                    debugLabels('Labels are being comitted to an Atlas %o', props.labels);\n                    // Flag the labels as incapable of rendering\n                    _this.labelsReady = false;\n                    _this.labelsLoadId++;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.labels = props.labels;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.labels)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.labels);\n                    }\n                    var textures = props.labels.map(function (label) { return new atlas_texture_1.AtlasTexture(null, label); });\n                    debugLabels('Creating the atlas for labels based on these textures %o', textures);\n                    _this.atlasManager.createAtlas(_this.atlasNames.labels, textures)\n                        .then(function () {\n                        debugLabels('Labels rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.labels));\n                        _this.forceDraw = true;\n                        _this.labelsCurrentLoadedId++;\n                        // If we are done loading AND we match up with the current load id, then labels\n                        // For the latest labels update are indeed ready for display\n                        if (_this.labelsCurrentLoadedId === _this.labelsLoadId) {\n                            _this.labelsReady = true;\n                        }\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.COLORS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.colors && props.colors !== _this.colors) {\n                    debugColors('Colors are being comitted to an Atlas %o', props.colors);\n                    // Flag the labels as incapable of rendering\n                    _this.colorsReady = false;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.colors = props.colors;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.colors)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.colors);\n                    }\n                    debugColors('Creating the atlas for colors based on these colors %o', _this.colors);\n                    _this.atlasManager.createAtlas(_this.atlasNames.colors, null, _this.colors)\n                        .then(function () {\n                        debugColors('Colors rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.colors));\n                        _this.forceDraw = true;\n                        _this.colorsReady = true;\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.BUFFERCHANGES] = function (props) {\n                // Call the hook to allow sub componentry to have a place to update it's buffers\n                _this.applyBufferChanges(props);\n                // We call the label buffering when the labels are ready to render.\n                // Labels now utilize the color atlas as well, thus requiring colors\n                // To be loaded\n                if (_this.labelsReady && _this.colorsReady) {\n                    debugLabels('labels changed %o', props);\n                    _this.applyLabelBufferChanges(props);\n                }\n                // For resources that only need the color atlas to be ready\n                if (_this.colorsReady) {\n                    _this.applyColorBufferChanges(props);\n                }\n                return {};\n            },\n            _a[BaseApplyPropsMethods.CAMERA] = function (props) {\n                _this.destinationZoom = props.zoom;\n                // On initialization this should start with some base camera metrics\n                if (props.viewport && props.viewport !== _this.appliedViewport && _this.quadTree) {\n                    debugCam('Applying viewport to camera: %o World Space Bounds: %o Screen context: %o', props.viewport, _this.quadTree.bounds, { width: props.width, height: props.height });\n                    // Position the camera over the mid of the specified viewport\n                    var mid = props.viewport.mid;\n                    _this.currentX = _this.destinationX = mid.x;\n                    _this.currentY = _this.destinationY = mid.y;\n                    // Calculate the zoom level when the input zoom is at 1\n                    var zoomAtOne = 1;\n                    // Calculate the zoom needed for the viewport\n                    var zoomToFitViewH = props.width / props.viewport.width;\n                    var zoomToFitViewV = props.height / props.viewport.height;\n                    var zoomToFit = Math.min(zoomToFitViewH, zoomToFitViewV);\n                    // This adjusts the destination zxoom by a tiny amount so the view will redraw\n                    var microAdjustment = 1.001;\n                    // Make our destination zoom a zoom that will fit the dimensions of the viewport\n                    // Relative to the zoom at one level\n                    _this.destinationZoom = zoomToFit / zoomAtOne;\n                    _this.targetZoom = (_this.destinationZoom * zoomAtOne) * microAdjustment;\n                    // Make sure any zooming that happens occurs over the middle of the initial viewport\n                    _this.zoomTargetX = mid.x;\n                    _this.zoomTargetY = mid.y;\n                    // Make sure mouse position doesn't mess with the zooming focus either\n                    _this.lastMousePosition.x = props.width / 2.0;\n                    _this.lastMousePosition.y = props.height / 2.0;\n                    // Apply the values immediately to the camera\n                    _this.positionCamera(_this.currentX, _this.currentY);\n                    _this.zoomCamera(_this.targetZoom);\n                    _this.updateCameraUniforms();\n                    // We request the calculated zoom level so adjustments on the input can be made\n                    if (props.onZoomRequest) {\n                        props.onZoomRequest(_this.destinationZoom);\n                        debugCam('Requesting zoom level', _this.destinationZoom);\n                    }\n                    // Let's disable mouse interactions for a little bit until the camera has settled into place\n                    var framesToDisable = 10;\n                    _this.disableMouseInteraction = framesToDisable;\n                    _this.appliedViewport = props.viewport;\n                    debugCam('init cam', _this.currentX, _this.currentY);\n                }\n                // Ensure we have our quad tree available even if it is empty\n                if (!_this.quadTree) {\n                    _this.quadTree = new quad_tree_1.QuadTree(0, 1, 1, 0);\n                }\n                return {};\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for sub components to have a location to update their buffers\n     *\n     * @param {T} props This is the next set of props that are going to be applied to this component\n     */\n    WebGLSurface.prototype.applyBufferChanges = function (props) {\n        // NOTE: This will be implemented by base classes\n    };\n    /**\n     * @override\n     * Start the update loop and register any interesting listeners\n     */\n    WebGLSurface.prototype.componentDidMount = function () {\n        this.animate();\n    };\n    /**\n     * @override\n     * This will set up any unchanging context as well as establish the set of methods\n     * that are to be used within constructed method loops.\n     */\n    WebGLSurface.prototype.componentWillMount = function () {\n        /** Create our context bound projection methods for handing to processes that may need them */\n        this.projection = {\n            screenSizeToWorld: this.screenSizeToWorld.bind(this),\n            screenToWorld: this.screenToWorld.bind(this),\n            worldSizeToScreen: this.worldSizeToScreen.bind(this),\n            worldToScreen: this.worldToScreen.bind(this),\n        };\n        /** Generate our applying props methods to execute within our applyProps process */\n        var basePropsMethods = this.applyPropsMethodsBase();\n        this.propsMethodList = this.applyPropsMethods(basePropsMethods, [\n            basePropsMethods[BaseApplyPropsMethods.INITIALIZE],\n            basePropsMethods[BaseApplyPropsMethods.LABELS],\n            basePropsMethods[BaseApplyPropsMethods.COLORS],\n            basePropsMethods[BaseApplyPropsMethods.BUFFERCHANGES],\n            basePropsMethods[BaseApplyPropsMethods.CAMERA],\n        ]);\n        /** Generate our animated methods to execute within our animation loop */\n        var baseAnimatedMethods = this.animatedMethodsBase();\n        this.animatedMethodList = this.animatedMethods(baseAnimatedMethods, [\n            baseAnimatedMethods[BaseAnimatedMethods.CONTEXT],\n            baseAnimatedMethods[BaseAnimatedMethods.INERTIA],\n            baseAnimatedMethods[BaseAnimatedMethods.POSITION],\n            baseAnimatedMethods[BaseAnimatedMethods.ZOOM],\n        ]);\n    };\n    /**\n     * @override\n     * Simply applies the new injected props\n     *\n     * @param {T} props The new properties to be applied to this component\n     */\n    WebGLSurface.prototype.componentWillReceiveProps = function (props) {\n        this.applyProps(props);\n    };\n    /**\n     * @override\n     * Release listeners and stop update loop\n     */\n    WebGLSurface.prototype.componentWillUnmount = function () {\n        this.stop = true;\n        if (this.quadTree) {\n            this.quadTree.destroy();\n        }\n        this.quadTree = null;\n        this.camera = null;\n        this.sizeCamera = null;\n        this.ctx = null;\n        this.renderEl = null;\n        this.renderer = null;\n        this.scene = null;\n        this.atlasManager.destroyAtlas(this.atlasNames.colors);\n        this.atlasManager.destroyAtlas(this.atlasNames.labels);\n        frame_info_1.FrameInfo.framesPlayed.delete(this);\n    };\n    /**\n     * This is the draw method executed from the animation loop. Everytime, this is\n     * called, the webgl surface will be redrawn.\n     */\n    WebGLSurface.prototype.draw = function () {\n        // Draw the 3D scene\n        this.renderer.render(this.scene, this.camera);\n        if (this.props.onRender && (this.colorsReady || this.colors.length === 0)\n            && (this.labelsReady || this.labels.length === 0)) {\n            var imageData = this.renderer.domElement.toDataURL();\n            this.props.onRender(imageData);\n        }\n    };\n    /**\n     * This is a hook allowing sub classes to have a place to initialize their buffers\n     * and materials etc.\n     */\n    WebGLSurface.prototype.initBuffers = function () {\n        // NOTE: This is to be implemented by subclasses\n    };\n    /**\n     * Hook for subclasses to when the mouse moves. Provides some information\n     * about mouse location and interaction.\n     *\n     * @param {IPoint} mouse Position of the mouse relative to the canvas\n     * @param {IPoint} world Position of the mouse relative to the world space\n     * @param {boolean} isPanning The panning state of the mouse\n     */\n    WebGLSurface.prototype.onMouse = function (mouse, world, isPanning) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse down events\n     */\n    WebGLSurface.prototype.onMouseDown = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse out events\n     */\n    WebGLSurface.prototype.onMouseOut = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse up events and the items that were interacted with in the process\n     *\n     * @param {React.MouseEvent} e The react synthetic event associated with the action\n     * @param {Bounds[]} hitInside The items the mouse interacted with\n     * @param {IPoint} mouse The location of the mouse on the screen\n     * @param {IPoint} world The location of the mouse projected into the world\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseUp = function (e, hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse hovering over an item included in the quadtree\n     *\n     * @param {Bounds[]} hitInside The items hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseHover = function (hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse leaving an item included in the quadtree\n     *\n     * @param {Bounds[]} left The items no longer hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseLeave = function (left, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to changes in the viewport and currently visible items\n     *\n     * @param {Bounds[]} visible\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     * @param {IScreenContext} ctx\n     */\n    WebGLSurface.prototype.onViewport = function (visible, projection, ctx) {\n        // NOTE: For subclasses\n    };\n    WebGLSurface.prototype.makeDraggable = function (element, stage) {\n        element.onmousedown = function (event) {\n            debug('DRAG~');\n            stage.dragOver = false;\n            document.onmousemove = function (event) {\n                debug('Move');\n                var mouseX = event.clientX;\n                var mouseY = event.clientY + window.scrollY;\n                var distanceX = (mouseX - stage.lastMousePosition.x) / stage.targetZoom;\n                var distanceY = (mouseY - stage.lastMousePosition.y) / stage.targetZoom;\n                stage.destinationX -= distanceX;\n                stage.destinationY += distanceY;\n                stage.lastMousePosition.x = mouseX;\n                stage.lastMousePosition.y = mouseY;\n            };\n            document.onmouseup = function () {\n                debug('Up');\n                document.onmousemove = null;\n                stage.isPanning = false;\n                stage.dragOver = true;\n            };\n            document.onmouseover = function () {\n                debug('Over');\n                if (stage.dragOver === false)\n                    stage.isPanning = true;\n            };\n            element.onmouseup = function () {\n                stage.dragOver = true;\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () { return false; };\n        };\n    };\n    /**\n     * Places the camera at a given location in world space\n     *\n     * @param {number} x The x-coordinate for the camera in world space\n     * @param {number} y The x-coordinate for the camera in world space\n     */\n    WebGLSurface.prototype.positionCamera = function (x, y) {\n        if (this.camera) {\n            this.camera.position.set(x, y, this.camera.position.z);\n        }\n    };\n    /**\n     * Projects a screen coordinate to a world coordinate\n     *\n     * @param {number} x The x coord within the screen to project into the world\n     * @param {number} y The y coord within the screen to project into the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenToWorld = function (x, y, obj) {\n        // Get the coordinates in normalized screen space\n        vector.set((x / this.ctx.width) * 2 - 1, -(y / this.ctx.height) * 2 + 1, 0.0);\n        // Unproject the normalized space to the world. It will project\n        // The vector to a REALLY far away z coordinate, but it does not matter\n        // Since we are utilizing an orthographic camera (no perspective distortion)\n        vector.unproject(this.camera);\n        obj = obj || { x: 0, y: 0 };\n        obj.x = vector.x;\n        obj.y = vector.y;\n        return obj;\n    };\n    /**\n     * Projects a size on the screen to the size represented in the world\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenSizeToWorld = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        obj.height = h / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        return obj;\n    };\n    /**\n     * Projects a world coordinate to the screen\n     *\n     * @param {number} x The x coord in the world to project to the screen\n     * @param {number} y The y coord in the world to project to the screen\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {IPoint} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldToScreen = function (x, y, obj) {\n        // This projects to NORMALIZED screen space (-1, 1) range for x and y\n        vector.set(x, y, 0);\n        vector.project(this.camera);\n        // Use the window dimensions to denormalize the vector\n        obj = ramda_1.merge(obj || {}, {\n            x: (vector.x * this.ctx.widthHalf) + this.ctx.widthHalf,\n            y: -(vector.y * this.ctx.heightHalf) + this.ctx.heightHalf,\n        });\n        return obj;\n    };\n    /**\n     * Projects a size within the world to how it would appear on the screen\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldSizeToScreen = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w * this.sizeCamera.zoom;\n        obj.height = h * this.sizeCamera.zoom;\n        return obj;\n    };\n    /**\n     * Sets the zoom level the camera will view the world with\n     *\n     * @param {number} zoom The zoom level. Must be > 0\n     */\n    WebGLSurface.prototype.zoomCamera = function (zoom) {\n        this.camera.zoom = zoom;\n        this.sizeCamera.zoom = zoom;\n        this.camera.updateProjectionMatrix();\n        this.sizeCamera.updateProjectionMatrix();\n    };\n    /**\n     * This is a hook allowing a sub class to update uniforms when the camera is changed in\n     * any way\n     */\n    WebGLSurface.prototype.updateCameraUniforms = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * @override\n     * Only re-render if the dimensions of the component have changed. All other\n     * internal render updates are handled internally\n     *\n     * @param {T} nextProps The next properties injected\n     */\n    WebGLSurface.prototype.shouldComponentUpdate = function (nextProps) {\n        return this.props.width !== nextProps.width || this.props.height !== nextProps.height;\n    };\n    /**\n     * Hook to allow subclasses some control over panning distances\n     *\n     * @param {number} distanceX The distance to pan in the x direction\n     * @param {number} distanceY The distance to pan in the y direction\n     *\n     * @return {Vector3} The vector indicating the direction to pan\n     */\n    WebGLSurface.prototype.willPan = function (distanceX, distanceY) {\n        return new three_1.Vector3(distanceX, distanceY, 0.0);\n    };\n    // -----[ Render ]---------------------------------------------\n    //\n    // In a React app, it's nice to put the render function at the bottom of the\n    // File\n    /**\n     * This should only attempt rendering when the canvas DOM element needs to be resized.\n     * You will note shouldComponentUpdate helps facilitate this.\n     */\n    WebGLSurface.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, width = _a.width, height = _a.height;\n        if (!webgl_stat_1.WebGLStat.WEBGL_SUPPORTED) {\n            return React.createElement(\"div\", null, this.props.children || 'Web GL not supported');\n        }\n        return (React.createElement(\"div\", { id: \"div\", onMouseDown: this.handleMouseDown, onMouseOut: this.handleMouseOut, onMouseUp: this.handleMouseUp, onMouseLeave: this.handleMouseOut, onMouseMove: this.handleMouseMove, onDoubleClick: function (e) {\n                if (_this.props.onDoubleClick) {\n                    _this.props.onDoubleClick(e);\n                }\n            }, style: { position: 'relative', width: width, height: height } },\n            React.createElement(\"div\", { ref: this.applyRef })));\n    };\n    return WebGLSurface;\n}(React.Component));\nexports.WebGLSurface = WebGLSurface;\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_28__;\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_29__;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(32);\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_33__;\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(35));\n__export(__webpack_require__(36));\n__export(__webpack_require__(4));\n__export(__webpack_require__(37));\n__export(__webpack_require__(38));\n__export(__webpack_require__(39));\n__export(__webpack_require__(40));\n__export(__webpack_require__(41));\n__export(__webpack_require__(42));\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBufferAnts = (function (_super) {\n    __extends(SharedControlCurvedLineBufferAnts, _super);\n    function SharedControlCurvedLineBufferAnts() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBufferAnts.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'marching',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBufferAnts.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var marchingAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        var antLength;\n        var antGap;\n        var antSpeed;\n        var controlPoint;\n        var controlRef;\n        // We can not accurately send very large numbers via float point into the attributes\n        // So we trim down our time sent to the attribute down to a number that is less than\n        // 16,777,217 which means we can only reliably grab the last 7 digits of the date's time\n        var antStartTime = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            // We will not render the curved line with this buffer if the marching ants are not provided\n            if (!curvedLine.marchingAnts) {\n                console.error('Attempted to render a curved line shape with a marching ant buffer but provided no marching ant metrics. This curved line shape will be skipped', curvedLine);\n                return \"continue\";\n            }\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            antGap = curvedLine.marchingAnts.gapLength;\n            antSpeed = curvedLine.marchingAnts.speed;\n            antLength = curvedLine.marchingAnts.strokeLength + curvedLine.marchingAnts.gapLength;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos, marching, mpos, controlPick, cpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[cpos] = controlRef;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                marching[mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++cpos] = controlRef;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBufferAnts;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBufferAnts = SharedControlCurvedLineBufferAnts;\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineColorsBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineColorsBuffer, _super);\n    function SharedControlCurvedLineColorsBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'colorPicks',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'timing',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var uniforms;\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var timingAttributeSize = 2;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorStartStop;\n        var colorEnd;\n        var colorEndStop;\n        var alpha;\n        var startTime;\n        var duration;\n        var controlRef;\n        var controlPoint;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorEnd = curvedLine.endColor.base.colorIndex;\n            colorEndStop = curvedLine.endColorStop.base.colorIndex;\n            colorStart = curvedLine.startColor.base.colorIndex;\n            colorStartStop = curvedLine.startColorStop.base.colorIndex;\n            duration = curvedLine.duration;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.currentStart;\n            p2 = curvedLine.currentEnd;\n            startTime = curvedLine.startTime;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colorPicks, cpos, controlPick, ctpos, timing, tpos, normals, npos, endPoints, epos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                controlPick[ctpos] = controlRef;\n                cpos += colorAttributeSize;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[wpos] = halfWidthSize;\n                normals[npos] = 1;\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                tpos += timingAttributeSize;\n                // TR\n                colorPicks[cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[tpos] = startTime;\n                timing[++tpos] = duration;\n                // BR\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // TL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // BL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++ctpos] = controlRef;\n            }, \n            // We force updates for this buffer since it has animated properties\n            // Such as currentStartStop and currentEndStop which calculates\n            // Animations on the CPU side.\n            true);\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineColorsBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineColorsBuffer = SharedControlCurvedLineColorsBuffer;\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineBuffer, _super);\n    function SharedControlCurvedLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBuffer.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        var controlPoint;\n        var controlRef;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos, controlPick, cpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[cpos] = controlRef;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++cpos] = controlRef;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBuffer = SharedControlCurvedLineBuffer;\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This ONLY supports a single color\n */\nvar SimpleStaticBezierLineBuffer = (function (_super) {\n    __extends(SimpleStaticBezierLineBuffer, _super);\n    function SimpleStaticBezierLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticBezierLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0, 0],\n                name: 'controlPoint',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticBezierLineBuffer.prototype.update = function (shapeBuffer) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var color;\n        var alpha;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            color = curvedLine.startColor.base.color;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colors, cpos, normals, npos, endPoints, epos, controlPoints, copos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                cpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticBezierLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticBezierLineBuffer = SimpleStaticBezierLineBuffer;\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\nvar SimpleStaticCircleBuffer = (function (_super) {\n    __extends(SimpleStaticCircleBuffer, _super);\n    function SimpleStaticCircleBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticCircleBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'radius',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'colorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 1;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Points(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticCircleBuffer.prototype.update = function (shapeBuffer, atlasManager, camera) {\n        if (!shapeBuffer || shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        if (atlasManager) {\n            var colorRef = shapeBuffer[0].outerColor;\n            var colorBase = colorRef.base;\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            atlas.needsUpdate = true;\n            if (camera) {\n                uniforms.zoom.value = camera.zoom;\n            }\n        }\n        var needsUpdate = false;\n        var circle;\n        needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this.bufferItems, 1, shapeBuffer.length, function (i, positions, ppos, radius, rpos, color, cpos) {\n            circle = shapeBuffer[i];\n            // These are point sprites, so just update a single vertex\n            positions[ppos] = circle._centerX;\n            positions[++ppos] = circle._centerY;\n            positions[++ppos] = circle.depth;\n            radius[rpos] = circle._radius;\n            color[cpos] = circle.outerColor.base.colorIndex;\n        });\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, shapeBuffer.length);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticCircleBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticCircleBuffer = SimpleStaticCircleBuffer;\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = __webpack_require__(7);\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\nfunction isCluster(value) {\n    if (Array.isArray(value[0]))\n        return true;\n    return false;\n}\nvar SimpleStaticLabelBuffer = (function (_super) {\n    __extends(SimpleStaticLabelBuffer, _super);\n    function SimpleStaticLabelBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLabelBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 1],\n                name: 'texCoord',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'size',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0, 0],\n                name: 'anchor',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLabelBuffer.prototype.update = function (shapeBuffer, atlasManager, startFade, endFade, labelMaxSize) {\n        if (!shapeBuffer || shapeBuffer.length <= 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        var buffer;\n        if (isCluster(shapeBuffer)) {\n            buffer = ramda_1.flatten(shapeBuffer);\n        }\n        else {\n            buffer = shapeBuffer;\n        }\n        // Make some constants and props for our buffer update loop\n        var numVerticesPerQuad = 6;\n        var label;\n        var texture;\n        var color;\n        var alpha;\n        var anchor;\n        var labelSize;\n        if (atlasManager) {\n            var colorRef = buffer[0].color;\n            var colorBase = colorRef.base;\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            if (uniforms.colorAtlas.value !== atlas) {\n                uniforms.colorAtlas.value = atlas;\n                uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n                uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n                uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n                atlas.needsUpdate = true;\n            }\n            if (startFade || endFade || labelMaxSize) {\n                material = this.bufferItems.system.material;\n                uniforms = material.uniforms;\n                uniforms.startFade.value = startFade || 0;\n                uniforms.endFade.value = endFade || 0;\n                uniforms.maxLabelSize.value = labelMaxSize || 0;\n            }\n        }\n        var updated = buffer_util_1.BufferUtil.updateBuffer(buffer, this.bufferItems, numVerticesPerQuad, buffer.length, function (i, positions, ppos, colors, cpos, texCoords, tpos, sizes, spos, anchors, apos) {\n            label = buffer[i];\n            texture = label.rasterizedLabel;\n            color = label.color.base;\n            alpha = label.color.base.opacity;\n            anchor = {\n                x: label.getLocation().x + label.getSize().width * Math.cos(label.getRotation()),\n                y: label.getLocation().y + label.getSize().width * Math.sin(label.getRotation()),\n            };\n            labelSize = label.getSize();\n            // Make sure the label is updated with it's latest metrics\n            label.update();\n            // Copy first vertex twice for intro degenerate tri\n            positions[ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            texCoords[tpos] = texture.atlasTR.x;\n            texCoords[++tpos] = texture.atlasTR.y;\n            texCoords[++tpos] = alpha;\n            colors[cpos] = color.colorIndex;\n            sizes[spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // TR\n            positions[++ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasTR.x;\n            texCoords[++tpos] = texture.atlasTR.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BR\n            positions[++ppos] = label.BR.x;\n            positions[++ppos] = label.BR.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBR.x;\n            texCoords[++tpos] = texture.atlasBR.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // TL\n            positions[++ppos] = label.TL.x;\n            positions[++ppos] = label.TL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasTL.x;\n            texCoords[++tpos] = texture.atlasTL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BL\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBL.x;\n            texCoords[++tpos] = texture.atlasBL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // Copy last vertex again for degenerate tri\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBL.x;\n            texCoords[++tpos] = texture.atlasBL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n        });\n        this.bufferItems.geometry.setDrawRange(0, numVerticesPerQuad * buffer.length);\n        // Since we have the ability to flatten the shape buffer (thus causing a new array point to\n        // Come into existance) we must explicitly ensure the current data is set to the actual\n        // Shape buffer that came in. This makes clusters only efficient if using a multibuffer cache\n        if (isCluster(shapeBuffer)) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        return updated;\n    };\n    return SimpleStaticLabelBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLabelBuffer = SimpleStaticLabelBuffer;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\nvar SimpleStaticLineBuffer = (function (_super) {\n    __extends(SimpleStaticLineBuffer, _super);\n    function SimpleStaticLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLineBuffer.prototype.update = function (shapeBuffer) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        var needsUpdate = false;\n        var numVerticesPerSegment = 6;\n        var colorAttributeSize = 4;\n        var stripPos = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var TR;\n        var BR;\n        var TL;\n        var BL;\n        var color;\n        var alpha;\n        var _loop_1 = function (curvedLine) {\n            var strip = curvedLine.getTriangleStrip();\n            color = curvedLine.startColor.base.color;\n            alpha = curvedLine.startColor.base.opacity;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, strip.length / 4, function (i, positions, ppos, colors, cpos) {\n                stripPos = i * 4;\n                TR = strip[stripPos];\n                BR = strip[stripPos + 1];\n                TL = strip[stripPos + 2];\n                BL = strip[stripPos + 3];\n                // 1\n                positions[ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n                // 2\n                positions[++ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 3\n                positions[++ppos] = BR.x;\n                positions[++ppos] = BR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 4\n                positions[++ppos] = TL.x;\n                positions[++ppos] = TL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 5\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 6\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n            });\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLineBuffer = SimpleStaticLineBuffer;\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = __webpack_require__(7);\nvar three_1 = __webpack_require__(0);\nvar point_1 = __webpack_require__(5);\nvar buffer_util_1 = __webpack_require__(3);\nvar base_buffer_1 = __webpack_require__(4);\nfunction isCluster(value) {\n    if (Array.isArray(value[0]))\n        return true;\n    return false;\n}\nvar SimpleStaticStraightLineBuffer = (function (_super) {\n    __extends(SimpleStaticStraightLineBuffer, _super);\n    function SimpleStaticStraightLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticStraightLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'colorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticStraightLineBuffer.prototype.update = function (shapeBuffer, atlasManager) {\n        if (!shapeBuffer || shapeBuffer.length <= 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        var buffer;\n        if (isCluster(shapeBuffer)) {\n            buffer = ramda_1.flatten(shapeBuffer);\n        }\n        else {\n            buffer = shapeBuffer;\n        }\n        if (atlasManager) {\n            var colorRef = buffer[0].startColor;\n            var colorBase = colorRef.base;\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            atlas.needsUpdate = true;\n        }\n        var needsUpdate = false;\n        var numVerticesPerSegment = 6;\n        var TR = point_1.Point.zero();\n        var BR = point_1.Point.zero();\n        var TL = point_1.Point.zero();\n        var BL = point_1.Point.zero();\n        var startColor = 0;\n        var endColor = 0;\n        var line;\n        needsUpdate = buffer_util_1.BufferUtil.updateBuffer(buffer, this.bufferItems, numVerticesPerSegment, buffer.length, function (i, positions, ppos, color, cpos) {\n            line = buffer[i];\n            startColor = line.startColor.base.colorIndex;\n            endColor = line.endColor.base.colorIndex;\n            point_1.Point.add(line.p2, point_1.Point.scale(line.perpendicular, -line.thickness / 2.0), TR);\n            point_1.Point.add(line.p2, point_1.Point.scale(line.perpendicular, line.thickness / 2.0), BR);\n            point_1.Point.add(line.p1, point_1.Point.scale(line.perpendicular, -line.thickness / 2.0), TL);\n            point_1.Point.add(line.p1, point_1.Point.scale(line.perpendicular, line.thickness / 2.0), BL);\n            // 1\n            positions[ppos] = TR.x;\n            positions[++ppos] = TR.y;\n            positions[++ppos] = line.depth;\n            cpos += 1.0;\n            // 2\n            positions[++ppos] = TR.x;\n            positions[++ppos] = TR.y;\n            positions[++ppos] = line.depth;\n            color[cpos] = endColor;\n            // 3\n            positions[++ppos] = BR.x;\n            positions[++ppos] = BR.y;\n            positions[++ppos] = line.depth;\n            color[++cpos] = endColor;\n            // 4\n            positions[++ppos] = TL.x;\n            positions[++ppos] = TL.y;\n            positions[++ppos] = line.depth;\n            color[++cpos] = startColor;\n            // 5\n            positions[++ppos] = BL.x;\n            positions[++ppos] = BL.y;\n            positions[++ppos] = line.depth;\n            color[++cpos] = startColor;\n            // 6\n            positions[++ppos] = BL.x;\n            positions[++ppos] = BL.y;\n            positions[++ppos] = line.depth;\n        });\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n            // Since we have the ability to flatten the shape buffer (thus causing a new array point to\n            // Come into existance) we must explicitly ensure the current data is set to the actual\n            // Shape buffer that came in. This makes clusters only efficient if using a multibuffer cache\n            if (isCluster(shapeBuffer)) {\n                this.bufferItems.currentData = shapeBuffer;\n            }\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticStraightLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticStraightLineBuffer = SimpleStaticStraightLineBuffer;\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(44));\n__export(__webpack_require__(45));\n__export(__webpack_require__(46));\n__export(__webpack_require__(20));\n__export(__webpack_require__(47));\n__export(__webpack_require__(48));\n__export(__webpack_require__(14));\n__export(__webpack_require__(23));\n__export(__webpack_require__(49));\n__export(__webpack_require__(50));\n__export(__webpack_require__(12));\n__export(__webpack_require__(8));\n__export(__webpack_require__(16));\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines a reference to a color that has been rendered to a texture\n * (See AtlasColor). This exposes the only properties that MAY be utilized\n * in a shader to modify the existing values without altering what is rendered\n * on the texture.\n */\nvar ReferenceColor = (function () {\n    /**\n     * Creates an instance of ReferenceColor.\n     *\n     * @param {AtlasColor} base The color to be based off of\n     */\n    function ReferenceColor(base) {\n        this.base = base;\n    }\n    return ReferenceColor;\n}());\nexports.ReferenceColor = ReferenceColor;\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\nvar easing_1 = __webpack_require__(10);\nvar frame_info_1 = __webpack_require__(9);\nvar interpolation_1 = __webpack_require__(11);\nvar curved_line_shape_1 = __webpack_require__(20);\n/**\n * This represents curved lines and what it would take to animate various properties.\n * While this provides helpers to aid in animating the properties, it is up to\n * buffers, shaders and materials to render those changes appropriately.\n */\nvar AnimatedCurvedLineShape = (function (_super) {\n    __extends(AnimatedCurvedLineShape, _super);\n    function AnimatedCurvedLineShape(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This defines the suggested easing for the animation for any of\n         * the values.\n         */\n        _this.easing = easing_1.linear;\n        _this._startColorChange = new three_1.Color(0, 0, 0);\n        _this._endColorChange = new three_1.Color(0, 0, 0);\n        /** The starting end point's destination */\n        _this.startStop = { x: 0, y: 0 };\n        _this.endStop = { x: 0, y: 0 };\n        /**\n         * This calculates the current start color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentStartColor = new three_1.Color(0, 0, 0);\n        /**\n         * This calculates the current end color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentEndColor = new three_1.Color(0, 0, 0);\n        if (options) {\n            _this.startStop = options.startStop || { x: 0, y: 0 };\n            _this.endStop = options.endStop || { x: 0, y: 0 };\n            if (options.startColorStop) {\n                _this.startColorStop = options.startColorStop;\n            }\n            if (options.endColorStop) {\n                _this.endColorStop = options.endColorStop;\n            }\n        }\n        return _this;\n    }\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"startColorStop\", {\n        get: function () {\n            return this._startColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._startColorStop = value;\n            this._startColorChange.r = newBase.r - startBase.r;\n            this._startColorChange.g = newBase.g - startBase.g;\n            this._startColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"endColorStop\", {\n        get: function () {\n            return this._endColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._endColorStop = value;\n            this._endColorChange.r = newBase.r - startBase.r;\n            this._endColorChange.g = newBase.g - startBase.g;\n            this._endColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStartColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var startBase = this.startColor.base.color;\n            this._currentStartColor.r = this.easing(time, startBase.r, this._startColorChange.r, this.duration);\n            this._currentStartColor.g = this.easing(time, startBase.g, this._startColorChange.g, this.duration);\n            this._currentStartColor.b = this.easing(time, startBase.b, this._startColorChange.b, this.duration);\n            return this._currentStartColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEndColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var endBase = this.endColor.base.color;\n            this._currentEndColor.r = this.easing(time, endBase.r, this._endColorChange.r, this.duration);\n            this._currentEndColor.g = this.easing(time, endBase.g, this._endColorChange.g, this.duration);\n            this._currentEndColor.b = this.easing(time, endBase.b, this._endColorChange.b, this.duration);\n            return this._currentEndColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStart\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            var newStart = interpolation_1.circular(easedTime, this.start, this.startStop, this.controlPoints[1]);\n            return newStart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEnd\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            // Apply the circular interpolation to the points\n            return interpolation_1.circular(easedTime, this.end, this.endStop, this.controlPoints[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimatedCurvedLineShape;\n}(curved_line_shape_1.CurvedLineShape));\nexports.AnimatedCurvedLineShape = AnimatedCurvedLineShape;\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar circle_1 = __webpack_require__(22);\n/**\n * Defines a circular shape that can be drawn\n */\nvar CircleShape = (function (_super) {\n    __extends(CircleShape, _super);\n    /**\n     * Sets the properties of the shape to be drawn\n     *\n     * @param {ICircleShapeOptions} options The options for the shape\n     */\n    function CircleShape(options) {\n        var _this = _super.call(this, options) || this;\n        _this.depth = options.depth || 0;\n        _this.innerColor = options.innerColor;\n        _this.innerRadius = options.innerRadius;\n        _this.outerColor = options.outerColor;\n        return _this;\n    }\n    /**\n     * Clones this instance of the circle shape and creates a new instance of a circle shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this circleshape\n     */\n    CircleShape.prototype.clone = function (newProperties) {\n        var instance = new CircleShape(this);\n        instance.d = this.d;\n        return instance;\n    };\n    return CircleShape;\n}(circle_1.Circle));\nexports.CircleShape = CircleShape;\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar line_1 = __webpack_require__(6);\nvar line_shape_1 = __webpack_require__(23);\n/**\n * This defines an edge that can be drawn.\n * This type of edge is a quad with distorted ends. The quad will represent a\n * line with each end having potentially different sizes thus giving a four sided\n * polygon rather than a parallelogram.\n *\n * The edge shape also doubles up as a simple line shape should it be desired to\n * render differently.\n */\nvar EdgeShape = (function (_super) {\n    __extends(EdgeShape, _super);\n    /**\n     * Constructor with basic parameters to declare an edge\n     *\n     * @param p1 The point the edge begins at\n     * @param p2 The point the edge terminates at\n     * @param d The data associated with the edge\n     * @param p1Col The color at the start point\n     * @param p2Col The color at the end point\n     * @param p1Width The width at the start point. Example: if you specify 4, then\n     *                the start part of the edge will fan out 2 on either side of the\n     *                start point\n     * @param p2Width The width at the end point. Example: if you specify 4, then\n     *                the end part of the edge will fan out 2 on either side of the\n     *                end point\n     */\n    function EdgeShape(options) {\n        var _this = \n        // Set up all of our line shape based metrics\n        _super.call(this, Object.assign(options, {\n            thickness: options.startWidth,\n        })) || this;\n        /** Top left of the quad to generate this edge */\n        _this.tl = { x: 0, y: 0 };\n        /** Bottom left of the quad to generate this edge */\n        _this.bl = { x: 0, y: 0 };\n        /** Top right of the quad to generate this edge */\n        _this.tr = { x: 0, y: 0 };\n        /** Bottom Right of the quad to generate this edge */\n        _this.br = { x: 0, y: 0 };\n        /** The width of the edge at the termination point */\n        _this.endWidth = 1;\n        _this.endWidth = options.endWidth || 1.0;\n        _this.setPoints(options.p1, options.p2);\n        return _this;\n    }\n    /**\n     * Clones this instance of the edge shape and creates a new instance of an edge shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {EdgeShape} A newly cloned instance of this edgeshape\n     */\n    EdgeShape.prototype.clone = function (newProperties) {\n        return Object.assign(new EdgeShape(Object.assign(this, {\n            startWidth: this.thickness,\n        })), newProperties);\n    };\n    /**\n     * Algorithm provided by\n     * https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n     * Adapted to Javascript by Chris @ VoidRay co\n     *\n     * Remember the point must be in the same\n     * coordinate system that the edge is using\n     *\n     * @param {number} point The point to test\n     *\n     * @return {boolean} True if the point is inside the edge\n     */\n    EdgeShape.prototype.pointInside = function (point) {\n        var testx = point.x;\n        var testy = point.y;\n        // This is an algortihm to handle any number of points for a polygon. In this\n        // Case our polygon is simply the points that make this fat edge. Note:\n        // The points MUST be in CW order\n        var points = [this.tl, this.tr, this.br, this.bl];\n        var numberVertices = points.length;\n        var isClockwise = false;\n        for (var i = 0, j = numberVertices - 1; i < numberVertices; j = i++) {\n            if (((points[i].y > testy) !== (points[j].y > testy)) &&\n                (testx < (points[j].x - points[i].x) * (testy - points[i].y) /\n                    (points[j].y - points[i].y) + points[i].x)) {\n                isClockwise = !isClockwise;\n            }\n        }\n        return isClockwise;\n    };\n    /**\n     * @override\n     * This sets the two endpoints for this edge and recalculates the bounds\n     * of the edge accordingly.\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    EdgeShape.prototype.setPoints = function (p1, p2) {\n        _super.prototype.setPoints.call(this, p1, p2);\n        if (this.tl) {\n            // Get the distance from the points we will go based on specified widths\n            var p1Dx = this.thickness / 2;\n            var p2Dx = this.endWidth / 2;\n            // Calculate the deltas to get from point to quad edge\n            var p1DeltaX = this.perpendicular.x * p1Dx;\n            var p1DeltaY = this.perpendicular.y * p1Dx;\n            var p2DeltaX = this.perpendicular.x * p2Dx;\n            var p2DeltaY = this.perpendicular.y * p2Dx;\n            // Apply the metrics to our quad points\n            // Start side of the edge\n            this.tl.x = this.p1.x + p1DeltaX;\n            this.tl.y = this.p1.y + p1DeltaY;\n            this.bl.x = this.p1.x - p1DeltaX;\n            this.bl.y = this.p1.y - p1DeltaY;\n            // End side of the edge\n            this.tr.x = this.p2.x + p2DeltaX;\n            this.tr.y = this.p2.y + p2DeltaY;\n            this.br.x = this.p2.x - p2DeltaX;\n            this.br.y = this.p2.y - p2DeltaY;\n            // Create lines for the edges for computations and faster hit detections\n            this.topEdge = new line_1.Line(this.tl, this.tr);\n            this.bottomEdge = new line_1.Line(this.bl, this.br);\n            // Make sure our bounds reflects the entirety of the fat edge\n            this.encapsulatePoints([this.tl, this.tr, this.bl, this.br]);\n        }\n    };\n    return EdgeShape;\n}(line_shape_1.LineShape));\nexports.EdgeShape = EdgeShape;\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\n/**\n * Defines an image that can be rendered by the gpu. This is an axis oriented\n * image only (no rotations)\n */\nvar ImageShape = (function (_super) {\n    __extends(ImageShape, _super);\n    /**\n     * Generates a new ImageShape that can be rendered\n     *\n     * @param {AtlasTexture} image The AtlasTexture to use when rendering this image\n     * @param {number} size This is the size of the longest edge of the image while\n     *                      retaining aspect ratio.\n     */\n    function ImageShape(image, size) {\n        var _this = _super.call(this, 0, 0, size, size) || this;\n        /** This is the level of opacity the image will be rendered with */\n        _this.opacity = 1.0;\n        _this.texture = image;\n        _this.size = size;\n        return _this;\n    }\n    Object.defineProperty(ImageShape.prototype, \"size\", {\n        /**\n         * Returns the largest edge of the image\n         */\n        get: function () {\n            return Math.max(this.width, this.height);\n        },\n        /**\n         * This is the size the image will be rendered within World Space. The size\n         * correlates to the largest edge of the image\n         */\n        set: function (val) {\n            if (this.texture.aspectRatio > 1) {\n                this.width = val;\n                this.height = val / this.texture.aspectRatio;\n            }\n            else {\n                this.width = val * this.texture.aspectRatio;\n                this.height = val;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Centers this image on a provided location\n     *\n     * @param {number} x The x coordinate in world space\n     * @param {number} y The y coordinate in world space\n     */\n    ImageShape.prototype.centerOn = function (x, y) {\n        this.x = x - (this.width / 2.0);\n        this.y = y - (this.height / 2.0);\n    };\n    return ImageShape;\n}(bounds_1.Bounds));\nexports.ImageShape = ImageShape;\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = __webpack_require__(1);\nvar QuadShape = (function (_super) {\n    __extends(QuadShape, _super);\n    function QuadShape(bounds, color) {\n        var _this = _super.call(this, bounds.x, bounds.right, bounds.y, bounds.bottom) || this;\n        _this.r = 1.0;\n        _this.g = 0.0;\n        _this.b = 0.0;\n        _this.a = 1.0;\n        return _this;\n    }\n    return QuadShape;\n}(bounds_1.Bounds));\nexports.QuadShape = QuadShape;\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = __webpack_require__(0);\n/**\n * Defines a color that is located on an atlas\n */\nvar AtlasColor = (function () {\n    /**\n     * Constructor implementation\n     */\n    function AtlasColor(color, g, b, a) {\n        if (a === void 0) { a = 1.0; }\n        // Value between 1 - 0 for the opacity of the color\n        this.opacity = 1.0;\n        // The pixel width and height of the color rendered onto the atlas\n        // This will always be a 2x2 so the color can be sampled in the middle\n        // For a guaranteed pure color regardless of gl sampling states\n        this.pixelWidth = 2;\n        this.pixelHeight = 2;\n        if (color instanceof three_1.Color) {\n            this.color = color.clone();\n            this.opacity = g === undefined ? 1.0 : g;\n        }\n        else {\n            this.color = new three_1.Color(color, g, b);\n            this.opacity = a;\n        }\n    }\n    return AtlasColor;\n}());\nexports.AtlasColor = AtlasColor;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(1));\n__export(__webpack_require__(22));\n__export(__webpack_require__(21));\n__export(__webpack_require__(6));\n__export(__webpack_require__(5));\n__export(__webpack_require__(15));\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(53));\n__export(__webpack_require__(54));\n__export(__webpack_require__(3));\n__export(__webpack_require__(55));\n__export(__webpack_require__(10));\n__export(__webpack_require__(9));\n__export(__webpack_require__(56));\n__export(__webpack_require__(11));\n__export(__webpack_require__(17));\n__export(__webpack_require__(24));\n__export(__webpack_require__(13));\n__export(__webpack_require__(18));\n__export(__webpack_require__(25));\n__export(__webpack_require__(19));\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PlayState;\n(function (PlayState) {\n    PlayState[PlayState[\"PLAY\"] = 0] = \"PLAY\";\n    PlayState[PlayState[\"STOP\"] = 1] = \"STOP\";\n})(PlayState || (PlayState = {}));\nvar Animate = (function () {\n    function Animate() {\n    }\n    Animate.animate = function () {\n        if (Animate.playState === PlayState.PLAY) {\n            requestAnimationFrame(Animate.animate);\n        }\n        this.animating.forEach(function (propToItem) {\n            propToItem.forEach(function (animate) {\n                // TODO\n            });\n        });\n    };\n    Animate.cancel = function (container, prop) {\n        // TODO\n    };\n    Animate.value = function (container, prop, start, end, duration, ease) {\n        // TODO\n    };\n    Animate.point = function (container) {\n        // TODO\n    };\n    Animate.start = function () {\n        // TODO\n    };\n    Animate.stop = function () {\n        // TODO\n    };\n    Animate.playState = PlayState.PLAY;\n    Animate.animating = new Map();\n    return Animate;\n}());\nexports.Animate = Animate;\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar multi_shape_buffer_cache_1 = __webpack_require__(24);\nvar PlayState;\n(function (PlayState) {\n    PlayState[PlayState[\"INIT\"] = 0] = \"INIT\";\n    PlayState[PlayState[\"PLAY\"] = 1] = \"PLAY\";\n    PlayState[PlayState[\"STOP\"] = 2] = \"STOP\";\n})(PlayState = exports.PlayState || (exports.PlayState = {}));\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar AnimatedShapeBufferCache = (function (_super) {\n    __extends(AnimatedShapeBufferCache, _super);\n    function AnimatedShapeBufferCache() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.playState = PlayState.INIT;\n        _this.buffer = [];\n        _this.bustCache = true;\n        /**\n         * This is the internal control for managing execution of the animate method\n         */\n        _this.doAnimate = function () {\n            if (_this.playState === PlayState.PLAY) {\n                requestAnimationFrame(_this.doAnimate);\n            }\n            _this.animate();\n        };\n        return _this;\n    }\n    /**\n     * This is the method that will execute with the frame rate. Subclasses can\n     * override this to implement animated changes\n     */\n    AnimatedShapeBufferCache.prototype.animate = function () {\n        // Implemented by subclasses\n    };\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    AnimatedShapeBufferCache.prototype.generate = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Make sure the storage is established before trying to create modifications of any sort\n        this.getStorage(selection);\n        if (this.bustCache) {\n            this.buildCache.apply(this, arguments);\n            this.bustCache = false;\n            if (this.playState === PlayState.INIT) {\n                this.start();\n                requestAnimationFrame(this.doAnimate);\n            }\n        }\n        // We always invalidate and commit all of our buffers for animations\n        this.flagBuffersDirty();\n        // Make sure our buffers are updated so they will commit to vertex buffers\n        this.processDirtyBuffers();\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    AnimatedShapeBufferCache.prototype.buildCache = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Begins executing the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.start = function () {\n        this.playState = PlayState.PLAY;\n    };\n    /**\n     * Ceases the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.stop = function () {\n        this.playState = PlayState.STOP;\n    };\n    return AnimatedShapeBufferCache;\n}(multi_shape_buffer_cache_1.MultiShapeBufferCache));\nexports.AnimatedShapeBufferCache = AnimatedShapeBufferCache;\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Takes a map of the form <T, boolean> and returns an array of the keys,\n * excluding entries who's mapped value is false.\n *\n * @param map The map to convert to a list\n *\n * @return T[] A list of the keys, exluding false mappings\n */\nfunction boolMapToArray(map) {\n    return Array\n        .from(map)\n        .filter(function (item) { return item[1]; })\n        .map(function (item) { return item[0]; });\n}\nexports.boolMapToArray = boolMapToArray;\n/**\n * Defines a selection control for custom types and categories\n */\nvar CustomSelection = (function () {\n    function CustomSelection() {\n        /** This caches the list generation of a selection */\n        this.cachedSelection = new Map();\n        /** Map of the custom categories to the selection state */\n        this.selections = new Map();\n        /** Keeps flags indicating if a selection for a given category has changed or not */\n        this._didSelectionChange = new Map();\n    }\n    /**\n     * Clears out all custom selections for every category\n     */\n    CustomSelection.prototype.clearAllSelections = function () {\n        for (var _i = 0, _a = Array.from(this.selections.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.clearSelection(key);\n        }\n    };\n    /**\n     * Clears the selection for the category specified\n     *\n     * @param {string} category Name of the category of selection\n     */\n    CustomSelection.prototype.clearSelection = function (category) {\n        // We must have selected items to clear the selection\n        if (this.getSelection(category).length) {\n            this.selections.set(category, null);\n            this.cachedSelection.set(category, null);\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Makes an item no longer flaged as selected within the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to remove from being selected\n     */\n    CustomSelection.prototype.deselect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        // See if the item is selected already, if it is, clear the selection and bust caches\n        if (selectionMap && selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, false);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Checks if a selection from a category has been modified\n     *\n     * @param {string} category The selection category to check\n     */\n    CustomSelection.prototype.didSelectionCategoryChange = function (category) {\n        return this._didSelectionChange.get(category);\n    };\n    /**\n     * Checks if ANY selection has changed\n     *\n     * @return {boolean} True if any selection has changed\n     */\n    CustomSelection.prototype.didSelectionChange = function () {\n        return boolMapToArray(this._didSelectionChange).length > 0;\n    };\n    /**\n     * This indicates that updates have taken place to account for selection\n     * changes.\n     */\n    CustomSelection.prototype.finalizeUpdate = function () {\n        for (var _i = 0, _a = Array.from(this._didSelectionChange.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this._didSelectionChange.set(key, false);\n        }\n    };\n    /**\n     * This retrieves a list of the items that are selected\n     *\n     * @param category The selection category to check on\n     *\n     * @return {T} Returns a list of items that are currently selected\n     */\n    CustomSelection.prototype.getSelection = function (category) {\n        if (!this.cachedSelection.get(category)) {\n            var theSelection = this.selections.get(category);\n            if (theSelection) {\n                this.cachedSelection.set(category, boolMapToArray(theSelection));\n            }\n            else {\n                this.cachedSelection.set(category, []);\n            }\n        }\n        return this.cachedSelection.get(category);\n    };\n    /**\n     * Specifies an item to flag as selected for the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.select = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        if (!selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, true);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Specifies an item to toggle it's selection status for the provided category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.toggleSelect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        // Clear the cache for the selection list\n        this.cachedSelection.set(category, null);\n        // Toggle the selection off if already selected\n        if (selectionMap.get(item)) {\n            this.deselect(category, item);\n        }\n        else {\n            this.select(category, item);\n        }\n        // Flag the category of selections as changed\n        this._didSelectionChange.set(category, true);\n    };\n    return CustomSelection;\n}());\nexports.CustomSelection = CustomSelection;\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getFontMetrics(props) {\n    var ctx = props.ctx;\n    var text = props.text;\n    var bboxHeight = props.bboxHeight;\n    var canvasHeight = props.ctx.canvas.height;\n    var baseline = props.baseline || 'alphabetic';\n    var flip = props.flip || false;\n    var drawBaseline = props.drawBaseline || false;\n    var fontFamily = 'Arial, san-serif';\n    var fontSize = 14;\n    if (props.fontFamily) {\n        fontFamily = props.fontFamily;\n    }\n    if (props.fontSize) {\n        fontSize = props.fontSize;\n    }\n    // Setting up the canvas\n    ctx.save(); // Create canvas to use as buffer\n    ctx.font = fontSize + \"px \" + fontFamily;\n    var textWidth = ctx.measureText(text).width;\n    // This keeps font in-screen, measureText().width doesn't\n    // Quite do it in some cases. For instance \"j\", or the letter \"f\"\n    // In the font \"Zapfino\".\n    var offsetx = fontSize * 2;\n    var offsety = fontSize * 2;\n    var cwidth = ctx.canvas.width = Math.round(textWidth + offsetx * 2);\n    var cheight = ctx.canvas.height = canvasHeight ? canvasHeight : Math.round(offsety * 2);\n    if (typeof (baseline) === 'string') {\n        offsety = 0; // Using <canvas> baseline\n        ctx.textBaseline = baseline;\n    }\n    // Ctx.font has to be called twice because resetting the size resets the state\n    if (flip) {\n        ctx.scale(1, -1);\n    }\n    ctx.font = fontSize + \"px \" + fontFamily;\n    ctx.fillText(text, offsetx, (typeof (bboxHeight) === 'number' ? bboxHeight : offsety));\n    // Drawing baseline\n    if (drawBaseline) {\n        ctx.fillRect(0, canvasHeight / 2, ctx.canvas.width, 1);\n    }\n    // Grabbing image data\n    var imageData = ctx.getImageData(0, 0, cwidth, cheight);\n    var data = imageData.data;\n    // Calculating top\n    var top = 0;\n    var pos = data.length;\n    var bottom = 0;\n    var realBottom = 0;\n    var left = 0;\n    var right = 0;\n    while (pos > 0) {\n        if (data[pos + 3]) {\n            pos -= pos % (cwidth * 4); // Back to beginning of the line top = (pos / 4) / cwidth; // calculate pixel position top -= offsety - fontSize; pos = data.length; // exit loop } pos += 4; } // calculating bottom var bottom = 0; var pos = data.length; while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                bottom = (pos / 4) / cwidth;\n                bottom -= offsety - fontSize;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Calculating left\n        left = 0;\n        var col = 0;\n        var row = 0; // Left bounds\n        while (row < cheight && col < cwidth) {\n            var px = data[(row * cwidth * 4) + (col * 4) + 3];\n            if (px) {\n                left = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col++;\n            }\n        }\n        // Calculating right\n        right = 0;\n        col = cwidth;\n        row = 0; // Right bounds\n        while (row < cheight && col > 0) {\n            if (data[(row * cwidth * 4) + (col * 4) + 3]) {\n                right = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col--;\n            }\n        }\n        // Calculating real-bottom\n        realBottom = 0;\n        pos = data.length;\n        while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                realBottom = (pos / 4) / cwidth;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Restoring state\n        ctx.restore();\n    }\n    // Returning raw-metrics\n    return {\n        bottom: realBottom,\n        height: (bottom - top),\n        left: (-left),\n        top: (fontSize - top),\n        width: (right - left),\n    };\n}\nexports.getFontMetrics = getFontMetrics;\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a3332646dfaa2fe730c3","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"three\"\n// module id = 0\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Class to manage the x, y, width, and height of an object\n *\n * @template T This specifies the data type associated with this shape and is accessible\n *             via the property 'd'\n */\nvar Bounds = (function () {\n    /**\n     * Create a new instance\n     *\n     * @param left  The left side (x coordinate) of the instance\n     * @param right The right side of the instance\n     * @param top The top (y coordinate) of the instance\n     * @param bottom The bottom of the instance\n     */\n    function Bounds(left, right, top, bottom) {\n        this.height = 0;\n        this.width = 0;\n        this.x = 0;\n        this.y = 0;\n        if (arguments.length === 4) {\n            this.x = left;\n            this.width = right - left;\n            this.y = top;\n            this.height = top - bottom;\n        }\n    }\n    Object.defineProperty(Bounds.prototype, \"area\", {\n        /** The total rectangular surface area of this instance */\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"bottom\", {\n        /** The bottom coordinate for this instance (y + height) */\n        get: function () {\n            return this.y - this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"mid\", {\n        /** An x, y coordinate pair representing the center of this object */\n        get: function () {\n            return {\n                x: this.x + (this.width / 2),\n                y: this.y - (this.height / 2),\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bounds.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Check to see if a given point lies within the bounds of this instance\n     *\n     * @param point The point to check\n     */\n    Bounds.prototype.containsPoint = function (point) {\n        if (point.x < this.x) {\n            return false;\n        }\n        if (point.y > this.y) {\n            return false;\n        }\n        if (point.x > this.right) {\n            return false;\n        }\n        if (point.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Copies the properties of the bounds specified\n     *\n     * @param b The bounds whose dimensions we wish to copy\n     */\n    Bounds.prototype.copyBounds = function (b) {\n        this.height = b.height;\n        this.width = b.width;\n        this.x = b.x;\n        this.y = b.y;\n    };\n    /**\n     * Ensure that this object contains the smaller bounds\n     *\n     * This method will not shrink this class, but only grow it as necessary to\n     * fit the destination object\n     *\n     * @param bounds The bounds to encapsulate\n     */\n    Bounds.prototype.encapsulate = function (bounds) {\n        if (bounds.x < this.x) {\n            this.width += this.x - bounds.x;\n            this.x = bounds.x;\n        }\n        if (bounds.y > this.y) {\n            this.height += bounds.y - this.y;\n            this.y = bounds.y;\n        }\n        if (bounds.right > this.right) {\n            this.width = bounds.right - this.x;\n        }\n        if (bounds.bottom < this.bottom) {\n            this.height = this.y - bounds.bottom;\n        }\n    };\n    /**\n     * Ensure that this object contains the provided list of bounds\n     *\n     * This will never shrink or modify the original area covered by this bounds\n     * but will instead stay the same or include the original area plus the specified\n     * list of bounds.\n     *\n     * @param {Bounds<any>[]} bounds The list of bounds objects to encapsulate\n     * @param {boolean} sizeToFirst If this is set, the procedure will start by making this bounds\n     *                              be a clone of the first bounds object in the list\n     */\n    Bounds.prototype.encapsulateBounds = function (bounds, sizeToFirst) {\n        if (sizeToFirst && bounds.length) {\n            this.copyBounds(bounds[0]);\n        }\n        if (bounds.length === 0) {\n            return;\n        }\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        bounds.forEach(function (p) {\n            if (p.x < minX) {\n                minX = p.x;\n            }\n            if (p.right > maxX) {\n                maxX = p.right;\n            }\n            if (p.bottom < minY) {\n                minY = p.bottom;\n            }\n            if (p.y > maxY) {\n                maxY = p.y;\n            }\n        });\n        // Make bounds that encompasses the bounds list, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Grow this class to contain the specified point\n     *\n     * This method will not shrink this instance. It will only grow it as\n     * necessary.\n     *\n     * @param point The point to encapsulate\n     */\n    Bounds.prototype.encapsulatePoint = function (point) {\n        if (point.x < this.x) {\n            this.width += this.x - point.x;\n            this.x = point.x;\n        }\n        if (point.y > this.y) {\n            this.height += point.y - this.y;\n            this.y = point.y;\n        }\n        if (point.x > this.right) {\n            this.width = point.x - this.x;\n        }\n        if (point.y < this.bottom) {\n            this.height = this.y - point.y;\n        }\n    };\n    /**\n     * Efficiently encapsulates a set of points by growing the current dimensions\n     * of the bounds until the points are enclosed. This will perform faster than\n     * running encapsulatePoint for a list of points.\n     *\n     * @param points An array of points that Can be of format {x, y} or [x, y]\n     *\n     * @memberOf Bounds\n     */\n    Bounds.prototype.encapsulatePoints = function (points) {\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        if (points[0] !== undefined && points[0].x) {\n            points.forEach(function (p) {\n                if (p.x < minX) {\n                    minX = p.x;\n                }\n                else if (p.x > maxX) {\n                    maxX = p.x;\n                }\n                if (p.y < minY) {\n                    minY = p.y;\n                }\n                else if (p.y > maxY) {\n                    maxY = p.y;\n                }\n            });\n        }\n        else {\n            points.forEach(function (p) {\n                if (p[0] < minX) {\n                    minX = p[0];\n                }\n                else if (p[0] > maxX) {\n                    maxX = p[0];\n                }\n                if (p[1] < minY) {\n                    minY = p[1];\n                }\n                else if (p[1] > maxY) {\n                    maxY = p[1];\n                }\n            });\n        }\n        // Make bounds that encompasses the points, then we encapsulate\n        // Those bounds\n        this.encapsulate(new Bounds(minX, maxX, maxY, minY));\n    };\n    /**\n     * Checks to see if another bounds fits in itself.\n     *\n     * @param {Bounds} inner The bounds to test against\n     *\n     * @return {number} int 1 is an exact fit, 2 it fits with space, 0 it doesn't fit\n     */\n    Bounds.prototype.fits = function (inner) {\n        if (this.width === inner.width) {\n            if (this.height === inner.height) {\n                return 1;\n            }\n        }\n        if (this.width >= inner.width) {\n            if (this.height >= inner.height) {\n                return 2;\n            }\n        }\n        return 0;\n    };\n    /**\n     * Check to see if the provided bounds intersects with this instance\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if the other object intersects with this instance\n     */\n    Bounds.prototype.hitBounds = function (bounds) {\n        if (bounds.right < this.x) {\n            return false;\n        }\n        if (bounds.x > this.right) {\n            return false;\n        }\n        if (bounds.bottom > this.y) {\n            return false;\n        }\n        if (bounds.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Tests if a point is inside this bounds\n     *\n     * @param p The point to test\n     *\n     * @return boolean The point to test\n     */\n    Bounds.prototype.pointInside = function (p) {\n        if (p.x < this.x) {\n            return false;\n        }\n        if (p.y > this.y) {\n            return false;\n        }\n        if (p.x > this.right) {\n            return false;\n        }\n        if (p.y < this.bottom) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Test function to type check the provided value\n     *\n     * @return True if value is a bounds object\n     */\n    Bounds.isBounds = function (value) {\n        // Falsy values aren't bounds objects\n        if (!value) {\n            return false;\n        }\n        // Direct test for bounds objects\n        if (value instanceof this) {\n            return true;\n        }\n        // Duck-typing check\n        return value &&\n            'containsPoint' in value &&\n            'encapsulate' in value &&\n            'hitTest' in value;\n    };\n    /**\n     * Check if this instance is completely inside the provided bounds\n     *\n     * @param bounds The bounds to test against this instance\n     *\n     * @return True if this instance is inside the provided bounds\n     */\n    Bounds.prototype.isInside = function (bounds) {\n        return (bounds.x <= this.x &&\n            bounds.right >= this.right &&\n            bounds.y >= this.y &&\n            bounds.bottom <= this.bottom);\n    };\n    /**\n     * Generates a Bounds object covering max extents\n     *\n     * @return {Bounds} bounds covering as wide of a range as possible\n     */\n    Bounds.maxBounds = function () {\n        return new Bounds(Number.MIN_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MAX_VALUE);\n    };\n    return Bounds;\n}());\nexports.Bounds = Bounds;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/bounds.ts\n// module id = 1\n// module chunks = 0","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/debug/src/browser.js\n// module id = 2\n// module chunks = 0","\"use strict\";\n/**\n * This class and set of methods is provided to attempt to create as efficient as possible\n * methods for updating large vertex buffers with values. The first portion of the file is\n * a list of methods and registers. This is to prevent any instantiation needed for the methods\n * and registers to exist. Also, the methods have no useable parent scope to ensure nothing like\n * a 'this' is used. These methods utilize the registers and their own simple loops to pound\n * through large amounts of information while providing capabilities to edit vertices in batches.\n *\n * You will also notice there are many many similar methods with just a single extra parameter\n * here and there. This is to prevent ANY calculations on trying to determine a proper parameter set\n * while also making method calls directly without any .call or .apply.\n *\n * The number of update methods is how many differing attributes are supported. If you need more supported\n * attributes add an updateBufferN method and provide the required attributes. Insert the logic in the EXACT\n * pattern seen in the other methods. DO NOT attempt to add additional logic lest the performance be something\n * terrible.\n *\n * The BufferUtil class makes use of these methods and registers. It also provides some very handy methods\n * for working with your large buffers.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar debugGenerator = require('debug');\nvar debug = require('debug')('WebGLSurface:BufferUtil');\nvar TriangleOrientation;\n(function (TriangleOrientation) {\n    // The triangles points are clockwise\n    TriangleOrientation[TriangleOrientation[\"CW\"] = 0] = \"CW\";\n    // The triangles points are Counter clockwise\n    TriangleOrientation[TriangleOrientation[\"CCW\"] = 1] = \"CCW\";\n    // The triangles points are linear, thus degenerate\n    TriangleOrientation[TriangleOrientation[\"DEGENERATE\"] = 2] = \"DEGENERATE\";\n})(TriangleOrientation = exports.TriangleOrientation || (exports.TriangleOrientation = {}));\nvar AttributeSize;\n(function (AttributeSize) {\n    AttributeSize[AttributeSize[\"ONE\"] = 0] = \"ONE\";\n    AttributeSize[AttributeSize[\"TWO\"] = 1] = \"TWO\";\n    AttributeSize[AttributeSize[\"THREE\"] = 2] = \"THREE\";\n    AttributeSize[AttributeSize[\"FOUR\"] = 3] = \"FOUR\";\n})(AttributeSize = exports.AttributeSize || (exports.AttributeSize = {}));\n/**\n * These are for fast look ups of the default values provided\n * Doing this fashion avoids array look ups in the defaults values\n */\nvar defaultsHolder0 = 0;\nvar defaultsHolder1 = 0;\nvar defaultsHolder2 = 0;\nvar defaultsHolder3 = 0;\n/**\n * These are for fast look ups of attribute buffers that are going\n * through the update process. We do everything to mitigate array look ups\n * when and where we can\n */\nvar attrRegister0 = [];\nvar attrRegister1 = [];\nvar attrRegister2 = [];\nvar attrRegister3 = [];\nvar attrRegister4 = [];\nvar attrRegister5 = [];\nvar attrRegister6 = [];\nvar attrRegister7 = [];\nvar attrRegister8 = [];\nvar attrRegister9 = [];\nvar attrRegister10 = [];\nvar attrIndex0 = 0;\nvar attrIndex1 = 0;\nvar attrIndex2 = 0;\nvar attrIndex3 = 0;\nvar attrIndex4 = 0;\nvar attrIndex5 = 0;\nvar attrIndex6 = 0;\nvar attrIndex7 = 0;\nvar attrIndex8 = 0;\nvar attrIndex9 = 0;\nvar attrIndex10 = 0;\nvar attrIndexIncr0 = 0;\nvar attrIndexIncr1 = 0;\nvar attrIndexIncr2 = 0;\nvar attrIndexIncr3 = 0;\nvar attrIndexIncr4 = 0;\nvar attrIndexIncr5 = 0;\nvar attrIndexIncr6 = 0;\nvar attrIndexIncr7 = 0;\nvar attrIndexIncr8 = 0;\nvar attrIndexIncr9 = 0;\nvar attrIndexIncr10 = 0;\n/** This is used to define a starting batch location to aid in continuing batch updates */\nvar lastBatchRegister = 0;\nvar isStreamUpdatingRegister = false;\n/**\n * This takes our list of attribute buffers and applies them to the registers for rapid lookups\n *\n * @param {number[][]} attributeBuffers The buffers for each attribute to be updated\n * @param {number[]} incrementValues How much each batch increments it's lookup index\n */\nfunction applyAttributeRegisters(attributeBuffers, incrementValues) {\n    attrRegister0 = attributeBuffers[0];\n    attrRegister1 = attributeBuffers[1];\n    attrRegister2 = attributeBuffers[2];\n    attrRegister3 = attributeBuffers[3];\n    attrRegister4 = attributeBuffers[4];\n    attrRegister5 = attributeBuffers[5];\n    attrRegister6 = attributeBuffers[6];\n    attrRegister7 = attributeBuffers[7];\n    attrRegister8 = attributeBuffers[8];\n    attrRegister9 = attributeBuffers[9];\n    attrRegister10 = attributeBuffers[10];\n    attrIndexIncr0 = incrementValues[0];\n    attrIndexIncr1 = incrementValues[1];\n    attrIndexIncr2 = incrementValues[2];\n    attrIndexIncr3 = incrementValues[3];\n    attrIndexIncr4 = incrementValues[4];\n    attrIndexIncr5 = incrementValues[5];\n    attrIndexIncr6 = incrementValues[6];\n    attrIndexIncr7 = incrementValues[7];\n    attrIndexIncr8 = incrementValues[8];\n    attrIndexIncr9 = incrementValues[9];\n    attrIndexIncr10 = incrementValues[10];\n}\n/**\n * The following methods are targetted at executing the update accessor with varying number\n * of parameters while mitigating array look ups.\n *\n * @param {number} numBatches The number of batches to execute\n * @param {Function} updateAccessor The accessor function that will update the buffer values\n */\nfunction updateBuffer1(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0);\n    }\n}\nfunction updateBuffer2(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1);\n    }\n}\nfunction updateBuffer3(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2);\n    }\n}\nfunction updateBuffer4(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3);\n    }\n}\nfunction updateBuffer5(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4);\n    }\n}\nfunction updateBuffer6(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5);\n    }\n}\nfunction updateBuffer7(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6);\n    }\n}\nfunction updateBuffer8(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7);\n    }\n}\nfunction updateBuffer9(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8);\n    }\n}\nfunction updateBuffer10(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        attrIndex9 = i * attrIndexIncr9;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8, attrRegister9, attrIndex9);\n    }\n}\nfunction updateBuffer11(numBatches, updateAccessor) {\n    for (var i = lastBatchRegister; i < numBatches; ++i) {\n        attrIndex0 = i * attrIndexIncr0;\n        attrIndex1 = i * attrIndexIncr1;\n        attrIndex2 = i * attrIndexIncr2;\n        attrIndex3 = i * attrIndexIncr3;\n        attrIndex4 = i * attrIndexIncr4;\n        attrIndex5 = i * attrIndexIncr5;\n        attrIndex6 = i * attrIndexIncr6;\n        attrIndex7 = i * attrIndexIncr7;\n        attrIndex8 = i * attrIndexIncr8;\n        attrIndex9 = i * attrIndexIncr9;\n        attrIndex10 = i * attrIndexIncr10;\n        updateAccessor(i - lastBatchRegister, attrRegister0, attrIndex0, attrRegister1, attrIndex1, attrRegister2, attrIndex2, attrRegister3, attrIndex3, attrRegister4, attrIndex4, attrRegister5, attrIndex5, attrRegister6, attrIndex6, attrRegister7, attrIndex7, attrRegister8, attrIndex8, attrRegister9, attrIndex9, attrRegister10, attrIndex10);\n    }\n}\n/**\n * This takes the defaults array provided and loads them into our default\n * lookup values\n *\n * @param {number[]} defaults The array with the default values in them for our buffer attribute\n */\nfunction applyDefaultsHolders(defaults) {\n    defaultsHolder0 = defaults[0] || 0;\n    defaultsHolder1 = defaults[1] || 0;\n    defaultsHolder2 = defaults[2] || 0;\n    defaultsHolder3 = defaults[3] || 0;\n}\n/**\n * The following methods are rapid ways of populating the buffer without\n * setting up a generic loop. This saves on performance by not creating a loop\n * nor allocating the variables necessary for the generic loop.\n *\n * @param {Float32Array} buffer The buffer to populate\n * @param {number} start The index the data should be populated into\n */\nfunction fillSize1(buffer, start) {\n    buffer[start] = defaultsHolder0;\n}\nfunction fillSize2(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n}\nfunction fillSize3(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n}\nfunction fillSize4(buffer, start) {\n    buffer[start] = defaultsHolder0;\n    buffer[++start] = defaultsHolder1;\n    buffer[++start] = defaultsHolder2;\n    buffer[++start] = defaultsHolder3;\n}\nfunction isList(val) {\n    if (Array.isArray(val))\n        return true;\n    return false;\n}\n/**\n * This is a quick lookup to find the correct filler method for the given attribute size\n */\nvar fillMethodLookUp = (_a = {},\n    _a[AttributeSize.ONE] = fillSize1,\n    _a[AttributeSize.TWO] = fillSize2,\n    _a[AttributeSize.THREE] = fillSize3,\n    _a[AttributeSize.FOUR] = fillSize4,\n    _a);\nvar updateBufferLookUp = {\n    1: updateBuffer1,\n    2: updateBuffer2,\n    3: updateBuffer3,\n    4: updateBuffer4,\n    5: updateBuffer5,\n    6: updateBuffer6,\n    7: updateBuffer7,\n    8: updateBuffer8,\n    9: updateBuffer9,\n    10: updateBuffer10,\n    11: updateBuffer11,\n};\n/**\n * This provides methods for handling common buffer tasks such as construction\n * and population.\n */\nvar BufferUtil = (function () {\n    function BufferUtil() {\n    }\n    /**\n     * This places our updateBuffer into a mode where the updates start at index 0 of the\n     * buffer. Subsequent calls will start where the previous call left off. This lets\n     * you stream in updates to the buffer rather than just update the entire buffer\n     * all at once.\n     */\n    BufferUtil.beginUpdates = function () {\n        isStreamUpdatingRegister = true;\n        lastBatchRegister = 0;\n    };\n    /**\n     * This takes the buffer items and cleans up their use within memory as best as possible.\n     *\n     * @param bufferItems\n     */\n    BufferUtil.dispose = function (buffers) {\n        if (buffers) {\n            buffers.forEach(function (bufferItems) {\n                bufferItems.attributes = null;\n                bufferItems.currentData = null;\n                bufferItems.geometry.dispose();\n                bufferItems.geometry = null;\n                bufferItems.system = null;\n            });\n        }\n    };\n    /**\n     * This stops updates streaming into the buffers and makes it where an update\n     * will always just start at the beginning of the buffer.\n     */\n    BufferUtil.endUpdates = function () {\n        var totalBatches = lastBatchRegister;\n        isStreamUpdatingRegister = false;\n        lastBatchRegister = 0;\n        return totalBatches;\n    };\n    /**\n     * It is often needed to examine a given buffer and see how the triangles are packed in.\n     * This is a common debugging need and will speed up debugging significantly.\n     *\n     * @param {IBufferItems<T, U>} bufferItems This is the buffer whose structure we want\n     *                                         to examine.\n     * @param {string} message This is the message for the debug statement. There are two\n     *                         predefined %o. The first is the vertex information the second\n     *                         is the uniform info. Leave null for a default message.\n     * @param {string} debugNamespace The namespace for the debugging info.\n     */\n    BufferUtil.examineBuffer = function (bufferItems, message, debugNamespace) {\n        // Get the appropriate debug namespace\n        var debugBuffer = debugGenerator(debugNamespace);\n        // Quick quit if the debugger is not enabled\n        if (!debugBuffer.enabled) {\n            return;\n        }\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // Get the attributes by name out of the three js buffer\n        var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n        // Get the raw number buffers\n        var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n        // This will store all of the examined triangles for easy viewing\n        var triangles = [];\n        if (bufferItems.system.drawMode === three_1.TrianglesDrawMode) {\n            var currentVertex_1 = 0;\n            var attrSize_1 = 0;\n            var currentIndex_1 = 0;\n            var length_1 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_1 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_2 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_1 = attr.size + 1;\n                        currentIndex_1 = currentVertex_1 * attrSize_1;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_1, currentIndex_1 + attrSize_1);\n                    });\n                    // Move to the next vertex\n                    currentVertex_1++;\n                };\n                // Each new triangle is a culmination of three vertices which are packed in\n                // The buffer with no vertex sharing\n                for (var i = 0; i < 3; ++i) {\n                    _loop_2(i);\n                }\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_1 < length_1) {\n                _loop_1();\n            }\n        }\n        else if (bufferItems.system.drawMode === three_1.TriangleStripDrawMode) {\n            var currentVertex_2 = 0;\n            var attrSize_2 = 0;\n            var currentIndex_2 = 0;\n            var length_2 = buffer.drawRange.start + buffer.drawRange.count;\n            var _loop_3 = function () {\n                var tri = {\n                    vertex_0: {},\n                    vertex_1: {},\n                    vertex_2: {},\n                };\n                var _loop_4 = function (i) {\n                    attributes.forEach(function (attr, index) {\n                        attrSize_2 = attr.size + 1;\n                        currentIndex_2 = currentVertex_2 * attrSize_2;\n                        tri[\"vertex_\" + i][attr.name] = attributeBuffers[index].slice(currentIndex_2, currentIndex_2 + attrSize_2);\n                    });\n                    // Move to the next vertex\n                    currentVertex_2++;\n                };\n                // Each new triangle is three vertices, where the first two are shared with\n                // The previous triangle's last two vertices\n                for (var i = 0; i < 3; ++i) {\n                    _loop_4(i);\n                }\n                // Go back two vertices as the next tri will use them + the next vertex to\n                // Make the next triangle\n                currentVertex_2 -= 2;\n                // Store the calculated tri\n                triangles.push(tri);\n            };\n            while (currentVertex_2 < length_2) {\n                _loop_3();\n            }\n        }\n        // Log the debug info to the console using the debug utility\n        debugBuffer(message || 'vertices: %o uniforms: %o', {\n            drawRange: buffer.drawRange,\n            triangles: triangles,\n        }, bufferItems.system.material.uniforms);\n    };\n    /**\n     * Aids in taking in multiple multibuffers and flattening it to a single list\n     *\n     * @param multiShapeBuffers\n     */\n    BufferUtil.flattenMultiBuffers = function (multiShapeBuffers) {\n        var all = [];\n        multiShapeBuffers.forEach(function (multiBuffer) {\n            multiBuffer.getBuffers().forEach(function (buffer) { return all = all.concat(buffer); });\n        });\n        return all;\n    };\n    /**\n     * @static\n     * This helps aid in updating a complex multi buffer. It will establish when a new\n     * buffer needs to be created and initialized and it will automatically call a BaseBuffer's\n     * update when an update is detected as a need for the buffer.\n     *\n     * @param multiShapeBuffer\n     * @param buffers\n     * @param init\n     *\n     * @return {boolean} True if a buffer was updated\n     */\n    BufferUtil.updateMultiBuffer = function (multiShapeBuffer, buffers, init, update, forceUpdates) {\n        // This flag indicates whether an update occurred or not\n        var didUpdate = false;\n        // Get the shape buffers we need rendered into vertex buffers\n        var shapeBuffers;\n        // If this is a list of multibuffers, we flatten out all of the sub buffers\n        // This is a one level deep flatten as we do not want to accidentally handle shape clustering here\n        if (isList(multiShapeBuffer)) {\n            shapeBuffers = multiShapeBuffer.reduce(function (flat, toFlatten) { return flat.concat(toFlatten.getBuffers()); }, []);\n        }\n        else {\n            shapeBuffers = multiShapeBuffer.getBuffers();\n        }\n        // Make a lookup to identify the buffers that already exists for the given multi shape buffers\n        var bufferLookup = new Map();\n        buffers.forEach(function (buffer) { return bufferLookup.set(buffer.bufferItems.currentData, buffer); });\n        // This will store all of the shape buffers that needs to be rendered into a vertex buffer\n        var needsBuffer = [];\n        // If we're forcing updates then we should be ensuring all shapeBuffers needs a buffer\n        // And leave all of the bufferLookup so they will all be updated with the provided needed shape buffer updates\n        if (forceUpdates) {\n            needsBuffer = [].concat(shapeBuffers);\n        }\n        else {\n            shapeBuffers.forEach(function (shapes) {\n                if (bufferLookup.get(shapes)) {\n                    bufferLookup.delete(shapes);\n                }\n                else {\n                    needsBuffer.push(shapes);\n                }\n            });\n        }\n        // All buffers remaining in the buffer lookup are available for re-rendering the\n        // Shape buffers that still needs updates\n        // If the shape buffers needing updates is greater than the vertex buffers available\n        // Then we update with what we have and initialize any additional vertex buffers needed\n        if (needsBuffer.length >= bufferLookup.size) {\n            // Take any buffer that is not found with an existing shape buffer and update it\n            // With a buffer that needs an update\n            bufferLookup.forEach(function (value) {\n                didUpdate = update(value, needsBuffer.shift()) || didUpdate;\n            });\n            // Any remaining buffers that need updates will have to initialize a buffer\n            // To cram it in\n            needsBuffer.forEach(function (shapeBuffer) {\n                var vertexBuffer = init();\n                buffers.push(vertexBuffer);\n                didUpdate = update(vertexBuffer, shapeBuffer) || didUpdate;\n            });\n        }\n        else {\n            var vertexBuffers_1 = Array.from(bufferLookup.values());\n            needsBuffer.forEach(function (shapeBuffer) {\n                var vertexBuffer = vertexBuffers_1.shift();\n                didUpdate = update(vertexBuffer, shapeBuffer) || didUpdate;\n            });\n            vertexBuffers_1.forEach(function (buffer) {\n                buffer.bufferItems.geometry.setDrawRange(0, 0);\n            });\n        }\n        return didUpdate;\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with constructing a new buffer\n     * such as applying the name, generating the buffer, and populating default values to\n     * that buffer.\n     *\n     * @param {number} numVertices The number of vertices this buffer will have\n     * @param {IAttributeInfo[]} attributes A description of each attribute in the buffer\n     *\n     * @returns {BufferGeometry} The newly made buffer\n     */\n    BufferUtil.makeBuffer = function (numVertices, attributes) {\n        var iMax = attributes.length;\n        var geometry = new three_1.BufferGeometry();\n        var totalAttributeSize = 0;\n        for (var i = 0; i < iMax; ++i) {\n            var attribute = attributes[i];\n            var attributeSize = attribute.size + 1;\n            totalAttributeSize += attributeSize;\n            var buffer = new Float32Array(attributeSize * numVertices);\n            var fillMethod = fillMethodLookUp[attribute.size];\n            var name_1 = attribute.name;\n            // We set up our default value registers before executing the fill method\n            applyDefaultsHolders(attribute.defaults);\n            // Fill our buffer with the indicated default values\n            for (var k = 0; k < numVertices; ++k) {\n                fillMethod(buffer, k * attributeSize);\n            }\n            // Apply the buffer to our geometry buffer\n            var attr = new three_1.BufferAttribute(buffer, attributeSize);\n            attr.setDynamic(true);\n            geometry.addAttribute(name_1, attr);\n            debug('Made Buffer Attribute:', name_1, attributeSize);\n        }\n        if (totalAttributeSize > 16) {\n            console.warn('A Buffer has specified more attributes than available. The max is 16 and the buffer provided:', totalAttributeSize);\n        }\n        return geometry;\n    };\n    /**\n     * @static\n     * This handles many of the common tasks associated with updating a buffer. You specify how many vertices\n     * to update in a batch and you specify how many batches are present.\n     *\n     * Batches are used to represent your full shape object that is being loaded from the cpu:\n     *\n     * IE- you have a rectangle object you wish to update in your buffer. This takes around 6 vertices typically\n     * so you make your vertexBatch 6 and the numBatches the number of quads you need to update in the buffer.\n     *\n     * You then provide an accessor which aids in pointing to the buffer items that need updating. The accessor has\n     * variable arguments depending on the attributes you inject in.\n     *\n     * If you have attributes like:\n     * [\n     *  {name: position, size: AttributeSize.Three},\n     *  {name: color, size: AttributeSize.Four},\n     * ]\n     *\n     * Then your accessor will be delievered arguments in this form:\n     *\n     * function(batchIndex: number, positionBuffer: number[], positionIndex: number, colorBuffer: number[], colorIndex: number)\n     *\n     * NOTE: The params handed in ARE ORDERED BY the attributes injected in\n     *\n     * You then can update the buffers based on the index information handed alongside each buffer\n     *\n     * @param {T[]} newData The new data that is going to be injected into the buffer. This must be a NEW REFERENCE of data\n     *                      that does NOT match the reference in the bufferItems.currentData. So newData !== bufferItems.currentData\n     *                      in order for the update to occur.\n     * @param {BufferGeometry} bufferItems The buffer related items used to identify how to update the buffer\n     * @param {number} vertexBatch The number of vertices to include per update batch\n     * @param {number} numBatches The number of batches to execute\n     * @param {Function} updateAccessor The accessor for performing the data update to the buffer\n     * @param {boolean} force This bypasses the typical checks that determines if the buffer SHOULD update.\n     *\n     * @return {boolean} True if the buffer was updated with this call\n     */\n    BufferUtil.updateBuffer = function (newData, bufferItems, vertexBatch, numBatches, updateAccessor, force) {\n        var attributes = bufferItems.attributes;\n        var buffer = bufferItems.geometry;\n        // If we passed the data check on the first pass, then all future streamed updates\n        // Should pass as well\n        var testPerformed = lastBatchRegister !== 0 && isStreamUpdatingRegister;\n        // We check if there is a reference change in the data indicating a buffer push needs to happen\n        if ((newData !== undefined && newData !== bufferItems.currentData) || testPerformed || force) {\n            // If we aren't streaming updates, then we always start at the beginning\n            if (!isStreamUpdatingRegister) {\n                // Reset out last batch register as this is an entriely new update\n                lastBatchRegister = 0;\n            }\n            // Flag the newly rendered data as our current data\n            bufferItems.currentData = newData;\n            // Get the attributes by name out of the three js buffer\n            var bufferAttributes = attributes.map(function (attr) { return buffer.attributes[attr.name]; });\n            // Get the raw number buffers\n            var attributeBuffers = bufferAttributes.map(function (attr) { return attr.array; });\n            // Determine what kind of buffer pointer increments we will need\n            var incrementValues = attributes.map(function (attr) { return (attr.size + 1) * vertexBatch; });\n            // Apply all data needed to any registers we need\n            applyAttributeRegisters(attributeBuffers, incrementValues);\n            // Get the method that will perform the update based on number of attributes\n            var updateMethod = updateBufferLookUp[attributes.length];\n            // Execute the update method\n            updateMethod(numBatches + lastBatchRegister, updateAccessor);\n            // Flag each buffer attribute for needing an update\n            bufferAttributes.forEach(function (attr) {\n                if (attr.updateRange) {\n                    attr.updateRange.offset = 0;\n                    attr.updateRange.count = vertexBatch * (lastBatchRegister + numBatches) * attr.itemSize;\n                }\n                attr.needsUpdate = true;\n            });\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n            return true;\n        }\n        else {\n            // Move our register forward in case we are in a stream update\n            lastBatchRegister += numBatches;\n        }\n        return false;\n    };\n    /**\n     * This makes all of the typical items used in creating and managing a buffer of items rendered to the screen\n     *\n     * @returns {IBufferItems<T>} An empty object of the particular buffer items needed\n     */\n    BufferUtil.makeBufferItems = function () {\n        return {\n            attributes: [],\n            currentData: [],\n            geometry: null,\n            system: null,\n        };\n    };\n    return BufferUtil;\n}());\nexports.BufferUtil = BufferUtil;\nvar _a;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/buffer-util.ts\n// module id = 3\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar buffer_util_1 = require(\"../util/buffer-util\");\n/**\n * This deinfes the minimal set of methods that should be implemented to create\n * a reusable buffer object that can be initialized and populated.\n */\nvar BaseBuffer = (function () {\n    function BaseBuffer() {\n    }\n    /**\n     * This disposes the resources associated with a buffer.\n     */\n    BaseBuffer.prototype.dispose = function () {\n        if (this.bufferItems) {\n            buffer_util_1.BufferUtil.dispose([this.bufferItems]);\n        }\n    };\n    /**\n     * This initializes the buffer and generates the buffer items object.\n     */\n    BaseBuffer.prototype.init = function (material, unitCount) {\n        // To be implemented by a subclass\n    };\n    /**\n     * This updates the buffer by providing the shape buffer needed to update\n     * the internal buffer items\n     *\n     * @param {T[]} shapeBuffer The shape buffer containing all of the shape data\n     *                          to be placed into the buffer.\n     *\n     * @return {boolean} Retrusn true if this pushed up any updates\n     */\n    BaseBuffer.prototype.update = function (shapeBuffer) {\n        // To be implemented by a subclass\n        return false;\n    };\n    return BaseBuffer;\n}());\nexports.BaseBuffer = BaseBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/base-buffer.ts\n// module id = 4\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calculates the distance between two points, but keeps the distance in dquared form\n * thus performing Math.sqrt() on the output of this distance would provide the true\n * distance between the points.\n *\n * It is often faster and all that is needed to compare squared distances vs real distances\n * thus eliminating multiple Math.sqrt operations\n *\n * NOTE: For vectors this is the same as (pseudo code):\n * let vector3 = vector2.subtract(vector1)\n * return vector3.dot(vector3)\n *\n * @param p1 The point to find the distance from the second point\n * @param p2 The point to find the distance from the first point\n *\n * @return {number} The distance * distance between the two points\n */\nfunction squareDistance(p1, p2) {\n    var dx = p1.x - p2.x;\n    var dy = p1.y - p2.y;\n    return dx * dx + dy * dy;\n}\n/**\n * Contains methods for managing or manipulating points\n *\n * @export\n * @class Point\n */\nvar Point = (function () {\n    function Point() {\n    }\n    /**\n     * Adds two points together\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @return {IPoint} The two points added together\n     */\n    Point.add = function (p1, p2, out) {\n        if (out) {\n            out.x = p1.x + p2.x;\n            out.y = p1.y + p2.y;\n            return out;\n        }\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y,\n        };\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {IPoint} The closest point to the test point\n     */\n    Point.getClosest = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = null;\n        var distance;\n        var findClosest = function (point) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = point;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This analyzes a test point against a list of points and determines which of the points is\n     * the closest to the test point. If there are equi-distant points in the list, this will return\n     * the first found in the list.\n     *\n     * This just returns the index of the found point and not the point itself\n     *\n     * @param {IPoint} testPoint The point to compare against other points\n     * @param {IPoint[]} points The list of points to be compared against\n     *\n     * @return {number} The index of the closest point to the test point\n     */\n    Point.getClosestIndex = function (testPoint, points) {\n        var closestDistance = Number.MAX_VALUE;\n        var closestPoint = 0;\n        var distance;\n        var findClosest = function (point, i) {\n            distance = squareDistance(point, testPoint);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestPoint = i;\n            }\n        };\n        points.forEach(findClosest);\n        return closestPoint;\n    };\n    /**\n     * @static\n     * This will calculate a direction vector between two points that points toward p2\n     *\n     * @param {IPoint} p1 The start of the direction\n     * @param {IPoint} p2 The direction to point the vector towards\n     * @param {boolean} normalize If true, this will make the vector have a magnitude of 1\n     *\n     * @returns {number}\n     */\n    Point.getDirection = function (p1, p2, normalize) {\n        if (normalize === void 0) { normalize = false; }\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        if (normalize) {\n            var magnitude = Math.sqrt(dx * dx + dy * dy);\n            dx /= magnitude;\n            dy /= magnitude;\n        }\n        return {\n            x: dx,\n            y: dy,\n        };\n    };\n    /**\n     * @static\n     * Gets the distance between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     * @param {boolean} squared If set to true, returns the distance * distance (performs faster)\n     *\n     * @returns {number} The real distance between two points\n     */\n    Point.getDistance = function (p1, p2, squared) {\n        if (squared === void 0) { squared = false; }\n        if (squared) {\n            return squareDistance(p1, p2);\n        }\n        return Math.sqrt(squareDistance(p1, p2));\n    };\n    /**\n     * @static\n     * Gets a point perfectly between two points\n     *\n     * @param {IPoint} p1\n     * @param {IPoint} p2\n     *\n     * @returns {IPoint} The point between the two provided points\n     */\n    Point.getMidpoint = function (p1, p2) {\n        var direction = Point.getDirection(p1, p2);\n        return {\n            x: direction.x / 2 + p1.x,\n            y: direction.y / 2 + p1.y,\n        };\n    };\n    Point.make = function (x, y) {\n        return { x: x, y: y };\n    };\n    /**\n     * Scales a point by a given amount\n     *\n     * @static\n     * @param {IPoint} p1\n     * @param {number} s The amount to scale the point by\n     * @param {IPoint} out If this is specified, the results will be placed into this rather than allocate a new object\n     *\n     * @memberof Point\n     */\n    Point.scale = function (p1, s, out) {\n        if (out) {\n            out.x = p1.x * s;\n            out.y = p1.y * s;\n            return out;\n        }\n        return {\n            x: p1.x * s,\n            y: p1.y * s,\n        };\n    };\n    /**\n     * Makes a new point initialized to {0,0}\n     *\n     * @static\n     * @returns {IPoint} A new point object at {0,0}\n     */\n    Point.zero = function () {\n        return {\n            x: 0,\n            y: 0,\n        };\n    };\n    return Point;\n}());\nexports.Point = Point;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/point.ts\n// module id = 5\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"./bounds\");\n/**\n * Represents a line with a given slope\n */\nvar Line = (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates a new line that passes through the two specified points\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    function Line(p1, p2) {\n        var _this = _super.call(this, 0, 1, 1, 0) || this;\n        _this.setPoints(p1, p2);\n        return _this;\n    }\n    /**\n     * This calculates the distance to a point from the provided line\n     * BUT this ALSO retains the directionality of that distance. So one side of\n     * the line will be positive while the other negative\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.directionTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line, but we won't take the absolute to retain the direction\n        return this.perpendicular.x * vector.x + this.perpendicular.y * vector.y;\n    };\n    /**\n     * This calculates the distance to a point from the provided line\n     *\n     * @param {IPoint} p The Point to see how far from the line we are\n     *\n     * @return {number} The calculated distance to the provided point\n     */\n    Line.prototype.distanceTo = function (p) {\n        // Make a vector from a line point to the indicated point\n        var vector = {\n            x: this.p1.x - p.x,\n            y: this.p1.y - p.y,\n        };\n        // The distance is d = |v . r| where v is a unit perpendicular vector to the\n        // Line\n        return Math.abs(this.perpendicular.x * vector.x +\n            this.perpendicular.y * vector.y);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {Array} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    Line.getClosest = function (lines, p) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(p);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This sets the two endpoints for this line and recalculates the bounds\n     * of the line accordingly\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    Line.prototype.setPoints = function (p1, p2) {\n        this.x = p1.x - 1;\n        this.y = p1.y - 1;\n        this.width = 2;\n        this.height = 2;\n        this.encapsulatePoint(p2);\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        this.slope = dy / dx;\n        this.p1 = p1;\n        this.p2 = p2;\n        this.magnitude = Math.sqrt(dx * dx + dy * dy);\n        this.perpendicular = {\n            x: this.p2.y - this.p1.y,\n            y: -(this.p2.x - this.p1.x),\n        };\n        // Normalize the perpendicular line\n        var mag = Math.sqrt(this.perpendicular.x * this.perpendicular.x +\n            this.perpendicular.y * this.perpendicular.y);\n        this.perpendicular.x /= mag;\n        this.perpendicular.y /= mag;\n    };\n    return Line;\n}(bounds_1.Bounds));\nexports.Line = Line;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/line.ts\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ramda\"\n// module id = 7\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a texture that is located on an atlas\n */\nvar AtlasTexture = (function () {\n    /**\n     * Generates a new atlas texture that points to a specific image resource.\n     *\n     * @param path The path to the image resource to be loaded into the atlas.\n     */\n    function AtlasTexture(path, label) {\n        /** Stores the aspect ratio of the image for quick reference */\n        this.aspectRatio = 1.0;\n        this.imagePath = path;\n        this.label = label;\n        // Let the label keep track of it's rasterization\n        if (label) {\n            this.label.rasterizedLabel = this;\n        }\n    }\n    return AtlasTexture;\n}());\nexports.AtlasTexture = AtlasTexture;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/atlas-texture.ts\n// module id = 8\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FrameInfo = (function () {\n    function FrameInfo() {\n    }\n    /** Contains the time the previous frame started */\n    FrameInfo.lastFrameTime = Date.now();\n    /** Contains a theoretical approximation the next frame will start */\n    FrameInfo.nextFrameTime = Date.now();\n    /** Contains how many frames have been played for a given WebGLSurface context */\n    FrameInfo.framesPlayed = new Map();\n    return FrameInfo;\n}());\nexports.FrameInfo = FrameInfo;\n/**\n * This gets an integer time value that can fit within an attribute. Be aware,\n * this only supports up to 7 digits of the millisecond time.\n */\nfunction getAttributeCurrentTime() {\n    var time = FrameInfo.lastFrameTime / 1E7;\n    return Math.floor((time - Math.floor(time)) * 1E7);\n}\nexports.getAttributeCurrentTime = getAttributeCurrentTime;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/frame-info.ts\n// module id = 9\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Does a linear easing of a value\n *\n * @param {number} t The time elapsed: 0 to d\n * @param {number} s The start value\n * @param {number} c The change in value\n * @param {number} d The duration of the change\n *\n * @returns A number linearly progressing from s to s+c depending on the value of\n *          t in relation to d\n */\nfunction linear(t, s, c, d) {\n    return c * t / d + s;\n}\nexports.linear = linear;\nfunction easeInQuad(t, b, c, d) {\n    return c * (t /= d) * t + b;\n}\nexports.easeInQuad = easeInQuad;\nfunction easeOutQuad(t, b, c, d) {\n    return -c * (t /= d) * (t - 2) + b;\n}\nexports.easeOutQuad = easeOutQuad;\nfunction easeInOutQuad(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t + b;\n    return -c / 2 * ((--t) * (t - 2) - 1) + b;\n}\nexports.easeInOutQuad = easeInOutQuad;\nfunction easeInCubic(t, b, c, d) {\n    return c * (t /= d) * t * t + b;\n}\nexports.easeInCubic = easeInCubic;\nfunction easeOutCubic(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n}\nexports.easeOutCubic = easeOutCubic;\nfunction easeInOutCubic(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t + 2) + b;\n}\nexports.easeInOutCubic = easeInOutCubic;\nfunction easeInQuart(t, b, c, d) {\n    return c * (t /= d) * t * t * t + b;\n}\nexports.easeInQuart = easeInQuart;\nfunction easeOutQuart(t, b, c, d) {\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n}\nexports.easeOutQuart = easeOutQuart;\nfunction easeInOutQuart(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t + b;\n    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n}\nexports.easeInOutQuart = easeInOutQuart;\nfunction easeInQuint(t, b, c, d) {\n    return c * (t /= d) * t * t * t * t + b;\n}\nexports.easeInQuint = easeInQuint;\nfunction easeOutQuint(t, b, c, d) {\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n}\nexports.easeOutQuint = easeOutQuint;\nfunction easeInOutQuint(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return c / 2 * t * t * t * t * t + b;\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n}\nexports.easeInOutQuint = easeInOutQuint;\nfunction easeInSine(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n}\nexports.easeInSine = easeInSine;\nfunction easeOutSine(t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n}\nexports.easeOutSine = easeOutSine;\nfunction easeInOutSine(t, b, c, d) {\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n}\nexports.easeInOutSine = easeInOutSine;\nfunction easeInExpo(t, b, c, d) {\n    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nexports.easeInExpo = easeInExpo;\nfunction easeOutExpo(t, b, c, d) {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nexports.easeOutExpo = easeOutExpo;\nfunction easeInOutExpo(t, b, c, d) {\n    if (t === 0)\n        return b;\n    if (t === d)\n        return b + c;\n    if ((t /= d / 2) < 1)\n        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n}\nexports.easeInOutExpo = easeInOutExpo;\nfunction easeInCirc(t, b, c, d) {\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n}\nexports.easeInCirc = easeInCirc;\nfunction easeOutCirc(t, b, c, d) {\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n}\nexports.easeOutCirc = easeOutCirc;\nfunction easeInOutCirc(t, b, c, d) {\n    if ((t /= d / 2) < 1)\n        return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n}\nexports.easeInOutCirc = easeInOutCirc;\nfunction easeInElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n}\nexports.easeInElastic = easeInElastic;\nfunction easeOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d) === 1)\n        return b + c;\n    if (!p)\n        p = d * .3;\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n}\nexports.easeOutElastic = easeOutElastic;\nfunction easeInOutElastic(t, b, c, d) {\n    var s = 1.70158;\n    var p = 0;\n    var a = c;\n    if (t === 0)\n        return b;\n    if ((t /= d / 2) === 2)\n        return b + c;\n    if (!p)\n        p = d * (.3 * 1.5);\n    if (a < Math.abs(c)) {\n        a = c;\n        s = p / 4;\n    }\n    else {\n        s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    if (t < 1)\n        return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n}\nexports.easeInOutElastic = easeInOutElastic;\nfunction easeInBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n}\nexports.easeInBack = easeInBack;\nfunction easeOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n}\nexports.easeOutBack = easeOutBack;\nfunction easeInOutBack(t, b, c, d, s) {\n    if (s === undefined)\n        s = 1.70158;\n    if ((t /= d / 2) < 1)\n        return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n}\nexports.easeInOutBack = easeInOutBack;\nfunction easeInBounce(t, b, c, d) {\n    return c - easeOutBounce(d - t, 0, c, d) + b;\n}\nexports.easeInBounce = easeInBounce;\nfunction easeOutBounce(t, b, c, d) {\n    if ((t /= d) < (1 / 2.75)) {\n        return c * (7.5625 * t * t) + b;\n    }\n    else if (t < (2 / 2.75)) {\n        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\n    }\n    else if (t < (2.5 / 2.75)) {\n        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\n    }\n    else {\n        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\n    }\n}\nexports.easeOutBounce = easeOutBounce;\nfunction easeInOutBounce(t, b, c, d) {\n    if (t < d / 2)\n        return easeInBounce(t * 2, 0, c, d) * .5 + b;\n    return easeOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b;\n}\nexports.easeInOutBounce = easeInOutBounce;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/easing.ts\n// module id = 10\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar point_1 = require(\"../primitives/point\");\nvar easing_1 = require(\"./easing\");\n/**\n * This enum is just a common way to define interpolation types\n */\nvar InterpolationMethod;\n(function (InterpolationMethod) {\n    InterpolationMethod[InterpolationMethod[\"BEZIER2\"] = 0] = \"BEZIER2\";\n    InterpolationMethod[InterpolationMethod[\"BEZIER3\"] = 1] = \"BEZIER3\";\n    InterpolationMethod[InterpolationMethod[\"CIRCULAR\"] = 2] = \"CIRCULAR\";\n})(InterpolationMethod = exports.InterpolationMethod || (exports.InterpolationMethod = {}));\n/**\n * This calculates a quadratic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier2(t, p1, p2, c1) {\n    var t2 = t * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    return {\n        x: p1.x * mt2 + c1.x * 2 * mt * t + p2.x * t2,\n        y: p1.y * mt2 + c1.y * 2 * mt * t + p2.y * t2,\n    };\n}\nexports.bezier2 = bezier2;\n/**\n * This calculates a cubic bezier curve.\n *\n * We use specific bezier curve implementations for low degree curves as it is\n * much much faster to calculate.\n *\n * @param {number} t The 0 - 1 time interval for the part of the curve we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The first control point of the curve\n * @param {IPoint} c2 The second control point of the curve\n *\n * @returns {IPoint} The calculated point on the curve for the provided time interval\n */\nfunction bezier3(t, p1, p2, c1, c2) {\n    var t2 = t * t;\n    var t3 = t2 * t;\n    var mt = 1 - t;\n    var mt2 = mt * mt;\n    var mt3 = mt2 * mt;\n    return {\n        x: p1.x * mt3 + 3 * c1.x * mt2 * t + 3 * c2.x * mt * t2 + p2.x * t3,\n        y: p1.y * mt3 + 3 * c1.y * mt2 * t + 3 * c2.y * mt * t2 + p2.y * t3,\n    };\n}\nexports.bezier3 = bezier3;\n/**\n * This calculates a point along a path defined as a circular path which is a\n * path moving along the edge of a circle from one point to the next. This will\n * even allow for moving along a circle with a growing radius.\n *\n * @param {number} t The 0 - 1 time interval for the part of the path we desire\n * @param {IPoint} p1 The First end point of the curve\n * @param {IPoint} p2 The second end point of the curve\n * @param {IPoint} c1 The control point, or more importantly, the center of the circle\n * @param {EasingMethod} radiusEasing Default easing for the radius growing is linear.\n *                                    Insert a custom easing method to change this.\n *\n * @returns {IPoint}\n */\nfunction circular(t, p1, p2, c1, radiusEasing) {\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(c1, p1);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(c1, p2);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Ensure our theta's are definitely between 0 to Math.PI * 2 after the atan\n    // Calculation\n    if (theta1 < 0)\n        theta1 += Math.PI * 2;\n    if (theta2 < 0)\n        theta2 += Math.PI * 2;\n    var dTheta = theta2 - theta1;\n    // We ALWAYS want our path to be the shortest around the circle\n    if (dTheta > Math.PI) {\n        dTheta = theta1 - theta2;\n    }\n    // We use this to calculate how far we are between the two points in radians\n    // Based on the time parameter provided for the interpolation\n    dTheta *= t;\n    // We must have the radial distance of both points to properly calculate\n    // An easing between the two radii\n    var radius1 = point_1.Point.getDistance(p1, c1);\n    var radius2 = point_1.Point.getDistance(p2, c1);\n    // We control how the radius eases out for the path, which is determined by\n    // The easing method, otherwise, it just linearly radiates out\n    var radius = (radiusEasing || easing_1.linear)(t, radius1, radius2 - radius1, 1.0);\n    return {\n        x: Math.cos(theta1 + dTheta) * radius + c1.x,\n        y: Math.sin(theta1 + dTheta) * radius + c1.y,\n    };\n}\nexports.circular = circular;\nexports.pickInterpolation = (_a = {},\n    _a[InterpolationMethod.BEZIER2] = bezier2,\n    _a[InterpolationMethod.BEZIER3] = bezier3,\n    _a[InterpolationMethod.CIRCULAR] = circular,\n    _a);\nvar _a;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/interpolation.ts\n// module id = 11\n// module chunks = 0","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3_color_1 = require(\"d3-color\");\nvar three_1 = require(\"three\");\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar pack_node_1 = require(\"../../util/pack-node\");\nvar label_1 = require(\"../shape/label\");\nvar atlas_texture_1 = require(\"./atlas-texture\");\nvar debug = require('debug')('webgl-surface:Atlas');\nvar debugLabels = require('debug')('webgl-surface:Labels');\nvar ZERO_IMAGE = {\n    atlasBL: { x: 0, y: 0 },\n    atlasBR: { x: 0, y: 0 },\n    atlasTL: { x: 0, y: 0 },\n    atlasTR: { x: 0, y: 0 },\n    label: new label_1.Label({ text: ' ' }),\n    pixelHeight: 0,\n    pixelWidth: 0,\n};\n/**\n * Defines a manager of atlas', which includes generating the atlas and producing\n * textures defining those pieces of atlas.\n */\nvar AtlasManager = (function () {\n    /**\n     * Generates a new manager for atlas'. This will create and destroy atlas' and\n     * ensure they have the correct settings applied. A manager will also aid in\n     * packing images into the atlas indicated.\n     *\n     * @param {number} width The width of all atlas' generated\n     * @param {number} height The height of all atlas' generated\n     */\n    function AtlasManager(width, height) {\n        /** Gives a reference of all of the images loaded for the atlas */\n        this.atlasImages = {};\n        /** Stores the current mapping of the atlas */\n        this.atlasMap = {};\n        /** Stores all of the textures that are our atlases */\n        this.atlasTexture = {};\n        this.textureWidth = width;\n        this.textureHeight = height;\n    }\n    /**\n     * Atlas' must be created from scratch to update them. In order to properly\n     * update an existing one, you must destroy it then recreate it again.\n     * This is from not knowing how to update a texture via three js.\n     *\n     * @param atlasName The unique name of the atlas so it can be retrieved/referenced easily\n     * @param images The images with their image path set to be loaded into the atlas.\n     *               Images that keep an atlas ID of null indicates the image did not load\n     *               correctly\n     *\n     * @return {Texture} The Threejs texture that is created as our atlas. The images injected\n     *                   into the texture will be populated with the atlas'\n     */\n    AtlasManager.prototype.createAtlas = function (atlasName, images, colors) {\n        return __awaiter(this, void 0, void 0, function () {\n            var atlasMap, canvas, _i, images_1, image, image, texture, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        atlasMap = new pack_node_1.PackNode(0, 0, this.textureWidth, this.textureHeight);\n                        // Create the mapping element for the new atlas so we can track insertions / deletions\n                        this.atlasMap[atlasName] = atlasMap;\n                        // Make a listing of images that is within the atlas\n                        this.atlasImages[atlasName] = [];\n                        canvas = document.createElement('canvas').getContext('2d');\n                        // Size the canvas to the atlas size\n                        canvas.canvas.width = this.textureWidth;\n                        canvas.canvas.height = this.textureHeight;\n                        if (!images) return [3 /*break*/, 4];\n                        _i = 0, images_1 = images;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < images_1.length)) return [3 /*break*/, 4];\n                        image = images_1[_i];\n                        return [4 /*yield*/, this.draw(image, atlasName, canvas)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        if (!colors) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.drawColors(colors, atlasName, canvas)];\n                    case 5:\n                        image = _b.sent();\n                        // Add the dummy texture info as an image to our list of images\n                        if (image) {\n                            this.atlasImages[atlasName].push(image);\n                        }\n                        _b.label = 6;\n                    case 6:\n                        texture = new three_1.Texture(canvas.canvas);\n                        texture.premultiplyAlpha = true;\n                        texture.generateMipmaps = true;\n                        // Store the texture as the atlas.\n                        this.atlasTexture[atlasName] = texture;\n                        // Store the images as images within the atlas\n                        if (images) {\n                            (_a = this.atlasImages[atlasName]).push.apply(_a, images);\n                        }\n                        debug('Atlas Created-> texture: %o mapping: %o images: %o', texture, atlasMap, images);\n                        return [2 /*return*/, texture];\n                }\n            });\n        });\n    };\n    /**\n     * Disposes of the resources the atlas held and makes the atlas invalid for use\n     *\n     * @param atlasName\n     */\n    AtlasManager.prototype.destroyAtlas = function (atlasName) {\n        if (this.atlasTexture[atlasName]) {\n            this.atlasTexture[atlasName].dispose();\n            this.atlasTexture[atlasName] = null;\n        }\n        if (this.atlasMap[atlasName]) {\n            this.atlasMap[atlasName].destroy();\n            this.atlasMap[atlasName] = null;\n        }\n        if (this.atlasImages[atlasName]) {\n            var none_1 = { x: 0, y: 0 };\n            this.atlasImages[atlasName].forEach(function (image) {\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                image.pixelHeight = 0;\n                image.atlasBL = none_1;\n                image.atlasBR = none_1;\n                image.atlasTL = none_1;\n                image.atlasTR = none_1;\n            });\n            this.atlasImages[atlasName] = null;\n        }\n    };\n    AtlasManager.prototype.isValidImage = function (image) {\n        var isValid = false;\n        if (image && (image.imagePath || (image.label && image.label.text))) {\n            if (image.pixelWidth && image.pixelHeight) {\n                isValid = true;\n            }\n        }\n        return isValid;\n    };\n    AtlasManager.prototype.setDefaultImage = function (image, atlasName) {\n        image = Object.assign(image, ZERO_IMAGE, { atlasReferenceID: atlasName });\n        return image;\n    };\n    /**\n     * This loads, packs, and draws the indicated image into the specified canvas\n     * using the metrics that exists for the specified atlas.\n     *\n     * @param image The image who should have it's image path loaded\n     * @param atlasName The name of the atlas to make the packing work\n     * @param canvas The canvas we will be drawing into to generate the complete image\n     *\n     * @return {Promise<boolean>} Promise that resolves to if the image successfully was drawn or not\n     */\n    AtlasManager.prototype.draw = function (image, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var loadedImage, rect, dimensions, node, insertedNode, ux, uy, uw, uh, atlasDimensions;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Validate the index\n                        if (!this.atlasMap[atlasName]) {\n                            debug('Can not load image, invalid Atlas Name: %o for atlasMaps: %o', atlasName, this.atlasMap);\n                            return [2 /*return*/, false];\n                        }\n                        return [4 /*yield*/, this.loadImage(image)];\n                    case 1:\n                        loadedImage = _a.sent();\n                        // Make sure at this point the image knows it is not affiliated with an atlas\n                        // If something goes wrong with loading or insertting this image, then a null\n                        // Atlas value will indicate the image can not be used appropriately\n                        image.atlasReferenceID = null;\n                        // Only a non-null image means the image loaded correctly\n                        if (loadedImage && this.isValidImage(image)) {\n                            debug('Image loaded: %o', image.imagePath);\n                            rect = new bounds_1.Bounds(0, image.pixelWidth, image.pixelHeight, 0);\n                            dimensions = {\n                                first: image,\n                                second: rect,\n                            };\n                            // Auto add a buffer in\n                            dimensions.second.width += 1;\n                            dimensions.second.height += 1;\n                            node = this.atlasMap[atlasName];\n                            insertedNode = node.insert(dimensions);\n                            // If the result was NULL we did not successfully insert the image into any map\n                            if (insertedNode) {\n                                debug('Atlas location determined: %o', insertedNode);\n                                if (image.label) {\n                                    debugLabels('Atlas location determined. PackNode: %o Dimensions: %o', insertedNode, dimensions);\n                                }\n                                // Apply the image to the node\n                                insertedNode.nodeImage = image;\n                                ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                                uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                                uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                                uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                                debugLabels('uy is %o', uy);\n                                atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                                image.atlasReferenceID = atlasName;\n                                image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                                image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                                image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                                // Now draw the image to the indicated canvas\n                                canvas.drawImage(loadedImage, insertedNode.nodeDimensions.x, insertedNode.nodeDimensions.y);\n                                // We have finished inserting\n                                return [2 /*return*/, true];\n                            }\n                            else {\n                                // Log an error\n                                console.error(\"Could not fit image into atlas \" + image.imagePath);\n                                image = this.setDefaultImage(image, atlasName);\n                                return [2 /*return*/, false];\n                            }\n                        }\n                        else {\n                            // Log an error and load a default image\n                            console.error(\"Could not load image \" + image.imagePath);\n                            image = this.setDefaultImage(image, atlasName);\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This renders a list of colors to the canvas. This using the same packing\n     * algorithm as any image so the rendering is placed correctly or determines\n     * if enough space is not available.\n     *\n     * @param {AtlasColor[]} colors The list of colors to be rendered to the atlas\n     * @param {string} atlasName The name of the atlas being rendered to\n     * @param {CanvasRenderingContext2D} canvas The canvas of the atlas being rendered to\n     *\n     * @returns {Promise<boolean>} Resolves to true if the operation was successful\n     */\n    AtlasManager.prototype.drawColors = function (colors, atlasName, canvas) {\n        return __awaiter(this, void 0, void 0, function () {\n            var colorWidth, colorHeight, maxPerRow, rowWidth, rowCount, colCount, renderHeight, dimensions, node, insertedNode, image, ux, uy, uw, uh, atlasDimensions, renderSpace, startX, startY, nextX, nextY, beginX, beginY, col, row, _i, colors_1, color, _a, r, g, b;\n            return __generator(this, function (_b) {\n                debug('Finding space for colors on the atlas: %o', colors);\n                colorWidth = 2;\n                colorHeight = 2;\n                maxPerRow = 1024 / colorWidth;\n                rowWidth = Math.min(this.textureWidth, maxPerRow * colorWidth);\n                rowCount = Math.ceil((colors.length * colorWidth) / rowWidth);\n                colCount = Math.ceil(rowWidth / colorWidth);\n                renderHeight = rowCount * colorHeight;\n                dimensions = {\n                    // Since the algorithm requires something to fill this slot, just make a\n                    // Dummy object\n                    first: new atlas_texture_1.AtlasTexture(null, null),\n                    // Set the dimensions we calculated for the space our colors will take up\n                    // Within the atlas\n                    second: new bounds_1.Bounds(0, rowWidth, renderHeight, 0),\n                };\n                // Auto add a buffer in\n                dimensions.second.width += 1;\n                dimensions.second.height += 1;\n                node = this.atlasMap[atlasName];\n                insertedNode = node.insert(dimensions);\n                // If the result was NULL we did not successfully insert the image into any map\n                if (insertedNode) {\n                    debug('Atlas location determined for colors: %o', insertedNode);\n                    image = insertedNode.nodeImage = dimensions.first;\n                    ux = insertedNode.nodeDimensions.x / this.textureWidth;\n                    uy = insertedNode.nodeDimensions.y / this.textureHeight;\n                    uw = insertedNode.nodeDimensions.width / this.textureWidth;\n                    uh = insertedNode.nodeDimensions.height / this.textureHeight;\n                    atlasDimensions = new bounds_1.Bounds(ux, ux + uw, 1.0 - uy, 1.0 - (uy + uh));\n                    image.atlasReferenceID = atlasName;\n                    image.atlasBL = { x: atlasDimensions.x, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasBR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y - atlasDimensions.height };\n                    image.atlasTL = { x: atlasDimensions.x, y: atlasDimensions.y };\n                    image.atlasTR = { x: atlasDimensions.x + atlasDimensions.width, y: atlasDimensions.y };\n                    renderSpace = insertedNode.nodeDimensions;\n                    startX = renderSpace.x;\n                    startY = renderSpace.y;\n                    nextX = colorWidth / this.textureWidth;\n                    nextY = -colorHeight / this.textureHeight;\n                    beginX = (startX / this.textureWidth) + (nextX / 2.0);\n                    beginY = 1.0 - (startY / this.textureHeight) + (nextY / 2.0);\n                    col = 0;\n                    row = 0;\n                    // Loop through each color, establish metrics, draw to the atlas\n                    for (_i = 0, colors_1 = colors; _i < colors_1.length; _i++) {\n                        color = colors_1[_i];\n                        // Staore the info needed to make the color referenceable again\n                        color.atlasReferenceID = atlasName;\n                        color.colorIndex = col + (row * colCount);\n                        color.colorsPerRow = colCount;\n                        // The location of the middle of the first color\n                        color.firstColor = {\n                            x: beginX,\n                            y: beginY,\n                        };\n                        color.nextColor = {\n                            x: nextX,\n                            y: nextY,\n                        };\n                        _a = color.color, r = _a.r, g = _a.g, b = _a.b;\n                        // Draw the color to the canvas\n                        canvas.fillStyle = \"rgba(\" + Math.round(r * 255.0) + \", \" + Math.round(g * 255.0) + \", \" + Math.round(b * 255.0) + \", \" + color.opacity + \")\";\n                        canvas.fillRect(col * colorWidth + startX, row * colorHeight + startY, colorWidth, colorHeight);\n                        col++;\n                        if (col === colCount) {\n                            col = 0;\n                            row++;\n                        }\n                    }\n                    // We have finished inserting\n                    return [2 /*return*/, image];\n                }\n                else {\n                    // Log an error\n                    throw new Error('Could not fit colors into atlas');\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Retrieves the threejs texture for the atlas\n     *\n     * @param atlasName The identifier of the atlas\n     */\n    AtlasManager.prototype.getAtlasTexture = function (atlasName) {\n        return this.atlasTexture[atlasName];\n    };\n    /**\n     * This reads the input path and loads the image specified by the path\n     *\n     * @param {AtlasTexture} texture This is an atlas texture with the path set\n     *\n     * @return {Promise<HTMLImageElement>} A promise to resolve to the loaded image\n     *                                     or null if there was an error\n     */\n    AtlasManager.prototype.loadImage = function (texture) {\n        if (texture.imagePath) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    texture.pixelWidth = image.width;\n                    texture.pixelHeight = image.height;\n                    texture.aspectRatio = image.width / image.height;\n                    resolve(image);\n                };\n                image.onerror = function () {\n                    resolve(null);\n                };\n                image.src = texture.imagePath;\n            });\n        }\n        else if (texture.label) {\n            return new Promise(function (resolve, reject) {\n                var label = texture.label;\n                var labelSize = label.getSize();\n                var canvas = document.createElement('canvas');\n                var ctx = canvas.getContext('2d');\n                // Set the dimensions of the canvas/texture space we will be using to rasterize\n                // The label. Use the label's rasterization controls to aid in rendering the label\n                canvas.width = labelSize.width + texture.label.rasterizationOffset.x;\n                canvas.height = labelSize.height;\n                debug('label X %o', texture.label.rasterizationOffset.x);\n                if (ctx) {\n                    var fontSize = label.fontSize;\n                    var color = d3_color_1.rgb(label.color.base.color.r * 255, label.color.base.color.g * 255, label.color.base.color.b * 255, label.color.base.opacity);\n                    ctx.font = label.makeCSSFont(fontSize);\n                    ctx.textAlign = label.textAlign;\n                    ctx.textBaseline = label.textBaseline;\n                    ctx.fillStyle = color.toString();\n                    // Render the label to the canvas/texture space. This utilizes the label's\n                    // Rasterization metrics to aid in getting a clean render.\n                    ctx.fillText(label.text, texture.label.rasterizationOffset.x, texture.label.rasterizationOffset.y);\n                    var image_1 = new Image();\n                    image_1.onload = function () {\n                        // Here we use the canvas dimensions and NOT the image dimensions\n                        // As the image dimensions are unreliable here when setting the src\n                        // To a data url\n                        texture.pixelWidth = image_1.width;\n                        texture.pixelHeight = image_1.height;\n                        texture.aspectRatio = image_1.width / image_1.height;\n                        debugLabels('Applying size based on rasterization to the Label: w: %o h: %o', image_1.width, image_1.height);\n                        label.setSize({\n                            height: image_1.height,\n                            width: image_1.width,\n                        });\n                        resolve(image_1);\n                    };\n                    image_1.onerror = function () {\n                        resolve(null);\n                    };\n                    image_1.src = canvas.toDataURL('image/png');\n                }\n            });\n        }\n        return Promise.resolve(null);\n    };\n    return AtlasManager;\n}());\nexports.AtlasManager = AtlasManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/atlas-manager.ts\n// module id = 12\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n/**\n * This is used specifically by the atlas manager to aid in packing\n * in textures within an area. This will guarantee boundaries of textures are\n * not violated and provide proper feedback for where to draw a given image\n */\nvar PackNode = (function () {\n    function PackNode(x, y, width, height) {\n        this.child = [null, null];\n        this.isLeaf = true;\n        this.nodeImage = null;\n        this.nodeDimensions = new bounds_1.Bounds(x, x + width, y, y - height);\n    }\n    /**\n     * Deletes all of the sub nodes in this Mapping, thus clearing up memory usage\n     */\n    PackNode.prototype.destroy = function () {\n        this.nodeImage = null;\n        if (this.child[0]) {\n            this.child[0].destroy();\n        }\n        if (this.child[1]) {\n            this.child[1].destroy();\n        }\n        this.child[0] = undefined;\n        this.child[1] = undefined;\n    };\n    /**\n     * Indicates if there is a child\n     */\n    PackNode.prototype.hasChild = function () {\n        if (this.child[0] && !this.child[0].nodeImage) {\n            return !this.child[0].isLeaf;\n        }\n        if (this.child[1] && !this.child[1].nodeImage) {\n            return !this.child[1].isLeaf;\n        }\n        return false;\n    };\n    /**\n     * Inserts images into our mapping, fitting them appropriately\n     */\n    PackNode.prototype.insert = function (image) {\n        if (!this.isLeaf) {\n            // Try inserting into first child\n            var newNode = this.child[0].insert(image);\n            if (newNode !== null) {\n                return newNode;\n            }\n            // No room in first so insert into second\n            return this.child[1].insert(image);\n        }\n        else {\n            // If there's already an image here, return\n            if (this.nodeImage) {\n                return null;\n            }\n            // Check the fit status of the image in this nodes rectangle space\n            var fitFlag = this.nodeDimensions.fits(image.second);\n            // If we're too small, return null indicating can not fit\n            if (fitFlag === 0) {\n                return null;\n            }\n            // If we're just right, accept\n            if (fitFlag === 1) {\n                return this;\n            }\n            // Otherwise, gotta split this node and create some leaves\n            this.isLeaf = false;\n            // Get the image width\n            var imgWidth = image.second.width;\n            var imgHeight = image.second.height;\n            // Decide which way to split\n            var dWidth = this.nodeDimensions.width - imgWidth;\n            var dHeight = this.nodeDimensions.height - image.second.height;\n            if (dWidth > dHeight) {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, imgWidth, this.nodeDimensions.height);\n                this.child[1] = new PackNode(this.nodeDimensions.x + imgWidth, this.nodeDimensions.y, dWidth, this.nodeDimensions.height);\n            }\n            else {\n                this.child[0] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y, this.nodeDimensions.width, imgHeight);\n                this.child[1] = new PackNode(this.nodeDimensions.x, this.nodeDimensions.y + imgHeight, this.nodeDimensions.width, dHeight);\n            }\n        }\n        // Insert into first child we created\n        return this.child[0].insert(image);\n    };\n    /**\n     * Removes the image from the mapping and tries to open up as much space as possible.\n     *\n     * @param {AtlasTexture} image The image to insert into the\n     */\n    PackNode.prototype.remove = function (image) {\n        if (!this.isLeaf) {\n            // Try removing from first child\n            var removed = this.child[0].remove(image);\n            if (removed) {\n                return true;\n            }\n            // Try remove from second\n            removed = this.child[1].remove(image);\n            if (!this.child[0].hasChild()) {\n                if (!this.child[1].hasChild()) {\n                    this.child[0] = null;\n                    this.child[1] = null;\n                }\n            }\n            return removed;\n        }\n        else {\n            if (this.nodeImage === image) {\n                this.nodeImage = null;\n                image.atlasReferenceID = null;\n                image.pixelWidth = 0;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    return PackNode;\n}());\nexports.PackNode = PackNode;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/pack-node.ts\n// module id = 13\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = require(\"ramda\");\nvar rotateable_quad_1 = require(\"../../primitives/rotateable-quad\");\nvar sprite_1 = require(\"../texture/sprite\");\nvar measurement = new sprite_1.Sprite(200, 200, 1, 1);\nvar Label = (function (_super) {\n    __extends(Label, _super);\n    /**\n     * Creates an instance of Label.\n     *\n     * @param {Partial<Label<T>>} [options={}]\n     */\n    function Label(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, { x: 0, y: 1 }, { width: 1, height: 1 }, 0, rotateable_quad_1.AnchorPosition.TopLeft) || this;\n        _this.depth = 40;\n        _this.direction = 'inherit';\n        _this.font = 'serif';\n        _this.fontSize = 10;\n        _this.fontWeight = 400;\n        _this.maxWidth = undefined;\n        _this.text = '';\n        _this.id = '';\n        _this.textAlign = 'start';\n        _this.textBaseline = 'alphabetic';\n        _this.zoomable = false;\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to offset the rasterization if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationOffset = { x: 20, y: 0 };\n        /**\n         * This contains an adjustment to aid in the rasterization process. Getting\n         * reliable dimensions for fonts and text can be incredibly challenging,\n         * thus, this allows you to pad the rasterization space if you get pieces of\n         * the label cut off.\n         */\n        _this.rasterizationPadding = { width: 0, height: 0 };\n        // Set props\n        Object.assign(_this, options);\n        // Make sure our dimensions are set\n        _this.setFontSize(options.fontSize || 12);\n        return _this;\n    }\n    Object.defineProperty(Label.prototype, \"baseLabel\", {\n        get: function () {\n            return this._baseLabel;\n        },\n        set: function (value) {\n            this._baseLabel = value;\n            this.text = value.text;\n            this.fontSize = value.fontSize;\n            this.font = value.font;\n            this.textAlign = value.textAlign;\n            this.textBaseline = value.textBaseline;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Label.prototype, \"rasterizedLabel\", {\n        /**\n         * This getter ensures the rasterized label retrieved is either this labels own rasterization\n         * or from a base.\n         */\n        get: function () {\n            if (this.baseLabel) {\n                return this.baseLabel.rasterizedLabel;\n            }\n            return this._rasterizedLabel;\n        },\n        set: function (value) {\n            this._rasterizedLabel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies all of the properties of a label and makes this label use them\n     *\n     * @param {Label} label The labels whose properties we wish to copy\n     */\n    Label.prototype.copyLabel = function (label) {\n        // Assign the properties of the other label to this\n        // Specifically, ONLY label properties\n        Object.assign(this, ramda_1.omit(['x', 'y', 'width', 'height'], label));\n        // Use this to set the text to make sure all of the metrics are re-calculated\n        this.setText(label.text);\n    };\n    /**\n     * This gets the actual text this label is capable of rendering\n     */\n    Label.prototype.getText = function () {\n        if (this._baseLabel) {\n            return this._baseLabel.getText();\n        }\n        return this.text;\n    };\n    /**\n     * Takes all of the current settings and makes a CSS font string\n     */\n    Label.prototype.makeCSSFont = function (fontSize) {\n        return this.fontWeight + \" \" + (fontSize || this.fontSize) + \"px \" + this.font;\n    };\n    /**\n     * Change the position this text is rendered to\n     *\n     * @param x X world coordinate\n     * @param y Y world coordinate\n     */\n    Label.prototype.position = function (x, y) {\n        this.x = x;\n        this.y = y;\n    };\n    /**\n     * This sets the font size for the label based on the base text dimensions\n     *\n     * @param {number} fontSize\n     */\n    Label.prototype.setFontSize = function (fontSize) {\n        var lbl = this.getText();\n        var size = this.getSize();\n        var width = size.width;\n        var height = size.height;\n        if (this.baseLabel) {\n            var baseSize = this.baseLabel.getSize();\n            var scale = fontSize / this.baseLabel.fontSize;\n            height = baseSize.height * scale;\n            width = baseSize.width * scale;\n        }\n        else {\n            measurement.context.font = this.makeCSSFont();\n            var size_1 = measurement.context.measureText(lbl);\n            // Set our properties based on the calculated size\n            height = fontSize;\n            width = size_1.width;\n        }\n        this.fontSize = fontSize;\n        this.setSize({ width: width, height: height });\n    };\n    /**\n     * Change the text and the calculated bounding box for this label\n     */\n    Label.prototype.setText = function (lbl) {\n        this.text = lbl;\n        this.setFontSize(this.fontSize);\n    };\n    Label.prototype.update = function () {\n        this.setFontSize(this.fontSize);\n        _super.prototype.update.call(this);\n    };\n    return Label;\n}(rotateable_quad_1.RotateableQuad));\nexports.Label = Label;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/label.ts\n// module id = 14\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar bounds_1 = require(\"./bounds\");\nvar AnchorPosition;\n(function (AnchorPosition) {\n    AnchorPosition[AnchorPosition[\"BottomLeft\"] = 0] = \"BottomLeft\";\n    AnchorPosition[AnchorPosition[\"BottomRight\"] = 1] = \"BottomRight\";\n    AnchorPosition[AnchorPosition[\"Custom\"] = 2] = \"Custom\";\n    AnchorPosition[AnchorPosition[\"Middle\"] = 3] = \"Middle\";\n    AnchorPosition[AnchorPosition[\"MiddleBottom\"] = 4] = \"MiddleBottom\";\n    AnchorPosition[AnchorPosition[\"MiddleLeft\"] = 5] = \"MiddleLeft\";\n    AnchorPosition[AnchorPosition[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    AnchorPosition[AnchorPosition[\"MiddleTop\"] = 7] = \"MiddleTop\";\n    AnchorPosition[AnchorPosition[\"TopLeft\"] = 8] = \"TopLeft\";\n    AnchorPosition[AnchorPosition[\"TopRight\"] = 9] = \"TopRight\";\n})(AnchorPosition = exports.AnchorPosition || (exports.AnchorPosition = {}));\nvar anchorCalculations = (_a = {},\n    _a[AnchorPosition.BottomLeft] = function (quad) { return ({\n        x: 0,\n        y: 0,\n    }); },\n    _a[AnchorPosition.BottomRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: 0,\n    }); },\n    _a[AnchorPosition.Custom] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.Middle] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleBottom] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: 0,\n    }); },\n    _a[AnchorPosition.MiddleLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height / 2,\n    }); },\n    _a[AnchorPosition.MiddleTop] = function (quad) { return ({\n        x: quad.getSize().width / 2,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopLeft] = function (quad) { return ({\n        x: 0,\n        y: quad.getSize().height,\n    }); },\n    _a[AnchorPosition.TopRight] = function (quad) { return ({\n        x: quad.getSize().width,\n        y: quad.getSize().height,\n    }); },\n    _a);\nvar RotateableQuad = (function (_super) {\n    __extends(RotateableQuad, _super);\n    /**\n     * Generates a quad\n     *\n     * @param {IPoint} location The location of the quad (it's anchorpoint will be placed here)\n     * @param {number} width The width of the quad\n     * @param {number} height The height of the quad\n     * @param {AnchorPosition} anchor The anchor location of the quad.\n     *                                Location and rotation will be relative to this.\n     */\n    function RotateableQuad(location, size, rotation, anchor) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        // Apply our properties\n        _this.setSize(size);\n        _this.setAnchor(anchor);\n        _this.setLocation(location);\n        _this.setRotation(rotation);\n        // Update the transform and the corner vertices\n        _this.update();\n        return _this;\n    }\n    /**\n     * @private\n     * Recalculates this anchor position based on the anchor type\n     *\n     * @param {AnchorPosition} anchor\n     */\n    RotateableQuad.prototype.calculateAnchor = function (anchor) {\n        this.anchor = anchorCalculations[anchor](this);\n    };\n    /**\n     * Get the base size of the quad\n     *\n     * @returns {ISize} The base size of this quad\n     */\n    RotateableQuad.prototype.getSize = function () {\n        return this.size;\n    };\n    /**\n     * Sets the specified anchor position on the quad\n     *\n     * @param {AnchorPosition} anchor This specifies an auto calculated position for the anchor\n     * @param {IPoint} custom If specified, will set a custom anchor location rather\n     *                        than the calculated version.\n     */\n    RotateableQuad.prototype.setAnchor = function (anchor, custom) {\n        if (anchor === void 0) { anchor = AnchorPosition.Middle; }\n        this.anchorType = anchor;\n        // Apply the custom position if present\n        if (custom) {\n            this.anchorType = AnchorPosition.Custom;\n            this.anchor = custom;\n            return;\n        }\n        this.calculateAnchor(anchor);\n    };\n    RotateableQuad.prototype.getAnchor = function () {\n        return this.anchor;\n    };\n    RotateableQuad.prototype.getAnchorType = function () {\n        return this.anchorType;\n    };\n    /**\n     * This sets the location of this quad to a given position where the anchor\n     * point will be located on top of the location provided.\n     *\n     * @param {IPoint} location The location to place the quad\n     */\n    RotateableQuad.prototype.setLocation = function (location) {\n        this.location = location;\n    };\n    RotateableQuad.prototype.getLocation = function () {\n        return this.location;\n    };\n    /**\n     * Sets the rotation of this quad, in radians, rotated around the anchor point.\n     *\n     * @param {number} rotation The rotation of the quad\n     */\n    RotateableQuad.prototype.setRotation = function (rotation) {\n        this.rotation = rotation;\n    };\n    /**\n     * get Rotation\n     */\n    RotateableQuad.prototype.getRotation = function () {\n        return this.rotation;\n    };\n    /**\n     * get direction as a point\n     */\n    RotateableQuad.prototype.getDirection = function () {\n        var angle = this.rotation;\n        return {\n            x: Math.cos(angle),\n            y: Math.sin(angle),\n        };\n    };\n    /**\n     * Applies the size to the base\n     *\n     * @param {ISize} size The size of the base quad\n     */\n    RotateableQuad.prototype.setSize = function (size) {\n        this.size = size;\n        this.base = [\n            new three_1.Vector4(0, size.height, 0, 1),\n            new three_1.Vector4(size.width, size.height, 0, 1),\n            new three_1.Vector4(0, 0, 0, 1),\n            new three_1.Vector4(size.width, 0, 0, 1),\n        ];\n        if (this.anchorType) {\n            this.calculateAnchor(this.anchorType);\n        }\n    };\n    /**\n     * This re-calculates the transform for this quad and applies the transform to\n     * the corners.\n     */\n    RotateableQuad.prototype.update = function () {\n        // Calculate the pieces of the transformation\n        var anchorMat = new three_1.Matrix4().makeTranslation(this.anchor.x, -this.anchor.y, 0);\n        var rotationMat = new three_1.Matrix4().makeRotationZ(this.rotation);\n        var locationMat = new three_1.Matrix4().makeTranslation(this.location.x, this.location.y, 0);\n        // Compose the transform based on the pieces and apply them\n        // In the proper compositing order\n        this.transform = new three_1.Matrix4()\n            .multiply(locationMat)\n            .multiply(rotationMat)\n            .multiply(anchorMat);\n        // Apply the transform to all of our base vertices\n        this.TL = this.base[0].clone().applyMatrix4(this.transform);\n        this.TR = this.base[1].clone().applyMatrix4(this.transform);\n        this.BL = this.base[2].clone().applyMatrix4(this.transform);\n        this.BR = this.base[3].clone().applyMatrix4(this.transform);\n        // Update the bounds of this object\n        this.x = this.TL.x;\n        this.y = this.TL.y;\n        this.width = 1;\n        this.height = 1;\n        this.encapsulatePoints([this.TR, this.BL, this.BR]);\n    };\n    return RotateableQuad;\n}(bounds_1.Bounds));\nexports.RotateableQuad = RotateableQuad;\nvar _a;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/rotateable-quad.ts\n// module id = 15\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A canvas element wrapper that aids in tracking a canvas element along with\n * content scaling properties.\n *\n * @class Sprite\n */\nvar Sprite = (function () {\n    //\n    // Ctor at the top below props\n    //\n    /**\n     * Creates an instance of Sprite.\n     *\n     * @param w             The width of the context to create\n     * @param h             The height of the context to create\n     * @param contentScaleX The content scaling of the content\n     * @param contentScaleY The content scaling of the content\n     *\n     * @memberOf Sprite\n     */\n    function Sprite(w, h, contentScaleX, contentScaleY) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n        var canvas = document.createElement('canvas');\n        if (canvas) {\n            this.scaleX = contentScaleX || this.scaleX;\n            this.scaleY = contentScaleY || this.scaleY;\n            canvas.width = w * this.scaleX;\n            canvas.height = h * this.scaleY;\n            this.context = canvas.getContext('2d');\n            this.canvas = canvas;\n        }\n    }\n    /**\n     * Retrieves the content scaling of this object\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentScale = function () {\n        return {\n            x: this.scaleX,\n            y: this.scaleY,\n        };\n    };\n    /**\n     * Retrieves the size of the content ignoring scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getContentSize = function () {\n        return {\n            height: this.canvas.height,\n            width: this.canvas.width,\n        };\n    };\n    /**\n     * Retrieves the dimensional width of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getWidth = function () {\n        return this.canvas.width / this.scaleX;\n    };\n    /**\n     * Retrieves the dimensional height of the content applying scaling\n     *\n     * @readonly\n     *\n     * @memberOf Sprite\n     */\n    Sprite.prototype.getHeight = function () {\n        return this.canvas.height / this.scaleY;\n    };\n    return Sprite;\n}());\nexports.Sprite = Sprite;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/sprite.ts\n// module id = 16\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser = require(\"bowser\");\nvar three_1 = require(\"three\");\nvar debug = require('debug')('CommunicationsView:Mouse');\n/** Used to adjust the base whee delta for IE browsers */\nvar IE_ADJUSTMENT = 1 / 30;\n/** Used to adjust the rates for IE 11 */\nvar OLD_IE_ADJUSTMENT = -0.25;\n// This determines how large the delta can grow to in firefox\nvar MAX_FIREFOX_WHEELDELTA = 100;\n/**\n * Create a low pass filter memory bank so we can slow down rapid accelerations and let normal slower accelerations pass\n * Common use case for this is the discrepancy in firefox from mousewheels to trackpad scroll speeds\n */\nvar lowPassY = [0, 0, 0, 0];\n// These coefficients represent the coefficients of a FIR filter.\n// This FIR filter uses the lowPassY as the memory for the filter and is created for\n// The reasons specified for the lowPassY memory. To edit the coefficients, you simply\n// Ensure the coefficients added together === 1.0. If they do not, you may get an unstable\n// Result that goes to infinity rather quickly. Changing the distribution of these coefficients\n// Alters the rate at which the delta can approach MAX_FIREFOX_WHEELDELTA. Explaining exactly\n// How it affects the rate requires an understanding of FIR filters, so unless this is already\n// Known knowledge, it would be faster to just tweak the coefficients until a desired effect is\n// Attained.\nvar LOW_PASS_U0 = 0.1;\nvar LOW_PASS_U1 = 0.2;\nvar LOW_PASS_U2 = 0.2;\nvar LOW_PASS_U3 = 0.5;\nfunction normalizeFirefoxWheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = 0;\n    var deltaY = 0;\n    // Reset the filter if the direction changes to prevent lag in directional change\n    if (Math.sign(lowPassY[0]) !== Math.sign(deltaY)) {\n        lowPassY.splice(0, lowPassY.length, 0, 0, 0, 0);\n    }\n    deltaX = wheel.deltaX * MAX_FIREFOX_WHEELDELTA;\n    // Calculate the next value output from the FIR filter\n    deltaY = (wheel.deltaY * MAX_FIREFOX_WHEELDELTA) * LOW_PASS_U0 + lowPassY[0] * LOW_PASS_U1 + lowPassY[1] * LOW_PASS_U2 + lowPassY[2] * LOW_PASS_U3;\n    // Store the value of the filter in the FIR memory bank\n    lowPassY.unshift(deltaY);\n    // Keep our FIR memory clean and only the size of the number of coefficients\n    lowPassY.pop();\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeChromeWheel(e) {\n    var wheel = e.nativeEvent;\n    return new three_1.Vector2(wheel.deltaX, -wheel.deltaY);\n}\nfunction normalizeIE11Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    var deltaY = wheel.deltaY;\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = (wheel.wheelDelta || -wheel.detail) * OLD_IE_ADJUSTMENT;\n        }\n    }\n    return new three_1.Vector2(-deltaX, -deltaY);\n}\nfunction normalizeIE12Wheel(e) {\n    var wheel = e.nativeEvent;\n    var deltaX = wheel.deltaX, deltaY = wheel.deltaY;\n    if (deltaX === undefined) {\n        deltaX = wheel.wheelDeltaX !== undefined ? wheel.wheelDeltaX * IE_ADJUSTMENT : 0;\n    }\n    if (deltaY === undefined) {\n        if (wheel.wheelDeltaY !== undefined) {\n            deltaY = wheel.wheelDeltaY * IE_ADJUSTMENT;\n        }\n        else {\n            deltaY = wheel.wheelDelta || -wheel.detail;\n        }\n    }\n    var v = new three_1.Vector2(deltaX, -deltaY);\n    v.multiplyScalar(0.25);\n    return v;\n}\n// Determine this browsers version of wheel normalization and apply it\nvar normalizeWheel;\nexports.normalizeWheel = normalizeWheel;\nif (browser.firefox) {\n    debug('Using mouse wheel for firefox');\n    exports.normalizeWheel = normalizeWheel = normalizeFirefoxWheel;\n}\nelse if (browser.msie && +browser.version >= 11) {\n    debug('Using mouse wheel for IE 11');\n    exports.normalizeWheel = normalizeWheel = normalizeIE11Wheel;\n}\nelse if (browser.msedge) {\n    debug('Using mouse wheel for MS EDGE');\n    exports.normalizeWheel = normalizeWheel = normalizeIE12Wheel;\n}\nelse {\n    debug('Using mouse wheel for Chrome');\n    exports.normalizeWheel = normalizeWheel = normalizeChromeWheel;\n}\n/**\n * Analyzes a MouseEvent and calculates the mouse coordinates (relative to the element).\n */\nfunction eventElementPosition(e, relative) {\n    var mouseX = 0, mouseY = 0, eventX = 0, eventY = 0, object = relative || e.nativeEvent.target;\n    // Get mouse position on document crossbrowser\n    if (!e) {\n        e = window.event;\n    }\n    if (e.pageX || e.pageY) {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        mouseX = e.clientX + document.body.scrollLeft\n            + document.documentElement.scrollLeft;\n        mouseY = e.clientY + document.body.scrollTop\n            + document.documentElement.scrollTop;\n    }\n    // Get parent element position in document\n    if (object.offsetParent) {\n        do {\n            eventX += object.offsetLeft;\n            eventY += object.offsetTop;\n            object = object.offsetParent;\n        } while (object);\n    }\n    // Mouse position minus elm position is mouseposition relative to element:\n    return { x: mouseX - eventX, y: mouseY - eventY };\n}\nexports.eventElementPosition = eventElementPosition;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/mouse.ts\n// module id = 17\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../primitives/bounds\");\n// A configuration that controls how readily a quadtree will split to another level\n// Adjusting this number can improve or degrade your performance significantly and\n// Must be tested for specific use cases\nvar maxPopulation = 5;\nvar maxDepth = 10;\n/**\n * This filters a quad tree query by type\n *\n * @export\n * @template T\n */\nfunction filterQuery(type, queryValues) {\n    var filtered = [];\n    queryValues.forEach(function (obj) {\n        if (type.find(function (t) { return obj instanceof t; })) {\n            filtered.push(obj);\n        }\n    });\n    return filtered;\n}\nexports.filterQuery = filterQuery;\n/**\n * This is a class used specifically by the quad tree nodes to indicate split space\n * within the quad tree.\n *\n * @class Quadrants\n */\nvar Quadrants = (function () {\n    /**\n     * Creates an instance of Quadrants.\n     *\n     * @param bounds The bounds this will create quandrants for\n     * @param depth  The child depth of this element\n     *\n     * @memberOf Quadrants\n     */\n    function Quadrants(bounds, depth) {\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n        var mid = bounds.mid;\n        this.TL = new Node(bounds.x, mid.x, bounds.y, mid.y, depth);\n        this.TR = new Node(mid.x, bounds.right, bounds.y, mid.y, depth);\n        this.BL = new Node(bounds.x, mid.x, mid.y, bounds.bottom, depth);\n        this.BR = new Node(mid.x, bounds.right, mid.y, bounds.bottom, depth);\n    }\n    /**\n     * Ensures all memory is released for all nodes and all references are removed\n     * to potentially high memory consumption items\n     *\n     * @memberOf Quadrants\n     */\n    Quadrants.prototype.destroy = function () {\n        this.TL.destroy();\n        this.TR.destroy();\n        this.BL.destroy();\n        this.BR.destroy();\n        this.TL = null;\n        this.TR = null;\n        this.BL = null;\n        this.BR = null;\n    };\n    return Quadrants;\n}());\nexports.Quadrants = Quadrants;\n/**\n * The quad tree node. This Node will take in a certain population before dividing itself into\n * 4 quadrants which it will attempt to inject it's population into. If a member of the population\n * does not completely get injected into one of the quadrants it remains as a member of this node.\n *\n * @export\n * @class Node\n */\nvar Node = (function () {\n    /**\n     * Creates an instance of Node.\n     *\n     * @param l     The bounding left wall of the space this node covers\n     * @param r     The bounding right wall of the space this node covers\n     * @param t     The bounding top wall of the space this node covers\n     * @param b     The bounding bottom wall of the space this node covers\n     * @param depth The depth within the quad tree this node resides\n     *\n     * @memberOf Node\n     */\n    function Node(left, right, top, bottom, depth) {\n        this.bounds = null;\n        this.children = [];\n        this.childrenProps = [];\n        this.depth = 0;\n        this.nodes = null;\n        // If params insertted\n        if (arguments.length >= 4) {\n            this.bounds = new bounds_1.Bounds(left, right, top, bottom);\n        }\n        else {\n            this.bounds = new bounds_1.Bounds(0, 1, 1, 0);\n        }\n        // Ensure the depth is set\n        this.depth = depth || 0;\n    }\n    /**\n     * Destroys this node and ensures all child nodes are destroyed as well.\n     *\n     * @memberOf Node\n     */\n    Node.prototype.destroy = function () {\n        this.children = null;\n        this.bounds = null;\n        if (this.nodes) {\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n    };\n    /**\n     * Adds an object that extends Bounds (or is Bounds) and properly injects it into this node\n     * or into a sub quadrant if this node is split already. If the child is outside the boundaries\n     * this quad tree spans (and this is the root node), the quad tree will expand to include\n     * the new child.\n     *\n     * @param child The Bounds type object to inject\n     * @param props Properties that can be retrieved with the child object if applicable\n     *\n     * @returns True if the insertion was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.add = function (child, props) {\n        // This is the entry function for adding children, so we must first expand our top node\n        // To cover the area that the child is located.\n        // If we're in bounds, then let's just add the child\n        if (child.isInside(this.bounds)) {\n            return this.doAdd(child);\n        }\n        else {\n            this.cover(child);\n            return this.add(child, props);\n        }\n    };\n    /**\n     * Adds a list of new children to this quad tree. It performs the same operations as\n     * addChild for each child in the list, however, it more efficiently recalculates the\n     * bounds necessary to cover the area the children cover.\n     *\n     * @param children      List of Bounds objects to inject\n     * @param childrenProps List of props to associate with each element\n     *\n     * @memberOf Node\n     */\n    Node.prototype.addAll = function (children, childrenProps) {\n        var _this = this;\n        // Ensure the properties are at least defined\n        childrenProps = childrenProps || [];\n        // Make sure we cover the entire area of all the children.\n        // We can speed this up a lot if we first calculate the total bounds the new children covers\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n        // Get the dimensions of the new bounds\n        children.forEach(function (child) {\n            if (child.x < minX) {\n                minX = child.x;\n            }\n            if (child.right > maxX) {\n                maxX = child.right;\n            }\n            if (child.bottom < minY) {\n                minY = child.bottom;\n            }\n            if (child.y > maxY) {\n                maxY = child.y;\n            }\n        });\n        // Make sure our bounds includes the specified bounds\n        this.cover(new bounds_1.Bounds(minX, maxX, maxY, minY));\n        // Add all of the children into the tree\n        children.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * Ensures this quad tree includes the bounds specified in it's spatial coverage.\n     * This will cause all children to be re-injected into the tree.\n     *\n     * @param bounds The bounds to include in the tree's coverage\n     *\n     * @memberOf Node\n     */\n    Node.prototype.cover = function (bounds) {\n        var _this = this;\n        // If we are already covering the area: abort\n        if (bounds.isInside(this.bounds)) {\n            return;\n        }\n        // Make our bounds cover the new area\n        this.bounds.encapsulate(bounds);\n        this.bounds.x -= 1;\n        this.bounds.y += 1;\n        this.bounds.width += 2;\n        this.bounds.height += 4;\n        // Get all of the children underneath this node\n        var allChildren = this.gatherChildren([]);\n        // Destroy the split nodes\n        if (this.nodes) {\n            // Completely...destroy...\n            this.nodes.destroy();\n            this.nodes = null;\n        }\n        // Reinsert all children with the new dimensions in place\n        allChildren.forEach(function (child, index) { return _this.doAdd(child); });\n    };\n    /**\n     * When adding children, this performs the actual action of injecting the child into the tree\n     * without the process of seeing if the tree needs a spatial adjustment to account for the child.\n     *\n     * @param child The Bounds item to inject into the tree\n     * @param props The props to remain associated with the child\n     *\n     * @returns True if the injection was successful\n     *\n     * @memberOf Node\n     */\n    Node.prototype.doAdd = function (child) {\n        // If nodes are present, then we have already exceeded the population of this node\n        if (this.nodes) {\n            if (child.isInside(this.nodes.TL.bounds)) {\n                return this.nodes.TL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.TR.bounds)) {\n                return this.nodes.TR.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BL.bounds)) {\n                return this.nodes.BL.doAdd(child);\n            }\n            if (child.isInside(this.nodes.BR.bounds)) {\n                return this.nodes.BR.doAdd(child);\n            }\n            // Otherwise, this is a child overlapping this border\n            this.children.push(child);\n            return true;\n        }\n        else if (child.isInside(this.bounds)) {\n            this.children.push(child);\n            // If we exceeded our population for this quadrant, it is time to split up\n            if (this.children.length > maxPopulation && this.depth < maxDepth) {\n                this.split();\n            }\n            return true;\n        }\n        // This is when there is something wrong with the insertted child. The bounds\n        // For the quad should have grown without issue, but in this case the bounds\n        // Could not grow to accomodate the child.\n        if (isNaN(child.width + child.height + child.x + child.y)) {\n            console.error('Child did not fit into bounds because a dimension is NaN', child);\n        }\n        else if (child.area === 0) {\n            console.error('Child did not fit into bounds because the area is zero', child);\n        }\n        // Don't insert the child and continue\n        return true;\n    };\n    /**\n     * Collects all children of all the current and sub nodes into a single list.\n     *\n     * @param list The list we must aggregate children into\n     *\n     * @return The list specified as the list parameter\n     */\n    Node.prototype.gatherChildren = function (list) {\n        list = list.concat(this.children);\n        if (this.nodes) {\n            this.nodes.TL.gatherChildren(list);\n            this.nodes.TR.gatherChildren(list);\n            this.nodes.BL.gatherChildren(list);\n            this.nodes.BR.gatherChildren(list);\n        }\n        return list;\n    };\n    /**\n     * Collects all props associated with the children. This array of props will\n     * mirror the list retrieved with gatherChildren.\n     *\n     * @param list\n     *\n     * @returns The list specified as the list paramter\n     *\n     * @memberOf Node\n     */\n    Node.prototype.gatherProps = function (list) {\n        var _this = this;\n        this.children.forEach(function (c, index) {\n            list.push(_this.childrenProps[index]);\n        });\n        if (this.nodes) {\n            this.nodes.TL.gatherProps(list);\n            this.nodes.TR.gatherProps(list);\n            this.nodes.BL.gatherProps(list);\n            this.nodes.BR.gatherProps(list);\n        }\n        return list;\n    };\n    /**\n     * Entry query for determining query type based on input object\n     *\n     * @param bounds Can be a Bounds or a Point object\n     * @param visit  A callback function that will receive the Node as it is analyzed. This gives\n     *               information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return An array of children that intersects with the query\n     */\n    Node.prototype.query = function (bounds, visit) {\n        // Query a rectangle\n        if (bounds instanceof bounds_1.Bounds) {\n            if (bounds.hitBounds(this.bounds)) {\n                return this.queryBounds(bounds, [], visit);\n            }\n            // Return an empty array when nothing is collided with\n            return [];\n        }\n        // Query a point\n        if (this.bounds.containsPoint(bounds)) {\n            return this.queryPoint(bounds, [], visit);\n        }\n        // Return an empty array when nothing is collided with\n        return [];\n    };\n    /**\n     * Queries children for intersection with a bounds object\n     *\n     * @param b     The Bounds to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return     Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryBounds = function (b, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.hitBounds(b)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (b.hitBounds(this.nodes.TL.bounds)) {\n                this.nodes.TL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.TR.bounds)) {\n                this.nodes.TR.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BL.bounds)) {\n                this.nodes.BL.queryBounds(b, list, visit);\n            }\n            if (b.hitBounds(this.nodes.BR.bounds)) {\n                this.nodes.BR.queryBounds(b, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Queries children for intersection with a point\n     *\n     * @param p     The Point to test children against\n     * @param list  The list of children to aggregate into the query\n     * @param visit A callback function that will receive the Node as it is analyzed. This gives\n     *              information on a spatial scale, how a query reaches it's target intersections.\n     *\n     * @return      Returns the exact same list that was input as the list param\n     */\n    Node.prototype.queryPoint = function (p, list, visit) {\n        this.children.forEach(function (c, index) {\n            if (c.containsPoint(p)) {\n                list.push(c);\n            }\n        });\n        if (visit) {\n            visit(this);\n        }\n        if (this.nodes) {\n            if (this.nodes.TL.bounds.containsPoint(p)) {\n                this.nodes.TL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.TR.bounds.containsPoint(p)) {\n                this.nodes.TR.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BL.bounds.containsPoint(p)) {\n                this.nodes.BL.queryPoint(p, list, visit);\n            }\n            if (this.nodes.BR.bounds.containsPoint(p)) {\n                this.nodes.BR.queryPoint(p, list, visit);\n            }\n        }\n        return list;\n    };\n    /**\n     * Creates four sub quadrants for this node.\n     */\n    Node.prototype.split = function () {\n        // Gather all items to be handed down\n        var allChildren = this.gatherChildren([]);\n        // Gather all props for the children to be handed down as well\n        this.nodes = new Quadrants(this.bounds, this.depth + 1);\n        this.children = [];\n        this.childrenProps = [];\n        while (allChildren.length > 0) {\n            this.doAdd(allChildren.pop());\n        }\n    };\n    /**\n     * Traverses the quad tree returning every quadrant encountered\n     *\n     * @param cb A callback that has the parameter (node) which is a quadrant in the tree\n     */\n    Node.prototype.visit = function (cb) {\n        var finished = Boolean(cb(this));\n        if (this.nodes && !finished) {\n            this.nodes.TL.visit(cb);\n            this.nodes.TR.visit(cb);\n            this.nodes.BL.visit(cb);\n            this.nodes.BR.visit(cb);\n        }\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar QuadTree = (function (_super) {\n    __extends(QuadTree, _super);\n    function QuadTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QuadTree;\n}(Node));\nexports.QuadTree = QuadTree;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/quad-tree.ts\n// module id = 18\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProgramInfo(gl, program) {\n    var result = {\n        attributeCount: 0,\n        attributes: new Array(),\n        uniformCount: 0,\n        uniforms: new Array(),\n    }, activeUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS), activeAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    // Taken from the WebGl spec:\n    // Http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14\n    var enums = {\n        0x8B50: 'FLOAT_VEC2',\n        0x8B51: 'FLOAT_VEC3',\n        0x8B52: 'FLOAT_VEC4',\n        0x8B53: 'INT_VEC2',\n        0x8B54: 'INT_VEC3',\n        0x8B55: 'INT_VEC4',\n        0x8B56: 'BOOL',\n        0x8B57: 'BOOL_VEC2',\n        0x8B58: 'BOOL_VEC3',\n        0x8B59: 'BOOL_VEC4',\n        0x8B5A: 'FLOAT_MAT2',\n        0x8B5B: 'FLOAT_MAT3',\n        0x8B5C: 'FLOAT_MAT4',\n        0x8B5E: 'SAMPLER_2D',\n        0x8B60: 'SAMPLER_CUBE',\n        0x1400: 'BYTE',\n        0x1401: 'UNSIGNED_BYTE',\n        0x1402: 'SHORT',\n        0x1403: 'UNSIGNED_SHORT',\n        0x1404: 'INT',\n        0x1405: 'UNSIGNED_INT',\n        0x1406: 'FLOAT',\n    };\n    var blocks = {\n        0x8B50: 1,\n        0x8B51: 1,\n        0x8B52: 1,\n        0x8B53: 1,\n        0x8B54: 1,\n        0x8B55: 1,\n        0x8B56: 1,\n        0x8B57: 1,\n        0x8B58: 1,\n        0x8B59: 1,\n        0x8B5A: 1,\n        0x8B5B: 3,\n        0x8B5C: 4,\n        0x8B5E: 1,\n        0x8B60: 1,\n        0x1400: 1,\n        0x1401: 1,\n        0x1402: 1,\n        0x1403: 1,\n        0x1404: 1,\n        0x1405: 1,\n        0x1406: 1,\n    };\n    // Loop through active uniforms\n    for (var i = 0; i < activeUniforms; ++i) {\n        var uniform = gl.getActiveUniform(program, i);\n        uniform.typeName = enums[uniform.type];\n        result.uniforms.push(uniform);\n        result.uniformCount += uniform.size;\n        uniform.size = uniform.size * blocks[uniform.type];\n    }\n    // Loop through active attributes\n    for (var i = 0; i < activeAttributes; i++) {\n        var attribute = gl.getActiveAttrib(program, i);\n        attribute.typeName = enums[attribute.type];\n        result.attributes.push(attribute);\n        result.attributeCount += attribute.size;\n    }\n    return result;\n}\nvar WebGLStat = (function () {\n    function WebGLStat() {\n    }\n    WebGLStat.printCurrentProgramInfo = function (debug, surface) {\n        if (surface.gl) {\n            var info = getProgramInfo(surface.gl, surface.gl.getParameter(surface.gl.CURRENT_PROGRAM));\n            var table = window.table;\n            if (table) {\n                table(info.uniforms);\n            }\n        }\n        else {\n            debug('Attempted to printProgramInfo but the surface has not established its gl context yet');\n        }\n    };\n    WebGLStat.MAX_VERTEX_UNIFORMS = 0;\n    WebGLStat.MAX_FRAGMENT_UNIFORMS = 0;\n    WebGLStat.MAX_ATTRIBUTES = 0;\n    WebGLStat.WEBGL_SUPPORTED = false;\n    return WebGLStat;\n}());\nexports.WebGLStat = WebGLStat;\nfunction initStats() {\n    // Let's perform some immediate operations to do some gl querying for useful information\n    function getAContext() {\n        try {\n            var canvas = document.createElement('canvas');\n            return window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    // Attempt to retrieve a context for webgl\n    var gl = getAContext();\n    // If the context exists, then we know gl is supported and we can fill in some metrics\n    if (gl) {\n        WebGLStat.WEBGL_SUPPORTED = true;\n        WebGLStat.MAX_VERTEX_UNIFORMS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WebGLStat.MAX_FRAGMENT_UNIFORMS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WebGLStat.MAX_ATTRIBUTES = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    }\n}\ninitStats();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/webgl-stat.ts\n// module id = 19\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar curved_line_1 = require(\"../../primitives/curved-line\");\nvar line_1 = require(\"../../primitives/line\");\nvar point_1 = require(\"../../primitives/point\");\n/**\n * This defines a drawable curved line shape. It contains the information necessary\n * to efficiently render the line.\n *\n * @export\n * @class CurvedLineShape\n * @extends {CurvedLine<T>}\n * @template T An associated data type that can be linked to this shape to make data retrieval from interacting\n *             with the shape easier.\n */\nvar CurvedLineShape = (function (_super) {\n    __extends(CurvedLineShape, _super);\n    /**\n     * Creates an instance of CurvedLineShape.\n     *\n     * @param {ICurvedLineShapeOptions} options The options for creating this line\n     */\n    function CurvedLineShape(options) {\n        var _this = \n        // We pass our properties to the curve line but we do not let it cache it's version of the line segments\n        // As we will be constructing our own segmentation requiring a new type of cache\n        _super.call(this, options) || this;\n        /** Depeth of draw location */\n        _this.depth = 0;\n        /** How thick the line should be */\n        _this.lineWidth = 1;\n        _this.encapsulatePoints(_this.getTriangleStrip());\n        _this.cachesQuadSegments = options.cacheSegments;\n        _this.depth = options.depth || 0;\n        _this.lineWidth = options.lineWidth || 1;\n        _this.startColor = options.startColor;\n        _this.endColor = options.endColor;\n        return _this;\n    }\n    /**\n     * Returns a new instance of this object that mimicks the properties of this Object\n     *\n     * @returns {CurvedLineShape<T>} The cloned object\n     */\n    CurvedLineShape.prototype.clone = function () {\n        // Perform the clone\n        var clone = new CurvedLineShape({\n            cacheSegments: this.cachesSegments,\n            controlPoints: this.controlPoints,\n            end: this.end,\n            endColor: this.endColor,\n            lineWidth: this.lineWidth,\n            resolution: this.resolution,\n            start: this.start,\n            startColor: this.startColor,\n            type: this.type,\n        });\n        clone.d = this.d;\n        return clone;\n    };\n    /**\n     * @override\n     * See base definition\n     */\n    CurvedLineShape.prototype.distanceTo = function (point) {\n        return Math.max(0, _super.prototype.distanceTo.call(this, point) - (this.lineWidth / 2.0));\n    };\n    /**\n     * This produces a triangle strip that represents the quads that composes this line. If caching is present,\n     * subsequent calls to this method will be much faster unless the cache gets invalidated.\n     *\n     * @return {IPoint[]} The Triangle Strip of points to create the quads that make each segment of the curve\n     */\n    CurvedLineShape.prototype.getTriangleStrip = function () {\n        if (this.cachesSegments && this.cachedQuadSegments) {\n            return this.cachedQuadSegments;\n        }\n        // Make a container to hold our triangle strip info\n        var strip = [];\n        var normal = [];\n        // Start with calculating the line strip so we can use the line segments\n        // To produce the quads we need to render\n        var lineStrip = this.getLineStrip();\n        var lineWidthHalf = this.lineWidth / 2.0;\n        var line = new line_1.Line(point_1.Point.zero(), point_1.Point.zero());\n        // We make a container point for the scaling operation to reduce allocations\n        var scaledPoint = point_1.Point.zero();\n        // If the line strip is empty, then there is nothing to produce and makes\n        // Us unable to reduce the lineStrip, so return empty here\n        if (lineStrip.length < 2) {\n            return [];\n        }\n        // Calculate bisecting normal or each node\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            line.setPoints(lineStrip[i], lineStrip[i + 1]);\n            if (normal.length === 0) {\n                normal.push(line.perpendicular);\n            }\n            else {\n                // Sum of two normals of a point\n                var temp = {\n                    x: normal[i].x + line.perpendicular.x,\n                    y: normal[i].y + line.perpendicular.y,\n                };\n                // Normalize the sum of two normals\n                var sqrt = Math.sqrt(temp.x * temp.x + temp.y * temp.y);\n                temp.x = temp.x / sqrt;\n                temp.y = temp.y / sqrt;\n                normal[i] = temp;\n            }\n            normal.push(line.perpendicular);\n        }\n        // Use the new normals to generate quads\n        for (var i = 0; i < lineStrip.length - 1; i++) {\n            var previous = lineStrip[i];\n            var current = lineStrip[i + 1];\n            // TR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], -lineWidthHalf, scaledPoint), current));\n            // BR\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i + 1], lineWidthHalf, scaledPoint), current));\n            // TL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], -lineWidthHalf, scaledPoint), previous));\n            // BL\n            strip.push(point_1.Point.add(point_1.Point.scale(normal[i], lineWidthHalf, scaledPoint), previous));\n        }\n        return strip;\n    };\n    /**\n     * @override\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     */\n    CurvedLineShape.prototype.setPoints = function (start, end, controlPoints) {\n        _super.prototype.setPoints.call(this, start, end, controlPoints);\n        this.cachedQuadSegments = [];\n    };\n    return CurvedLineShape;\n}(curved_line_1.CurvedLine));\nexports.CurvedLineShape = CurvedLineShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/curved-line-shape.ts\n// module id = 20\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar interpolation_1 = require(\"../util/interpolation\");\nvar bounds_1 = require(\"./bounds\");\nvar line_1 = require(\"./line\");\nvar point_1 = require(\"./point\");\nvar debug = require('debug')('bezier');\n/**\n * This enum covers the type of curved lines that can be made. Making a specific curve\n *\n * @export\n * @enum {number}\n */\nvar CurveType;\n(function (CurveType) {\n    /** This will make the curve be generated from interpolating between the end points and provided control points */\n    CurveType[CurveType[\"Bezier\"] = 0] = \"Bezier\";\n    /**\n     * This will draw a curve as though there is a circular arc passing over the two end points. The radius of the\n     * circular arc is determined by how far the control point is from the straight line that can be made from the two\n     * end points.\n     */\n    CurveType[CurveType[\"CircularCCW\"] = 1] = \"CircularCCW\";\n    CurveType[CurveType[\"CircularCW\"] = 2] = \"CircularCW\";\n    /**\n     * This ignores the control points altogether and just created a straight line with a single segment that consists\n     * of the specified endpoints\n     */\n    CurveType[CurveType[\"Straight\"] = 3] = \"Straight\";\n})(CurveType = exports.CurveType || (exports.CurveType = {}));\n// -------[ Distance Calculating Methods ]----------------------------\n/**\n * Calculates the distance to the bezier curve by testing all of the bezier curve's segment lines\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction bezierDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a circle\n * TODO: Using the segment approach for now. Can be sped up by using circle math\n * instead\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction circularDistance(line, testPoint) {\n    // Get all of the points associated with the curve\n    var lineStrip = line.getLineStrip();\n    // Find the closest points to the mouse\n    var closestIndex = point_1.Point.getClosestIndex(testPoint, lineStrip);\n    // Calculate the lines that eminate from this point and do a distance calculation from that line\n    // Find the closest distance and use it\n    var closestDistance = Number.MAX_VALUE;\n    var straightLine;\n    if (closestIndex > 0) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex - 1]);\n        closestDistance = straightLine.distanceTo(testPoint);\n    }\n    if (closestIndex < lineStrip.length - 1) {\n        straightLine = new line_1.Line(lineStrip[closestIndex], lineStrip[closestIndex + 1]);\n        closestDistance = Math.min(closestDistance, straightLine.distanceTo(testPoint));\n    }\n    return closestDistance;\n}\n/**\n * Calculates the nearness of the line by using the properties of a straight line\n *\n * @param {CurvedLine<any>} line The curved bezier line type\n * @param {IPoint} testPoint The Point to test distance to\n *\n * @returns {number} The nearest distance from the curve to the test point\n */\nfunction straightDistance(line, testPoint) {\n    return new line_1.Line(line.start, line.end).distanceTo(testPoint);\n}\n// -------[ Segment Generating Methods ]----------------------------\n/**\n * Uses quadratic bezier principles to create the segments for a quadratic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier2Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var lineEnd = line.end;\n    var c1 = line.controlPoints[0];\n    for (var i = 0, end = line.resolution; i <= end; ++i) {\n        segments.push(interpolation_1.bezier2(dt * i, start, lineEnd, c1));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Uses cubic bezier principles to create the segments for a cubic bezier curve\n *\n * @param {CurvedLine} line The curved line object that contains the info to produce the segments\n *\n * @returns {IPoint[]} A line strip of all the calculated points along the line\n */\nfunction makeBezier3Segments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var segments = [];\n    var dt = 1 / line.resolution;\n    var start = line.start;\n    var lineEnd = line.end;\n    var c1 = line.controlPoints[0];\n    var c2 = line.controlPoints[1];\n    for (var i = 0, end = line.resolution; i <= end; ++i) {\n        segments.push(interpolation_1.bezier3(dt * i, start, lineEnd, c1, c2));\n    }\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that follows along a circular path on the line.\n * The distance the control point is from the straight line that flows through the two\n * end points of the line determines the radius of the curvature of the line\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeCircularCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    debug('CW');\n    // Generate a line so we can have a perpendicular calculation\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    var circleCenter = line.controlPoints[1];\n    if (!circleCenter) {\n        // We get the midpoint of the line as we want to align the center of the circle with this point\n        var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n        var minRadius = point_1.Point.getDistance(midPoint, line.start);\n        // The shortest the radius can be is the distance from the line to the mid point\n        // Anything shorter will just result in a hemisphere being rendered\n        if (radius < minRadius) {\n            radius = point_1.Point.getDistance(midPoint, line.start);\n        }\n        // Get the perpendicular direction to the line so we can calculate the center of our circle\n        // From the mid point\n        var perpendicular = straightLine.perpendicular;\n        var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n        // Calculate the location of the center of the circle\n        circleCenter = {\n            x: perpendicular.x * distance + midPoint.x,\n            y: perpendicular.y * distance + midPoint.y,\n        };\n        // Store the circle center as an extra control point in case the value is needed\n        // (which it often is)\n        line.controlPoints[1] = circleCenter;\n    }\n    debug(' center of circle is %o  %o', circleCenter.x, circleCenter.y);\n    // Get the direction vector from the circle center to the first end point\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    // Get the angle of the first vector\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    // Get the direction vector from the circle center to the second end point\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    // Get the angle of the second vector\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    // Calculate how much to increment theta in our parametric circular equation\n    if (theta1 < theta2)\n        theta1 += Math.PI * 2;\n    var dTheta = (theta1 - theta2) / line.resolution;\n    debug('theta1 is %o, theta2 is %o', theta1, theta2);\n    // Compute the segments based on the information we have gathered by applying it to a circular\n    // Parametric equation\n    var segments = [];\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 - (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 - (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    // Cache the segments if specified by the curved line\n    if (line.cachesSegments) {\n        line.cachedSegments = segments;\n    }\n    debug('Generated Circular Segments: %o dTheta: %o radius: %o', segments, dTheta, radius);\n    return segments;\n}\nfunction makeCircularCCWSegments(line) {\n    if (line.cachesSegments && line.cachedSegments) {\n        return line.cachedSegments;\n    }\n    var straightLine = new line_1.Line(line.start, line.end);\n    var radius = point_1.Point.getDistance(line.start, line.controlPoints[0]);\n    var circleCenter = line.controlPoints[1];\n    if (!circleCenter) {\n        var midPoint = point_1.Point.getMidpoint(line.start, line.end);\n        var minRadius = point_1.Point.getDistance(midPoint, line.start);\n        if (radius < minRadius) {\n            radius = point_1.Point.getDistance(midPoint, line.start);\n        }\n        var perpendicular = straightLine.perpendicular;\n        var distance = Math.sqrt(radius * radius - minRadius * minRadius);\n        circleCenter = {\n            x: -perpendicular.x * distance + midPoint.x,\n            y: -perpendicular.y * distance + midPoint.y,\n        };\n        // Store the circle center as an extra control point in case the value is needed\n        // (which it often is)\n        line.controlPoints[1] = circleCenter;\n    }\n    var direction1 = point_1.Point.getDirection(circleCenter, line.start);\n    var theta1 = Math.atan2(direction1.y, direction1.x);\n    var direction2 = point_1.Point.getDirection(circleCenter, line.end);\n    var theta2 = Math.atan2(direction2.y, direction2.x);\n    if (theta2 < theta1)\n        theta2 += Math.PI * 2;\n    var dTheta = (theta2 - theta1) / line.resolution;\n    var segments = [];\n    // CCW, from end to start\n    for (var i = 0, end = line.resolution + 1; i < end; ++i) {\n        segments.push({\n            x: Math.cos(theta1 + (dTheta * i)) * radius + circleCenter.x,\n            y: Math.sin(theta1 + (dTheta * i)) * radius + circleCenter.y,\n        });\n    }\n    if (line.cachedSegments) {\n        line.cachedSegments = segments;\n    }\n    return segments;\n}\n/**\n * Makes the segments for a line that is straight, thus only 1 segments is needed\n * and will be generated.\n *\n * @param {CurvedLine<any>} line\n * @returns {IPoint[]}\n */\nfunction makeStraightSegments(line) {\n    return [line.start, line.end];\n}\n/** A quick lookup for a proper segment creating method for a curved line  */\nvar pickSegmentMethod = (_a = {},\n    _a[CurveType.Bezier] = [\n        null,\n        makeBezier2Segments,\n        makeBezier3Segments,\n    ],\n    _a[CurveType.CircularCW] = [\n        null,\n        makeCircularCWSegments,\n        makeCircularCWSegments,\n    ],\n    _a[CurveType.CircularCCW] = [\n        null,\n        makeCircularCCWSegments,\n        makeCircularCCWSegments,\n    ],\n    _a[CurveType.Straight] = [\n        makeStraightSegments,\n    ],\n    _a);\n/** A quick lookup for a proper distance calculating method for a curved line  */\nvar pickDistanceMethod = (_b = {},\n    _b[CurveType.Bezier] = bezierDistance,\n    _b[CurveType.CircularCW] = circularDistance,\n    _b[CurveType.CircularCCW] = circularDistance,\n    _b[CurveType.Straight] = straightDistance,\n    _b);\n/**\n * Defines an object which illustrates a curved line. Curved lines can be formed in many\n * ways but most often from two end points and some provided control points.\n *\n * @export\n * @class CurvedLine\n * @extends {Bounds<T>}\n * @template T An associated data type with this object. Use <never> if no data type is ever associated\n */\nvar CurvedLine = (function (_super) {\n    __extends(CurvedLine, _super);\n    /**\n     * Generates a primitive that describes a curved line, which is defined by the lines end points, type, and control points\n     *\n     * @param {ICurvedLineOptions} options The configuration options of this curved line\n     */\n    function CurvedLine(options) {\n        var _this = this;\n        var minX = Number.MAX_VALUE, maxX = -Number.MAX_VALUE, minY = Number.MAX_VALUE, maxY = -Number.MAX_VALUE;\n        _this = _super.call(this, minX, maxX, maxY, minY) || this;\n        // Apply the relevant properties to the curve\n        _this.cachesSegments = options.cacheSegments || false;\n        _this.type = options.type;\n        _this.resolution = options.resolution || 20;\n        // Set the metrics for this curved line\n        _this.setPoints(options.start, options.end, options.controlPoints);\n        // Set the method that will be used for calculating distance from a point\n        _this.distanceMethod = pickDistanceMethod[options.type];\n        return _this;\n    }\n    Object.defineProperty(CurvedLine.prototype, \"values\", {\n        get: function () {\n            return {\n                controlPoints: this.controlPoints,\n                end: this.end,\n                start: this.start,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Calculates the nearest distance from the provided point to this curved line\n     *\n     * @param {IPoint} point The point to test the distance from\n     *\n     * @returns {number} The calculated nearest distance from this curve to the point\n     */\n    CurvedLine.prototype.distanceTo = function (point) {\n        return this.distanceMethod(this, point);\n    };\n    /**\n     * Picks the closest line in the list to a given point\n     *\n     * @param {CurvedLine<any>[]} lines The lines to compare\n     * @param {IPoint} p The point to compare against\n     *\n     * @return {Line} The nearest line to the point\n     */\n    CurvedLine.getClosest = function (lines, point) {\n        var closestLine;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        lines.forEach(function (line) {\n            distance = line.distanceTo(point);\n            if (distance < closestDistance) {\n                closestLine = line;\n                closestDistance = distance;\n            }\n        });\n        return closestLine;\n    };\n    /**\n     * This returns the line strip that represents the curve. A line strip is specifically a group of points\n     * that forms line segments by taking the current point as one end and the previous point as the second end\n     * thus, you would start at index 1 and loop to the end to generate all of the lines composing this single\n     * line.\n     *\n     * @return {IPoint[]} All of the points in the line strip\n     */\n    CurvedLine.prototype.getLineStrip = function () {\n        return this.segmentMethod(this);\n    };\n    /**\n     * Adjusts the relevant points that defines the curve and recalculates all items necessary\n     *\n     * @param {IPoint} start\n     * @param {IPoint} end\n     * @param {IPoint[]} controlPoints\n     * @param {boolean} preventRebounding If set, this will prevent the bounds from being recalculated\n     */\n    CurvedLine.prototype.setPoints = function (start, end, controlPoints) {\n        // Apply the points\n        this.start = start;\n        this.end = end;\n        if (controlPoints.length === 0)\n            debug('start: %o, end:%o', start, end);\n        // Get the available segment methods for the given type\n        var segmentMethods = pickSegmentMethod[this.type];\n        // If we adjust the control points we need to re-evaluate the type of segment creation method we use\n        if (controlPoints) {\n            this.controlPoints = controlPoints;\n            // Get the number of control points we want to base the curve off of\n            var numControlPoints = controlPoints.length;\n            // If we have more control points than the methods available, then we use the greatest method available to best\n            // Handle as many control points as possible\n            if (numControlPoints > segmentMethods.length) {\n                numControlPoints = segmentMethods.length - 1;\n            }\n            // Set the method that will be used for generating segments\n            this.segmentMethod = segmentMethods[numControlPoints];\n            // Make sure the input wasn't bad\n            if (!this.segmentMethod) {\n                throw new Error('An Invalid number of control points was provided to a curved line. You must have at LEAST 1 control point. Or 0 for a straight line');\n            }\n            if (this.type === CurveType.Bezier) {\n                this.encapsulatePoints(controlPoints);\n            }\n            else if (this.type === CurveType.CircularCCW || this.type === CurveType.CircularCW) {\n                this.encapsulatePoints(this.getLineStrip());\n            }\n        }\n        this.encapsulatePoint(start);\n        this.encapsulatePoint(end);\n        // Invalidate caches if they exist\n        this.cachedSegments = null;\n    };\n    return CurvedLine;\n}(bounds_1.Bounds));\nexports.CurvedLine = CurvedLine;\nvar _a, _b;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/curved-line.ts\n// module id = 21\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"./bounds\");\nvar UID = 0;\nvar Circle = (function (_super) {\n    __extends(Circle, _super);\n    /**\n     * Generate a new Circle object\n     *\n     * @param x The center of the circle\n     * @param y The center of the circle\n     * @param r The radius of the circle\n     * @param d A data object to associate with the circle\n     */\n    function Circle(options) {\n        var _this = _super.call(this, 0, 0, 0, 0) || this;\n        /** a UID of the circle */\n        _this._id = ++UID;\n        /** Radius of the circle */\n        _this._radius = 0;\n        /** X coord of the center of the circle */\n        _this._centerX = 0;\n        /** Y coord of the center of the circle */\n        _this._centerY = 0;\n        _this._centerX = options.centerX;\n        _this._centerY = options.centerY;\n        _this._radius = options.radius;\n        _this.updateBounds();\n        return _this;\n    }\n    Object.defineProperty(Circle.prototype, \"values\", {\n        get: function () {\n            return {\n                radius: this._radius,\n                x: this._centerX,\n                y: this._centerY,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"radius\", {\n        get: function () {\n            return this._radius;\n        },\n        set: function (val) {\n            this._radius = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerX\", {\n        get: function () {\n            return this._centerX;\n        },\n        set: function (val) {\n            this._centerX = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Circle.prototype, \"centerY\", {\n        get: function () {\n            return this._centerY;\n        },\n        set: function (val) {\n            this._centerY = val;\n            this.updateBounds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Tests if the specified bounds is inside this circle\n     *\n     * @param b The bounds to test against\n     */\n    Circle.prototype.boundsInside = function (b) {\n        var r2 = this._radius * this._radius;\n        var dx = b.x - this._centerX;\n        var dy = b.y - this._centerY;\n        var dy2 = dy * dy;\n        var dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.right - this._centerX;\n        dx2 = dx * dx;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dy = b.bottom - this._centerY;\n        dy2 = dy * dy;\n        if ((dx2 + dy2) > r2) {\n            return false;\n        }\n        dx = b.x - this._centerX;\n        dx2 = dx * dx;\n        return (dx2 + dy2) < r2;\n    };\n    /**\n     * Calculates the distance to a provided point\n     *\n     * @param {IPoint} p The point to calculate the distance of the middle of the\n     *                   circle to\n     * @param {boolean} notSquared Flag true to prevent the Math.sqrt operation, leaving\n     *                             the result as distance^2\n     *\n     * @return {number} The distance from mid circle to the point\n     */\n    Circle.prototype.distanceTo = function (p, notSquared) {\n        var dx = this._centerX - p.x;\n        var dy = this._centerY - p.y;\n        if (notSquared) {\n            return dx * dx + dy * dy;\n        }\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n    /**\n     * Retrieves the closest circle to a provided point\n     *\n     * @param {Array} circles The circles to see who is the nearest\n     * @param {IPoint} p The point to compare the circles against for nearness\n     *\n     * @return {Circle} The nearest circle\n     */\n    Circle.getClosest = function (circles, p) {\n        var closestCircle;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        circles.forEach(function (circle) {\n            distance = circle.distanceTo(p, true);\n            if (distance < closestDistance) {\n                closestCircle = circle;\n                closestDistance = distance;\n            }\n        });\n        return closestCircle;\n    };\n    /**\n     * Tests if this circle is colliding with the specified circle\n     *\n     * @param c The circle to test against\n     *\n     * @return {boolean} True if colliding\n     */\n    Circle.prototype.hitCircle = function (c) {\n        var totalDistance = c._radius + this._radius;\n        totalDistance *= totalDistance;\n        return this.distanceTo({ x: c._centerX, y: c._centerY }, true) < totalDistance;\n    };\n    /**\n     * @override\n     * This makes it so the test of a point tests based on a Circle shape\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.hitPoint = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * If there are multiple metrics to update for the circle, this is the most\n     * efficient way to do that as it will update it's bounds only once.\n     *\n     * @param x\n     * @param y\n     * @param r\n     */\n    Circle.prototype.position = function (x, y, r) {\n        this._centerX = x;\n        this._centerY = y;\n        this._radius = r;\n        this.updateBounds();\n    };\n    /**\n     * @override\n     * Tests if a point is inside the circle\n     *\n     * @param p The point to test if inside the circle\n     *\n     * @return True if the point is inside\n     */\n    Circle.prototype.pointInside = function (p) {\n        var r2 = this._radius * this._radius;\n        var dx = p.x - this._centerX;\n        var dy = p.y - this._centerY;\n        return (dx * dx + dy * dy) < r2;\n    };\n    /**\n     * When the circle gains different circle metrics, it's Bounds must adjust\n     * accordingly, which is what this method recalculates.\n     */\n    Circle.prototype.updateBounds = function () {\n        var radius = this._radius;\n        this.x = this._centerX - radius;\n        this.y = this._centerY - radius;\n        this.height = radius * 2;\n        this.width = radius * 2;\n    };\n    /**\n     * Pretty print the metrics of this circle\n     */\n    Circle.prototype.toString = function () {\n        return \"[Circle {x: \" + this._centerX + \", y: \" + this._centerY + \", r: \" + this._radius + \"}]\";\n    };\n    return Circle;\n}(bounds_1.Bounds));\nexports.Circle = Circle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/circle.ts\n// module id = 22\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar line_1 = require(\"../../primitives/line\");\n/**\n * Defines a line that can be drawn\n */\nvar LineShape = (function (_super) {\n    __extends(LineShape, _super);\n    /**\n     * Generate a new line that can be drawn\n     */\n    function LineShape(options) {\n        var _this = _super.call(this, options.p1, options.p2) || this;\n        _this.depth = options.depth || 0.0;\n        _this.endColor = options.endColor;\n        _this.startColor = options.startColor;\n        _this.thickness = options.thickness || 1.0;\n        return _this;\n    }\n    /**\n     * Clones this instance of the line shape and creates a new instance of a line shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this line shape\n     */\n    LineShape.prototype.clone = function (newProperties) {\n        return Object.assign(new LineShape(this), newProperties);\n    };\n    return LineShape;\n}(line_1.Line));\nexports.LineShape = LineShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/line-shape.ts\n// module id = 23\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shape_buffer_cache_1 = require(\"./shape-buffer-cache\");\n/** This is a part of the identifier that is used to retrieve a multibuffer's storage */\nvar multiBufferSelectionPrefix = '__mb__';\n/** This is to ensure each multibuffer gets it's own unique selection identifier */\nvar multiBufferSelectionKeyUID = 0;\nfunction getIDProp(item) {\n    return item.id;\n}\nfunction evenRoundRobinBufferAdd(item, buffers) {\n    var smallest = buffers[0].buffer.length;\n    var found = buffers[0];\n    // Look for the next buffer that has the smallest length\n    // To fill it up\n    buffers.some(function (tracker) {\n        if (tracker.buffer.length < smallest) {\n            found = tracker;\n            return true;\n        }\n        return false;\n    });\n    found.buffer.push(item);\n    return [found];\n}\nfunction noop() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // NO-OP\n}\nfunction echoBuffer(item, buffer, buffers) {\n    return [buffer];\n}\n/**\n * This class helps facilitate breaking up a potentially large shape buffer into multiple buffers.\n */\nvar MultiShapeBufferCache = (function (_super) {\n    __extends(MultiShapeBufferCache, _super);\n    /**\n     * Makes a new multi shape buffer for minimizing changes\n     *\n     * @param numBuffers The number of buffers this multibuffer will manage\n     */\n    function MultiShapeBufferCache(numBuffers, methods) {\n        var _this = _super.call(this) || this;\n        /** The number of buffers this multi buffer manages */\n        _this.numBuffers = 0;\n        /** UID for storing the data for this buffer in the selection */\n        _this.selectionUID = multiBufferSelectionPrefix + (++multiBufferSelectionKeyUID);\n        /**\n         * The method used to add to the buffers. This is changeable so one can implement geometric or\n         * logical adds for invalidation. This returns a list of buffers that will be invalidated from\n         * the operation. The first buffer returned in the invalidation is the strongly associated buffer\n         * to the item injected. This first buffer is the most likely buffer the item is injected into.\n         */\n        _this.addMethod = evenRoundRobinBufferAdd;\n        /**\n         * Gives an implentor opportunity to define the way an is is specified for a given item. It\n         * defaults to searching for an 'id' property on the item.\n         */\n        _this.idMethod = getIDProp;\n        /**\n         * The method that is called right after the initial buffers get constructed. This is changeable\n         * so monitors can.\n         */\n        _this.initMethod = noop;\n        /**\n         * The method that is called right before a shape is removed from a buffer.\n         * This let's the\n         */\n        _this.removeMethod = echoBuffer;\n        /**\n         * The method that is called when an item is updated. This gives a monitor a chance to invalidate\n         * a number of buffers.\n         */\n        _this.updateMethod = echoBuffer;\n        // Store the number of buffers that are created when the buffers are initialized\n        _this.numBuffers = numBuffers;\n        // Set the hook methods if any are specified\n        if (methods) {\n            _this.addMethod = methods.add || _this.addMethod;\n            _this.idMethod = methods.id || _this.idMethod;\n            _this.initMethod = methods.init || _this.initMethod;\n            _this.removeMethod = methods.remove || _this.removeMethod;\n            _this.updateMethod = methods.update || _this.updateMethod;\n        }\n        return _this;\n    }\n    /**\n     * Adds a shape to a buffer and invalidates it\n     *\n     * @param shape The shape to add to a buffer\n     */\n    MultiShapeBufferCache.prototype.addShape = function (shape) {\n        // Perform the custom add opearation\n        var buffers = this.addMethod(shape, this.store.allBuffers);\n        // Stores the shape for lookup via id\n        this.store.idToItem.set(this.idMethod(shape), shape);\n        // Stores the shape for lookup to buffer. We count the\n        // First dirty buffer as the buffer the item is the closest to\n        // Association.\n        this.store.itemToBuffer.set(shape, buffers[0]);\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    /**\n     * Sees if there is a shape associated with this id\n     *\n     * @param id\n     */\n    MultiShapeBufferCache.prototype.containsId = function (id) {\n        return Boolean(this.store.idToItem.get(id));\n    };\n    /**\n     * Sees if this shape has been added to this buffer or not\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.containsShape = function (shape) {\n        // Check if this multibuffer has the shape or no\n        return Boolean(this.store.itemToBuffer.get(shape));\n    };\n    /**\n     * This flags a list of buffers as dirty\n     *\n     * @param buffers\n     */\n    MultiShapeBufferCache.prototype.flagBuffersDirty = function (buffers) {\n        // Flag provided buffers as dirty\n        if (buffers) {\n            // This flags the indicated buffers as dirty\n            buffers.forEach(function (buffer) { return buffer.isDirty = true; });\n        }\n        else {\n            this.store.allBuffers.forEach(function (buffer) { return buffer.isDirty = true; });\n        }\n    };\n    /**\n     * @override\n     * This is called with triggers all of the updates necessary.\n     * We add in our buffer update and invalidation to this process here.\n     *\n     * @param args\n     */\n    MultiShapeBufferCache.prototype.generate = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Make sure the storage is established before trying to create modifications of any sort\n        this.getStorage(selection);\n        // Run the generation which will trigger cache building and modding\n        _super.prototype.generate.apply(this, arguments);\n        // We now invalidate any buffers that have been flagged\n        this.processDirtyBuffers();\n    };\n    /**\n     * @override\n     * This retrieves the multibuffer for this shape buffer\n     */\n    MultiShapeBufferCache.prototype.getBuffer = function () {\n        console.warn('A multishape buffer should have getBuffers called instead');\n        return [];\n    };\n    /**\n     * Get all of the buffers.\n     * WARNING: do NOT modify the output values in any way.\n     *\n     * @return {T[][]} All of the buffers\n     */\n    MultiShapeBufferCache.prototype.getBuffers = function () {\n        if (this.store) {\n            return this.store.allBuffers.map(function (tracker) { return tracker.buffer; });\n        }\n        return [];\n    };\n    /**\n     * Returns the number of buffers this MultiShapeBuffer is managing.\n     */\n    MultiShapeBufferCache.prototype.getNumBuffers = function () {\n        return this.store.allBuffers.length;\n    };\n    /**\n     * Retrieves a shape by the given id. Is undefined if the id is not recognized.\n     *\n     * @param id\n     */\n    MultiShapeBufferCache.prototype.getShapeById = function (id) {\n        return this.store.idToItem.get(id);\n    };\n    /**\n     * This makes all buffers a part of a new array pointer thus making sure\n     * they will be committed to the gpu.\n     */\n    MultiShapeBufferCache.prototype.processDirtyBuffers = function () {\n        this.store.allBuffers.forEach(function (tracker) {\n            if (tracker.isDirty) {\n                tracker.isDirty = false;\n                tracker.buffer = [].concat(tracker.buffer);\n            }\n        });\n    };\n    /**\n     * This retrieves the storage inside the selection. If it doesn't exist,\n     * then the storage is created.\n     *\n     * @param selection\n     */\n    MultiShapeBufferCache.prototype.getStorage = function (selection) {\n        // Get the storage from the selection\n        var storage = (selection.getSelection(this.selectionUID) || [])[0];\n        // If the storage is not stored in the selection, then we create a storage and update the selection with that storage\n        if (!storage) {\n            storage = {\n                allBuffers: [],\n                idToItem: new Map(),\n                itemToBuffer: new Map(),\n            };\n            // Generate the buffers indicated\n            for (var i = 0; i < this.numBuffers; ++i) {\n                storage.allBuffers.push({\n                    buffer: [],\n                    isDirty: false,\n                });\n            }\n            // Initialize anything that may be monitoring the buffers\n            this.initMethod(storage.allBuffers);\n            // Add the storage to the selection\n            selection.select(this.selectionUID, storage);\n        }\n        // Make sure our internal pointer to the storage is set correctly\n        return (this.store = storage);\n    };\n    /**\n     * Removes a shape from the buffer it is a part of.\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.removeShape = function (shape) {\n        // This is the buffer associated with the shape\n        var buffer = this.store.itemToBuffer.get(shape);\n        // Get the buffers invalidated by the remove\n        var buffers = this.removeMethod(shape, buffer, this.store.allBuffers);\n        // Clear the shape out from the buffer\n        buffer.buffer.splice(buffer.buffer.indexOf(shape), 1);\n        // Delete the item from the id lookup\n        this.store.idToItem.delete(this.idMethod(shape));\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    /**\n     * This is called to indicate an update to an item has occurred.\n     *\n     * @param shape\n     */\n    MultiShapeBufferCache.prototype.updateShape = function (shape) {\n        // Flag each element that needs updating\n        var buffers = this.updateMethod(shape, this.store.itemToBuffer.get(shape), this.store.allBuffers);\n        // Flag all of the touched buffers as dirty\n        this.flagBuffersDirty(buffers);\n    };\n    return MultiShapeBufferCache;\n}(shape_buffer_cache_1.ShapeBufferCache));\nexports.MultiShapeBufferCache = MultiShapeBufferCache;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/multi-shape-buffer-cache.ts\n// module id = 24\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar ShapeBufferCache = (function () {\n    function ShapeBufferCache() {\n        this.buffer = [];\n        this.bustCache = true;\n    }\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    ShapeBufferCache.prototype.generate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this.bustCache) {\n            this.buildCache.apply(this, args);\n            this.bustCache = false;\n        }\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    ShapeBufferCache.prototype.buildCache = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Get the buffer the cache has generated\n     */\n    ShapeBufferCache.prototype.getBuffer = function () {\n        return this.buffer;\n    };\n    return ShapeBufferCache;\n}());\nexports.ShapeBufferCache = ShapeBufferCache;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/shape-buffer-cache.ts\n// module id = 25\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./webgl-surface/webgl-surface\"));\n__export(require(\"./webgl-surface/buffers\"));\n__export(require(\"./webgl-surface/drawing\"));\n__export(require(\"./webgl-surface/primitives\"));\n__export(require(\"./webgl-surface/util\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.ts\n// module id = 26\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = require(\"ramda\");\nvar React = require(\"react\");\nvar three_1 = require(\"three\");\nvar atlas_manager_1 = require(\"./drawing/texture/atlas-manager\");\nvar atlas_texture_1 = require(\"./drawing/texture/atlas-texture\");\nvar bounds_1 = require(\"./primitives/bounds\");\nvar frame_info_1 = require(\"./util/frame-info\");\nvar mouse_1 = require(\"./util/mouse\");\nvar quad_tree_1 = require(\"./util/quad-tree\");\nvar webgl_stat_1 = require(\"./util/webgl-stat\");\nvar debug = require('debug')('webgl-surface:GPU');\nvar debugCam = require('debug')('webgl-surface:Camera');\nvar debugLabels = require('debug')('webgl-surface:Labels');\nvar debugColors = require('debug')('webgl-surface:Colors');\n/**\n * This enum names the base methods that are passed into the applyPropsMethods\n * method. This allows subclasses to easily pick the property setting methods they need\n * from the base\n */\nvar BaseApplyPropsMethods;\n(function (BaseApplyPropsMethods) {\n    /** Initializes any context that needs to be set up before the props are set */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"INITIALIZE\"] = 0] = \"INITIALIZE\";\n    /** Moment when any buffer changes should be applied */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"BUFFERCHANGES\"] = 1] = \"BUFFERCHANGES\";\n    /** Initializes camera properties to facilitate smoothe start up */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"CAMERA\"] = 2] = \"CAMERA\";\n    /** Generates the labels as images within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"LABELS\"] = 3] = \"LABELS\";\n    /** Generates the colors within the atlas manager */\n    BaseApplyPropsMethods[BaseApplyPropsMethods[\"COLORS\"] = 4] = \"COLORS\";\n})(BaseApplyPropsMethods = exports.BaseApplyPropsMethods || (exports.BaseApplyPropsMethods = {}));\n/**\n * This enum names the base methods that are passed into the animatedMethods\n * method. This allows subsclasses to easily pick the animated methods they need\n * from the base\n */\nvar BaseAnimatedMethods;\n(function (BaseAnimatedMethods) {\n    /** Sets up the base context needed to execute most methods */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"CONTEXT\"] = 0] = \"CONTEXT\";\n    /** Sets up the inertia method for inertial panning */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"INERTIA\"] = 1] = \"INERTIA\";\n    /** Animates the postion of the camera to a destination */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"POSITION\"] = 2] = \"POSITION\";\n    /** Zooms the camera based on a point of focus */\n    BaseAnimatedMethods[BaseAnimatedMethods[\"ZOOM\"] = 3] = \"ZOOM\";\n})(BaseAnimatedMethods = exports.BaseAnimatedMethods || (exports.BaseAnimatedMethods = {}));\nfunction isAnimatedWithOptions(value) {\n    if (value.options) {\n        return true;\n    }\n    return false;\n}\nfunction isAnimated(value) {\n    if (!value.options) {\n        return true;\n    }\n    return false;\n}\n/** This is the smallest increment the zoom can make. Anything less and nothing will happen */\nvar MIN_ZOOM_INCREMENT = 0.001;\nvar BYTE_MAX = 0xFF;\nvar BACKGROUND_COLOR = new three_1.Color().setRGB(38 / BYTE_MAX, 50 / BYTE_MAX, 78 / BYTE_MAX);\n// --[ CONSTANTS ]-------------------------------------------\n// Make a container vector for performing operations within\nvar vector = new three_1.Vector3();\n// --[ SHADERS ]-------------------------------------------\n/**\n * Equivalent of Math.sign, but faster, and works in all browsers\n *\n * @param {number} value The number to determine the sign\n *\n * @return {number} Returns zero if a sign can not be determined, -1 for a negative, 1 for a positive\n */\nfunction sign(value) {\n    if (!value) {\n        return 0;\n    }\n    if (value > 0) {\n        return 1;\n    }\n    if (value < 0) {\n        return -1;\n    }\n    return 0;\n}\n/**\n * The base component for the communications view\n */\nvar WebGLSurface = (function (_super) {\n    __extends(WebGLSurface, _super);\n    function WebGLSurface() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** This is the atlas manager for managing images and labels rendered as textures */\n        _this.atlasManager = new atlas_manager_1.AtlasManager(2048, 2048);\n        /** Tracks the names of the atlas' generated */\n        _this.atlasNames = {\n            colors: 'colors',\n            labels: 'labels',\n        };\n        /**\n         * List of methods that execute within the animation loop. Makes adding and removing these methods\n         * simpler to manage, as well as gives a clear and optimized way of overriding existing methods\n         * or reordering their execution\n         */\n        _this.animatedMethodList = [];\n        /**\n         * If this is set to true during an animated method's lifecycle, then all subsequent animated methods\n         * will not be executed for the current frame. Upon reaching the end of the frame, the break will reset\n         * and the animated methods will attempt executing again\n         */\n        _this.animatedMethodBreak = false;\n        /**\n         * The camera that 'looks' at our world and gives us the ability to convert\n         * screen coordinates to world coordinates, and vice versa\n         */\n        _this.camera = new three_1.OrthographicCamera(0, 0, 0, 0, 0, 0);\n        /**\n         * While this number is positive it will be decremented every frame.\n         * While positive, mouse interactions will not occur. This utilizes frame ticks\n         * as SOME values and numbers settle per frame, not necessarily within timelapses.\n         * More often than not, there will only be a need for 1-2 frames of mouse disable to\n         * allow the camera to be positioned in a correct location before screen to world projections\n         * start taking place.\n         */\n        _this.disableMouseInteraction = 0;\n        /** Used to aid in mouse interactions */\n        _this.distance = 0;\n        _this.sizeCamera = null;\n        /** Keep track of the current zoom so it can be set in requestAnimationFrame */\n        _this.currentZoom = 1;\n        /** Horizontal destination the camera will pan to */\n        _this.destinationX = 0;\n        /** Vertical position the camera will pan to */\n        _this.destinationY = 0;\n        /** The destination zoom level the camera used during panning */\n        _this.destinationZoom = 1;\n        /** Is the camera currently in a panning state */\n        _this.isPanning = false;\n        /** Last known screen position of the mouse */\n        _this.lastMousePosition = { x: 0, y: 0 };\n        /** List of methods to execute when applying props */\n        _this.propsMethodList = [];\n        /** Inertial values for drag panning */\n        _this.inertia = null;\n        _this.inertiaBuild = 1.5;\n        _this.inertiaDecay = .9;\n        _this.inertiaMax = 100;\n        /**\n         * All data is put into this quad tree so we can query spatial regions for\n         * items\n         */\n        _this.quadTree = null;\n        /**\n         * True if the shift key is currently being held\n         *\n         * Panning is affected by whether or not the shift key is being held down, but\n         * I don't know how yet.\n         */\n        _this.shiftIsDown = false;\n        _this.stop = false;\n        /** The current rendered position and zoom */\n        _this.currentX = 0;\n        _this.currentY = 0;\n        _this.targetZoom = 1;\n        /** The (world) position the focus will zoom in and out of */\n        _this.previousZoomToFit = 0;\n        _this.zoomTargetX = 0;\n        _this.zoomTargetY = 0;\n        /** When this is set, the draw loop continues to run. Used by the draw loop to complete animations */\n        _this.animating = false;\n        _this.labels = [];\n        _this.labelsReady = false;\n        /**\n         * This is the latest labels loading identifier, used to determine if the labels\n         * last loaded matches the labels currently needing to be rendered.\n         */\n        _this.labelsCurrentLoadedId = 0;\n        _this.labelsLoadId = 0;\n        /** When this is set to true, the atlas with the colors is now ready to be referenced */\n        _this.colors = [];\n        _this.colorsReady = false;\n        /** Holds the items currently hovered over */\n        _this.currentHoverItems = [];\n        /** Mouse in stage or not */\n        _this.dragOver = true;\n        /** Flag for detecting whether or not webgl is supported at all */\n        /**\n         * This is the update loop that operates at the requestAnimationFrame speed.\n         * This updates the cameras current position and causes changes over time for\n         * any property that has a start and a destination.\n         */\n        _this.animate = function () {\n            if (_this.stop) {\n                return;\n            }\n            frame_info_1.FrameInfo.lastFrameTime = Date.now();\n            frame_info_1.FrameInfo.framesPlayed.set(_this, (frame_info_1.FrameInfo.framesPlayed.get(_this) || 0) + 1);\n            requestAnimationFrame(function () { return _this.animate(); });\n            var response;\n            var doDraw = false;\n            var didBreak = _this.animatedMethodList.some(function (method) {\n                if (isAnimatedWithOptions(method)) {\n                    if (method.options.labelsReady && method.options.colorsReady) {\n                        if (_this.labelsReady && _this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.labelsReady) {\n                        if (_this.labelsReady) {\n                            response = method.method();\n                        }\n                    }\n                    else if (method.options.colorsReady) {\n                        if (_this.colorsReady) {\n                            response = method.method();\n                        }\n                    }\n                }\n                else if (isAnimated(method)) {\n                    response = method();\n                }\n                // Update our draw status based on response\n                if (!doDraw) {\n                    doDraw = response.doDraw;\n                }\n                // Stop the system if needed\n                if (response.stop) {\n                    _this.stop = true;\n                }\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            // We prevent any animation loop execution if we did break\n            if (didBreak) {\n                return;\n            }\n            // Make sure all camera related uniforms are up to date\n            _this.updateCameraUniforms();\n            // Handle the deactivation period of mouse interactions by decrementing it\n            // If it's positive\n            if (_this.disableMouseInteraction > 0) {\n                _this.disableMouseInteraction--;\n            }\n            if (doDraw || _this.forceDraw) {\n                _this.forceDraw = false;\n                _this.emitViewport();\n                _this.draw();\n            }\n        };\n        /**\n         * Applies new props injected into this component.\n         *\n         * Applying new props does not entail that a re-render will happen so we\n         * handle application of props as a separate concept. Here we:\n         *\n         * set up zoom targetting and apply quested zoom levels\n         *\n         * Create our quad tree and associate properties to objects if a new dataset\n         * is provided\n         *\n         * Analyze our dataset for interesting and useful metrics such as max and mins\n         * to aid in visualization normalization\n         *\n         * @param {T} props The new properties for this component\n         */\n        _this.applyProps = function (props) {\n            debug('Applying props');\n            var response;\n            _this.propsMethodList.some(function (method) {\n                response = method(props);\n                // Stop performing\n                if (response.break) {\n                    return true;\n                }\n                return false;\n            });\n            debugCam('current cam', _this.currentX, _this.currentY, _this.destinationX, _this.destinationY);\n            debugCam('Zoom Target: [%o, %o]', _this.zoomTargetX, _this.zoomTargetY);\n            debugCam('Last Mouse: [%o, %o]', _this.lastMousePosition.x, _this.lastMousePosition.y);\n        };\n        /**\n         * This initializes the surface and calls for sub class classes to initialize\n         * their buffers\n         *\n         * @param {HTMLElement} el The DOM element this component is contained in\n         * @param {number} w The width of the rendering\n         * @param {number} h The height of the rendering\n         */\n        _this.init = function (el, w, h) {\n            if (!el || _this.scene) {\n                return;\n            }\n            _this.renderEl = el;\n            if (w === 0 || h === 0) {\n                return;\n            }\n            debug('Initializing GPU objects el: %o width: %o height: %o', el, w, h);\n            // Set up a ctx for our render space\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2.0,\n                width: w,\n                widthHalf: w / 2.0,\n            };\n            // Set up the camera now that the ctx is set up\n            _this.initCamera();\n            // Create a scene so we can add our buffer objects to it\n            // We also add the scene to the window to make threejs tools available\n            window.scene = _this.scene = new three_1.Scene();\n            // Fire our hook for starting up our specific buffer implementation\n            _this.initBuffers();\n            // FINALIZE SET UP\n            // Generate the renderer along with it's properties\n            _this.renderer = new three_1.WebGLRenderer({\n                alpha: _this.props.backgroundColor && (_this.props.backgroundColor.opacity < 1.0),\n                antialias: true,\n                preserveDrawingBuffer: true,\n            });\n            // This sets the pixel ratio to handle differing pixel densities in screens\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            // Applies the background color and establishes whether or not the context supports\n            // Alpha or not\n            if (_this.props.backgroundColor) {\n                _this.renderer.setClearColor(new three_1.Color(_this.props.backgroundColor.r, _this.props.backgroundColor.g, _this.props.backgroundColor.b), _this.props.backgroundColor.opacity);\n            }\n            else {\n                _this.renderer.setClearColor(BACKGROUND_COLOR);\n            }\n            // We render shapes. We care not for culling.\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            // Set up DOM interaction with the renderer\n            var container = el;\n            container.appendChild(_this.renderer.domElement);\n            // Get the gl context for queries and advanced operations\n            _this.gl = _this.renderer.domElement.getContext('webgl');\n            _this.makeDraggable(document.getElementById('div'), _this);\n        };\n        /**\n         * Initializes the camera and any contexts associated with it\n         */\n        _this.initCamera = function () {\n            debug('Initializing Camera');\n            // INITIALIZE THE CAMERA\n            var h = _this.ctx.height;\n            var viewSize = h;\n            var w = _this.ctx.width;\n            var aspectRatio = w / h;\n            var viewport = {\n                aspectRatio: aspectRatio,\n                bottom: -viewSize / 2,\n                far: 10000000,\n                left: (-aspectRatio * viewSize) / 2,\n                near: -100,\n                right: (aspectRatio * viewSize) / 2,\n                top: viewSize / 2,\n                viewSize: viewSize,\n            };\n            _this.camera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.sizeCamera = new three_1.OrthographicCamera(viewport.left, viewport.right, viewport.top, viewport.bottom, viewport.near, viewport.far);\n            _this.camera.position.z = 300;\n            _this.sizeCamera.position.set(0, 0, 300);\n        };\n        /**\n         * This is executed when our rendering surface (the canvas) changes in size in any\n         * way. It will make sure our renderer matches the context to prevent scaling\n         * and other deformations.\n         */\n        _this.resizeContext = function () {\n            var w = _this.props.width;\n            var h = _this.props.height;\n            // See if a renderer even exists yet\n            if (!_this.renderer) {\n                return false;\n            }\n            var renderSize = _this.renderer.getSize();\n            // Check if the resize is needed\n            if (renderSize.width === w && renderSize.height === h) {\n                return false;\n            }\n            debug('RENDERER RESIZE');\n            _this.ctx = {\n                height: h,\n                heightHalf: h / 2,\n                width: w,\n                widthHalf: w / 2,\n            };\n            var zoom = _this.camera.zoom;\n            var position = _this.camera.position.clone();\n            _this.initCamera();\n            _this.camera.zoom = zoom;\n            _this.camera.position.set(position.x, position.y, position.z);\n            _this.camera.updateProjectionMatrix();\n            _this.renderer.setPixelRatio(window.devicePixelRatio);\n            _this.renderer.setSize(w, h);\n            _this.renderer.setFaceCulling(three_1.CullFaceNone);\n            if (_this.props.backgroundColor) {\n                var color = _this.props.backgroundColor;\n                _this.renderer.setClearColor(new three_1.Color(color.r, color.g, color.b), color.opacity < 1.0 ? color.opacity : undefined);\n            }\n            else {\n                _this.renderer.setClearColor(BACKGROUND_COLOR);\n            }\n            return true;\n        };\n        /**\n         * This method handles emitting the viewport and the current visible elements\n         * to the subclass that needs detailed information regarding the viewport.\n         */\n        _this.emitViewport = function () {\n            var tl = _this.screenToWorld(0, 0);\n            var br = _this.screenToWorld(_this.ctx.width, _this.ctx.height);\n            _this.camera.updateMatrixWorld(true);\n            var visible = _this.quadTree.query(new bounds_1.Bounds(tl.x, br.x, tl.y, br.y));\n            _this.onViewport(visible, _this.projection, _this.ctx);\n        };\n        /**\n         * Handles mouse interactions when the mouse is pressed on the canvas. This\n         * engages panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseDown = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = true;\n            _this.distance = 0;\n            _this.onMouseDown();\n        };\n        /**\n         * Handles mouse interactions when the mouse is release or left the canvas. This\n         * stops panning.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseOut = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            _this.distance = 0;\n            _this.onMouseOut();\n        };\n        /**\n         * Handles mouse interactions when the mouse is released on the canvas. This\n         * stops panning and engages click events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseUp = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            _this.isPanning = false;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            // Handle mouse interaction\n            if (_this.distance < 5) {\n                var hitInside = [];\n                // Circle Interaction\n                var hitItems = _this.quadTree.query(world);\n                for (var _i = 0, hitItems_1 = hitItems; _i < hitItems_1.length; _i++) {\n                    var item = hitItems_1[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                    }\n                }\n                // Tell the listener that the user clicked on some items\n                if (hitInside.length) {\n                    _this.onMouseUp(e, hitInside, mouse, world, _this.projection);\n                }\n                else {\n                    _this.onMouseUp(e, null, mouse, world, _this.projection);\n                }\n            }\n        };\n        /**\n         * Handles mouse interactions when the mouse is moving on the canvas. This\n         * causes panning and hover events.\n         *\n         * @param {React.MouseEvent<HTMLDivElement>} e The mouse event from React\n         */\n        _this.handleMouseMove = function (e) {\n            // Quick quit if mouse interactions are disabled\n            if (_this.disableMouseInteraction > 0) {\n                return;\n            }\n            var onMouse = _this.props.onMouse;\n            var zoom = _this.props.zoom;\n            var mouse = mouse_1.eventElementPosition(e);\n            var world = _this.screenToWorld(mouse.x, mouse.y);\n            _this.distance++;\n            debug('mouse X %o Y %o', mouse.x, mouse.y);\n            // Handle panning\n            if (_this.isPanning) {\n                debug('down and moving ~~');\n                var xDistance = (mouse.x - _this.lastMousePosition.x) / _this.targetZoom;\n                var yDistance = -(mouse.y - _this.lastMousePosition.y) / _this.targetZoom;\n                // Execute the hook to allow subclasses\n                var pan = _this.willPan(xDistance, yDistance);\n                xDistance = pan.x;\n                yDistance = pan.y;\n                _this.destinationX -= xDistance;\n                _this.destinationY -= yDistance;\n                _this.inertia = _this.inertia || { x: 0, y: 0 };\n                if (sign(xDistance) !== sign(_this.inertia.x)) {\n                    _this.inertia.x = 0;\n                }\n                if (sign(yDistance) !== sign(_this.inertia.y)) {\n                    _this.inertia.y = 0;\n                }\n                _this.inertia.x = xDistance * _this.inertiaBuild;\n                _this.inertia.y = yDistance * _this.inertiaBuild;\n                var maxInertia = _this.inertiaMax / zoom;\n                var mag = Math.sqrt(_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y);\n                // Make sure the magnitude of the inertia is less than our max allowed\n                if (mag > maxInertia) {\n                    // Since it's greater, let's confine the inertia's magnitude to the max magnitude\n                    // By normalizing the intertia vector and multilying it by the max\n                    _this.inertia.x = (_this.inertia.x / mag) * maxInertia;\n                    _this.inertia.y = (_this.inertia.y / mag) * maxInertia;\n                }\n            }\n            if (_this.quadTree && !_this.isPanning) {\n                // Empty the last hovered items to populate a new list\n                var currentHoverItems = [];\n                // Handle mouse interaction with items\n                // Interaction with circles\n                var hitItems = _this.quadTree.query(world);\n                var hitInside = [];\n                for (var _i = 0, hitItems_2 = hitItems; _i < hitItems_2.length; _i++) {\n                    var item = hitItems_2[_i];\n                    // Fine tuning for interaction\n                    if (item.pointInside(world)) {\n                        hitInside.push(item);\n                        currentHoverItems.push(item);\n                    }\n                }\n                // Inform of all items hit or hovered\n                _this.onMouseHover(hitInside, mouse, world, _this.projection);\n                // Diff the currently hovered items with the old ones to see what is\n                // No longer hit\n                var left = [];\n                for (var _a = 0, _b = _this.currentHoverItems; _a < _b.length; _a++) {\n                    var item = _b[_a];\n                    if (currentHoverItems.indexOf(item) < 0) {\n                        left.push(item);\n                    }\n                }\n                // Inform of all items no longer hovered\n                _this.onMouseLeave(left, mouse, world, _this.projection);\n                _this.currentHoverItems = currentHoverItems;\n            }\n            if (onMouse) {\n                _this.onMouse(mouse, world, _this.isPanning);\n            }\n            _this.lastMousePosition = mouse;\n        };\n        /**\n         * We make the ref application be a declared function so react does not find the need to execute the\n         * application numerous times for a detected changed method\n         *\n         * @param {HTMLElement} n This is the canvas element from the dom\n         */\n        _this.applyRef = function (n) {\n            _this.init(n, _this.props.width, _this.props.height);\n            _this.applyProps(_this.props);\n        };\n        return _this;\n    }\n    /**\n     * This is a hook so subclasses can contribute animated methods to the animation loop and organize the base methods\n     * as desired.\n     *\n     * @param {AnimatedMethodLookup} baseAnimatedMethods The base animated methods referenceable by name\n     * @param {AnimatedMethod[]} orderedBaseAnimatedMethods The base animated methods in their default order for ease of use\n     *\n     * @return {AnimatedMethods[]} The list of animated methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.animatedMethods = function (baseAnimatedMethods, orderedBaseAnimatedMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBaseAnimatedMethods;\n    };\n    /**\n     * This generates the base animated methods lookup.\n     * We do not make these methods a part of the class as this is the base class\n     * We want the start up methods to be inconsequential to sub classes, thus allowing\n     * us to override, sort, or replace the initial methods and have the method get garbage\n     * collected and no longer a part of the object. It is recommended to make the sub classes\n     * actually point to class methods for better clarity\n     *\n     * @return {ANimatedMethodLookup} The base animated methods in a lookup\n     */\n    WebGLSurface.prototype.animatedMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            // Context changes and early checks\n            _a[BaseAnimatedMethods.CONTEXT] = function () {\n                var response = {\n                    break: false,\n                    doDraw: false,\n                };\n                if (_this.resizeContext()) {\n                    response.doDraw = true;\n                }\n                // Quadtree MUST be present to do proper computations\n                if (!_this.quadTree) {\n                    response.break = true;\n                }\n                return response;\n            },\n            // Apply inertia\n            _a[BaseAnimatedMethods.INERTIA] = function () {\n                if (!_this.isPanning) {\n                    if (_this.inertia) {\n                        // Disabled inertia for now\n                        // This.destinationX -= this.inertia.x\n                        // This.destinationY -= this.inertia.y\n                        _this.inertia.x *= _this.inertiaDecay;\n                        _this.inertia.y *= _this.inertiaDecay;\n                        if (_this.inertia.x * _this.inertia.x + _this.inertia.y * _this.inertia.y < 1) {\n                            _this.inertia = null;\n                        }\n                    }\n                }\n                // A non response\n                return {\n                    doDraw: false,\n                };\n            },\n            // Apply position\n            _a[BaseAnimatedMethods.POSITION] = function () {\n                // If values are transitioned rather than immediately applied, this is\n                // The value you would want the minimum change to be before cutting off\n                // The transition\n                // Const minAdjust = 1 / this.props.zoom\n                // If there is change in X apply the new position to the old\n                // This is where animated values were originally placed and can be placed\n                // Again if a transition is desired\n                var response = {\n                    doDraw: (_this.currentX !== _this.destinationX) || (_this.currentY !== _this.destinationY),\n                };\n                _this.currentX = _this.destinationX;\n                _this.currentY = _this.destinationY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            // Apply zooming\n            _a[BaseAnimatedMethods.ZOOM] = function () {\n                var response = {\n                    doDraw: false,\n                };\n                // Apply Zoom\n                // Const zoomToFitH = this.ctx.width / Math.max(this.quadTree.bounds.width, this.props.viewport.width);\n                // Const zoomToFitV = this.ctx.height / Math.max(this.quadTree.bounds.height, this.props.viewport.height);\n                // Const zoomToFit = Math.min(zoomToFitH, zoomToFitV);\n                var zoomToFit = 1;\n                var destZoom = _this.destinationZoom * zoomToFit;\n                var dZoom = Math.abs(destZoom - _this.targetZoom);\n                var minDZoom = MIN_ZOOM_INCREMENT;\n                var zoomRate = 3;\n                if (dZoom > minDZoom) {\n                    _this.targetZoom = _this.targetZoom + ((destZoom - _this.targetZoom) / zoomRate);\n                    response.doDraw = true;\n                }\n                else if (dZoom !== 0) {\n                    _this.targetZoom = destZoom;\n                    response.doDraw = true;\n                }\n                // Get the zoom target metrics before zooming\n                var zoomTargetX = _this.zoomTargetX;\n                var zoomTargetY = _this.zoomTargetY;\n                var screenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Update the camera zoom level\n                _this.zoomCamera(_this.targetZoom);\n                // After we have zoomed we see how much our target location moved on screen\n                var newScreenZoomTarget = _this.worldToScreen(zoomTargetX, zoomTargetY);\n                // Now we move our screen by the moved delta to keep it exactly where it was before hand\n                var zoomDX = -(newScreenZoomTarget.x - screenZoomTarget.x) / _this.targetZoom;\n                var zoomDY = (newScreenZoomTarget.y - screenZoomTarget.y) / _this.targetZoom;\n                _this.currentX -= zoomDX;\n                _this.currentY -= zoomDY;\n                _this.destinationX -= zoomDX;\n                _this.destinationY -= zoomDY;\n                _this.positionCamera(_this.currentX, _this.currentY);\n                return response;\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for subclasses to be able to apply buffer changes that rely\n     * on colors rendered into the atlas after the system has prepped the colors for render.\n     */\n    WebGLSurface.prototype.applyColorBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * This is a hook for subclasses to be able to apply label buffer changes after the system has\n     * prepped the labels for render.\n     */\n    WebGLSurface.prototype.applyLabelBufferChanges = function (props) {\n        // Note: For subclasses\n    };\n    /**\n     * @override\n     * This is a hook so subclasses can contribute property application methods to the applyProps process and organize the base methods\n     * as desired.\n     *\n     * @param {ApplyPropsMethodLookup<T>} basePropsMethods The base props methods referenceable by name\n     * @param {ApplyPropsMethod<T>[]} orderedBasePropsMethods The base animated methods in their default order for ease of use\n     *\n     * @return {ApplyPropsMethod<T>[]} The list of property application methods in the order they are expected to be executed\n     */\n    WebGLSurface.prototype.applyPropsMethods = function (basePropsMethods, orderedBasePropsMethods) {\n        // Default functionality is to use the simple preordered list\n        return orderedBasePropsMethods;\n    };\n    /**\n     * This is a hook so subclasses can contribute methods to the applying props procedure and organize the base methods\n     * as desired.\n     *\n     * @return {ApplyPropsMethodLookup<T>} The base apply props method that are indexed for ease of reference\n     */\n    WebGLSurface.prototype.applyPropsMethodsBase = function () {\n        var _this = this;\n        return _a = {},\n            _a[BaseApplyPropsMethods.INITIALIZE] = function (props) {\n                var backgroundColor = props.backgroundColor, height = props.height, width = props.width;\n                _this.init(_this.renderEl, width, height);\n                if (!_this.renderEl || width === 0 || height === 0) {\n                    return {\n                        break: true,\n                    };\n                }\n                // Get the target for zooming\n                if (_this.camera) {\n                    var world = _this.screenToWorld(_this.lastMousePosition.x, _this.lastMousePosition.y);\n                    _this.zoomTargetX = world.x;\n                    _this.zoomTargetY = world.y;\n                }\n                if (_this.renderer && backgroundColor) {\n                    var oldColor = _this.props.backgroundColor || {\n                        b: BACKGROUND_COLOR.b,\n                        g: BACKGROUND_COLOR.g,\n                        opacity: 1.0,\n                        r: BACKGROUND_COLOR.r,\n                    };\n                    var same = oldColor.r === backgroundColor.r &&\n                        oldColor.g === backgroundColor.g &&\n                        oldColor.b === backgroundColor.b &&\n                        oldColor.opacity === backgroundColor.opacity;\n                    if (!same) {\n                        _this.renderer.setClearColor(new three_1.Color(backgroundColor.r, backgroundColor.g, backgroundColor.b), \n                        // Only if a transparent background is specified should we\n                        // Allow the parameter. We avoid the parameter to ensure\n                        // Transparent mode it not activated unless absolutely necessary\n                        backgroundColor.opacity < 1 ? backgroundColor.opacity : undefined);\n                    }\n                }\n                debug('props', props);\n                return {};\n            },\n            _a[BaseApplyPropsMethods.LABELS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.labels && props.labels !== _this.labels) {\n                    debugLabels('Labels are being comitted to an Atlas %o', props.labels);\n                    // Flag the labels as incapable of rendering\n                    _this.labelsReady = false;\n                    _this.labelsLoadId++;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.labels = props.labels;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.labels)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.labels);\n                    }\n                    var textures = props.labels.map(function (label) { return new atlas_texture_1.AtlasTexture(null, label); });\n                    debugLabels('Creating the atlas for labels based on these textures %o', textures);\n                    _this.atlasManager.createAtlas(_this.atlasNames.labels, textures)\n                        .then(function () {\n                        debugLabels('Labels rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.labels));\n                        _this.forceDraw = true;\n                        _this.labelsCurrentLoadedId++;\n                        // If we are done loading AND we match up with the current load id, then labels\n                        // For the latest labels update are indeed ready for display\n                        if (_this.labelsCurrentLoadedId === _this.labelsLoadId) {\n                            _this.labelsReady = true;\n                        }\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.COLORS] = function (props) {\n                var response = {};\n                // If we have a new labels reference we must regenerate the labels in our image lookup\n                if (props.colors && props.colors !== _this.colors) {\n                    debugColors('Colors are being comitted to an Atlas %o', props.colors);\n                    // Flag the labels as incapable of rendering\n                    _this.colorsReady = false;\n                    // Store the set of labels we are rendering so that they do not get re-generated\n                    // In the atlas rapidly.\n                    _this.colors = props.colors;\n                    if (_this.atlasManager.getAtlasTexture(_this.atlasNames.colors)) {\n                        _this.atlasManager.destroyAtlas(_this.atlasNames.colors);\n                    }\n                    debugColors('Creating the atlas for colors based on these colors %o', _this.colors);\n                    _this.atlasManager.createAtlas(_this.atlasNames.colors, null, _this.colors)\n                        .then(function () {\n                        debugColors('Colors rasterized within the atlas: %o', _this.atlasManager.getAtlasTexture(_this.atlasNames.colors));\n                        _this.forceDraw = true;\n                        _this.colorsReady = true;\n                        // Reapply the props so any buffers that were not updating can update now\n                        _this.applyProps(_this.props);\n                    });\n                }\n                return response;\n            },\n            _a[BaseApplyPropsMethods.BUFFERCHANGES] = function (props) {\n                // Call the hook to allow sub componentry to have a place to update it's buffers\n                _this.applyBufferChanges(props);\n                // We call the label buffering when the labels are ready to render.\n                // Labels now utilize the color atlas as well, thus requiring colors\n                // To be loaded\n                if (_this.labelsReady && _this.colorsReady) {\n                    debugLabels('labels changed %o', props);\n                    _this.applyLabelBufferChanges(props);\n                }\n                // For resources that only need the color atlas to be ready\n                if (_this.colorsReady) {\n                    _this.applyColorBufferChanges(props);\n                }\n                return {};\n            },\n            _a[BaseApplyPropsMethods.CAMERA] = function (props) {\n                _this.destinationZoom = props.zoom;\n                // On initialization this should start with some base camera metrics\n                if (props.viewport && props.viewport !== _this.appliedViewport && _this.quadTree) {\n                    debugCam('Applying viewport to camera: %o World Space Bounds: %o Screen context: %o', props.viewport, _this.quadTree.bounds, { width: props.width, height: props.height });\n                    // Position the camera over the mid of the specified viewport\n                    var mid = props.viewport.mid;\n                    _this.currentX = _this.destinationX = mid.x;\n                    _this.currentY = _this.destinationY = mid.y;\n                    // Calculate the zoom level when the input zoom is at 1\n                    var zoomAtOne = 1;\n                    // Calculate the zoom needed for the viewport\n                    var zoomToFitViewH = props.width / props.viewport.width;\n                    var zoomToFitViewV = props.height / props.viewport.height;\n                    var zoomToFit = Math.min(zoomToFitViewH, zoomToFitViewV);\n                    // This adjusts the destination zxoom by a tiny amount so the view will redraw\n                    var microAdjustment = 1.001;\n                    // Make our destination zoom a zoom that will fit the dimensions of the viewport\n                    // Relative to the zoom at one level\n                    _this.destinationZoom = zoomToFit / zoomAtOne;\n                    _this.targetZoom = (_this.destinationZoom * zoomAtOne) * microAdjustment;\n                    // Make sure any zooming that happens occurs over the middle of the initial viewport\n                    _this.zoomTargetX = mid.x;\n                    _this.zoomTargetY = mid.y;\n                    // Make sure mouse position doesn't mess with the zooming focus either\n                    _this.lastMousePosition.x = props.width / 2.0;\n                    _this.lastMousePosition.y = props.height / 2.0;\n                    // Apply the values immediately to the camera\n                    _this.positionCamera(_this.currentX, _this.currentY);\n                    _this.zoomCamera(_this.targetZoom);\n                    _this.updateCameraUniforms();\n                    // We request the calculated zoom level so adjustments on the input can be made\n                    if (props.onZoomRequest) {\n                        props.onZoomRequest(_this.destinationZoom);\n                        debugCam('Requesting zoom level', _this.destinationZoom);\n                    }\n                    // Let's disable mouse interactions for a little bit until the camera has settled into place\n                    var framesToDisable = 10;\n                    _this.disableMouseInteraction = framesToDisable;\n                    _this.appliedViewport = props.viewport;\n                    debugCam('init cam', _this.currentX, _this.currentY);\n                }\n                // Ensure we have our quad tree available even if it is empty\n                if (!_this.quadTree) {\n                    _this.quadTree = new quad_tree_1.QuadTree(0, 1, 1, 0);\n                }\n                return {};\n            },\n            _a;\n        var _a;\n    };\n    /**\n     * This is a hook for sub components to have a location to update their buffers\n     *\n     * @param {T} props This is the next set of props that are going to be applied to this component\n     */\n    WebGLSurface.prototype.applyBufferChanges = function (props) {\n        // NOTE: This will be implemented by base classes\n    };\n    /**\n     * @override\n     * Start the update loop and register any interesting listeners\n     */\n    WebGLSurface.prototype.componentDidMount = function () {\n        this.animate();\n    };\n    /**\n     * @override\n     * This will set up any unchanging context as well as establish the set of methods\n     * that are to be used within constructed method loops.\n     */\n    WebGLSurface.prototype.componentWillMount = function () {\n        /** Create our context bound projection methods for handing to processes that may need them */\n        this.projection = {\n            screenSizeToWorld: this.screenSizeToWorld.bind(this),\n            screenToWorld: this.screenToWorld.bind(this),\n            worldSizeToScreen: this.worldSizeToScreen.bind(this),\n            worldToScreen: this.worldToScreen.bind(this),\n        };\n        /** Generate our applying props methods to execute within our applyProps process */\n        var basePropsMethods = this.applyPropsMethodsBase();\n        this.propsMethodList = this.applyPropsMethods(basePropsMethods, [\n            basePropsMethods[BaseApplyPropsMethods.INITIALIZE],\n            basePropsMethods[BaseApplyPropsMethods.LABELS],\n            basePropsMethods[BaseApplyPropsMethods.COLORS],\n            basePropsMethods[BaseApplyPropsMethods.BUFFERCHANGES],\n            basePropsMethods[BaseApplyPropsMethods.CAMERA],\n        ]);\n        /** Generate our animated methods to execute within our animation loop */\n        var baseAnimatedMethods = this.animatedMethodsBase();\n        this.animatedMethodList = this.animatedMethods(baseAnimatedMethods, [\n            baseAnimatedMethods[BaseAnimatedMethods.CONTEXT],\n            baseAnimatedMethods[BaseAnimatedMethods.INERTIA],\n            baseAnimatedMethods[BaseAnimatedMethods.POSITION],\n            baseAnimatedMethods[BaseAnimatedMethods.ZOOM],\n        ]);\n    };\n    /**\n     * @override\n     * Simply applies the new injected props\n     *\n     * @param {T} props The new properties to be applied to this component\n     */\n    WebGLSurface.prototype.componentWillReceiveProps = function (props) {\n        this.applyProps(props);\n    };\n    /**\n     * @override\n     * Release listeners and stop update loop\n     */\n    WebGLSurface.prototype.componentWillUnmount = function () {\n        this.stop = true;\n        if (this.quadTree) {\n            this.quadTree.destroy();\n        }\n        this.quadTree = null;\n        this.camera = null;\n        this.sizeCamera = null;\n        this.ctx = null;\n        this.renderEl = null;\n        this.renderer = null;\n        this.scene = null;\n        this.atlasManager.destroyAtlas(this.atlasNames.colors);\n        this.atlasManager.destroyAtlas(this.atlasNames.labels);\n        frame_info_1.FrameInfo.framesPlayed.delete(this);\n    };\n    /**\n     * This is the draw method executed from the animation loop. Everytime, this is\n     * called, the webgl surface will be redrawn.\n     */\n    WebGLSurface.prototype.draw = function () {\n        // Draw the 3D scene\n        this.renderer.render(this.scene, this.camera);\n        if (this.props.onRender && (this.colorsReady || this.colors.length === 0)\n            && (this.labelsReady || this.labels.length === 0)) {\n            var imageData = this.renderer.domElement.toDataURL();\n            this.props.onRender(imageData);\n        }\n    };\n    /**\n     * This is a hook allowing sub classes to have a place to initialize their buffers\n     * and materials etc.\n     */\n    WebGLSurface.prototype.initBuffers = function () {\n        // NOTE: This is to be implemented by subclasses\n    };\n    /**\n     * Hook for subclasses to when the mouse moves. Provides some information\n     * about mouse location and interaction.\n     *\n     * @param {IPoint} mouse Position of the mouse relative to the canvas\n     * @param {IPoint} world Position of the mouse relative to the world space\n     * @param {boolean} isPanning The panning state of the mouse\n     */\n    WebGLSurface.prototype.onMouse = function (mouse, world, isPanning) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse down events\n     */\n    WebGLSurface.prototype.onMouseDown = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse out events\n     */\n    WebGLSurface.prototype.onMouseOut = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to mouse up events and the items that were interacted with in the process\n     *\n     * @param {React.MouseEvent} e The react synthetic event associated with the action\n     * @param {Bounds[]} hitInside The items the mouse interacted with\n     * @param {IPoint} mouse The location of the mouse on the screen\n     * @param {IPoint} world The location of the mouse projected into the world\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseUp = function (e, hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse hovering over an item included in the quadtree\n     *\n     * @param {Bounds[]} hitInside The items hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseHover = function (hitInside, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to the mouse leaving an item included in the quadtree\n     *\n     * @param {Bounds[]} left The items no longer hovered over by the mouse\n     * @param {IPoint} mouse The location of the mouse on the screen relative to the canvas\n     * @param {IPoint} world The location of the mouse projected to the world coordinates\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     */\n    WebGLSurface.prototype.onMouseLeave = function (left, mouse, world, projection) {\n        // NOTE: For subclasses\n    };\n    /**\n     * Hook for subclasses to respond to changes in the viewport and currently visible items\n     *\n     * @param {Bounds[]} visible\n     * @param {IProjection} projection The projection methods to go between the screen and world space\n     * @param {IScreenContext} ctx\n     */\n    WebGLSurface.prototype.onViewport = function (visible, projection, ctx) {\n        // NOTE: For subclasses\n    };\n    WebGLSurface.prototype.makeDraggable = function (element, stage) {\n        element.onmousedown = function (event) {\n            debug('DRAG~');\n            stage.dragOver = false;\n            document.onmousemove = function (event) {\n                debug('Move');\n                var mouseX = event.clientX;\n                var mouseY = event.clientY + window.scrollY;\n                var distanceX = (mouseX - stage.lastMousePosition.x) / stage.targetZoom;\n                var distanceY = (mouseY - stage.lastMousePosition.y) / stage.targetZoom;\n                stage.destinationX -= distanceX;\n                stage.destinationY += distanceY;\n                stage.lastMousePosition.x = mouseX;\n                stage.lastMousePosition.y = mouseY;\n            };\n            document.onmouseup = function () {\n                debug('Up');\n                document.onmousemove = null;\n                stage.isPanning = false;\n                stage.dragOver = true;\n            };\n            document.onmouseover = function () {\n                debug('Over');\n                if (stage.dragOver === false)\n                    stage.isPanning = true;\n            };\n            element.onmouseup = function () {\n                stage.dragOver = true;\n            };\n            // Text will not be selected when it is being dragged\n            element.onselectstart = function () { return false; };\n        };\n    };\n    /**\n     * Places the camera at a given location in world space\n     *\n     * @param {number} x The x-coordinate for the camera in world space\n     * @param {number} y The x-coordinate for the camera in world space\n     */\n    WebGLSurface.prototype.positionCamera = function (x, y) {\n        if (this.camera) {\n            this.camera.position.set(x, y, this.camera.position.z);\n        }\n    };\n    /**\n     * Projects a screen coordinate to a world coordinate\n     *\n     * @param {number} x The x coord within the screen to project into the world\n     * @param {number} y The y coord within the screen to project into the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenToWorld = function (x, y, obj) {\n        // Get the coordinates in normalized screen space\n        vector.set((x / this.ctx.width) * 2 - 1, -(y / this.ctx.height) * 2 + 1, 0.0);\n        // Unproject the normalized space to the world. It will project\n        // The vector to a REALLY far away z coordinate, but it does not matter\n        // Since we are utilizing an orthographic camera (no perspective distortion)\n        vector.unproject(this.camera);\n        obj = obj || { x: 0, y: 0 };\n        obj.x = vector.x;\n        obj.y = vector.y;\n        return obj;\n    };\n    /**\n     * Projects a size on the screen to the size represented in the world\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.screenSizeToWorld = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        obj.height = h / (this.sizeCamera ? this.sizeCamera.zoom : 1);\n        return obj;\n    };\n    /**\n     * Projects a world coordinate to the screen\n     *\n     * @param {number} x The x coord in the world to project to the screen\n     * @param {number} y The y coord in the world to project to the screen\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {IPoint} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldToScreen = function (x, y, obj) {\n        // This projects to NORMALIZED screen space (-1, 1) range for x and y\n        vector.set(x, y, 0);\n        vector.project(this.camera);\n        // Use the window dimensions to denormalize the vector\n        obj = ramda_1.merge(obj || {}, {\n            x: (vector.x * this.ctx.widthHalf) + this.ctx.widthHalf,\n            y: -(vector.y * this.ctx.heightHalf) + this.ctx.heightHalf,\n        });\n        return obj;\n    };\n    /**\n     * Projects a size within the world to how it would appear on the screen\n     *\n     * @param {number} w The size of the width on the screen to project to the world\n     * @param {number} h The size of the height on the screen to project to the world\n     * @param {object} obj An optional object in which the projected dimensions will\n     *                     be injected to\n     *\n     * @return {object} Either a new object with the projected dimensions or the object\n     *                  Insertted as a param that has the properties injected into\n     */\n    WebGLSurface.prototype.worldSizeToScreen = function (w, h, obj) {\n        obj = obj || new bounds_1.Bounds(0, 0, 0, 0);\n        obj.width = w * this.sizeCamera.zoom;\n        obj.height = h * this.sizeCamera.zoom;\n        return obj;\n    };\n    /**\n     * Sets the zoom level the camera will view the world with\n     *\n     * @param {number} zoom The zoom level. Must be > 0\n     */\n    WebGLSurface.prototype.zoomCamera = function (zoom) {\n        this.camera.zoom = zoom;\n        this.sizeCamera.zoom = zoom;\n        this.camera.updateProjectionMatrix();\n        this.sizeCamera.updateProjectionMatrix();\n    };\n    /**\n     * This is a hook allowing a sub class to update uniforms when the camera is changed in\n     * any way\n     */\n    WebGLSurface.prototype.updateCameraUniforms = function () {\n        // NOTE: For subclasses\n    };\n    /**\n     * @override\n     * Only re-render if the dimensions of the component have changed. All other\n     * internal render updates are handled internally\n     *\n     * @param {T} nextProps The next properties injected\n     */\n    WebGLSurface.prototype.shouldComponentUpdate = function (nextProps) {\n        return this.props.width !== nextProps.width || this.props.height !== nextProps.height;\n    };\n    /**\n     * Hook to allow subclasses some control over panning distances\n     *\n     * @param {number} distanceX The distance to pan in the x direction\n     * @param {number} distanceY The distance to pan in the y direction\n     *\n     * @return {Vector3} The vector indicating the direction to pan\n     */\n    WebGLSurface.prototype.willPan = function (distanceX, distanceY) {\n        return new three_1.Vector3(distanceX, distanceY, 0.0);\n    };\n    // -----[ Render ]---------------------------------------------\n    //\n    // In a React app, it's nice to put the render function at the bottom of the\n    // File\n    /**\n     * This should only attempt rendering when the canvas DOM element needs to be resized.\n     * You will note shouldComponentUpdate helps facilitate this.\n     */\n    WebGLSurface.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, width = _a.width, height = _a.height;\n        if (!webgl_stat_1.WebGLStat.WEBGL_SUPPORTED) {\n            return React.createElement(\"div\", null, this.props.children || 'Web GL not supported');\n        }\n        return (React.createElement(\"div\", { id: \"div\", onMouseDown: this.handleMouseDown, onMouseOut: this.handleMouseOut, onMouseUp: this.handleMouseUp, onMouseLeave: this.handleMouseOut, onMouseMove: this.handleMouseMove, onDoubleClick: function (e) {\n                if (_this.props.onDoubleClick) {\n                    _this.props.onDoubleClick(e);\n                }\n            }, style: { position: 'relative', width: width, height: height } },\n            React.createElement(\"div\", { ref: this.applyRef })));\n    };\n    return WebGLSurface;\n}(React.Component));\nexports.WebGLSurface = WebGLSurface;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/webgl-surface.tsx\n// module id = 27\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_28__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = 28\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_29__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"d3-color\"\n// module id = 29\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process/browser.js\n// module id = 30\n// module chunks = 0","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/debug/src/debug.js\n// module id = 31\n// module chunks = 0","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ms/index.js\n// module id = 32\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_33__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bowser\"\n// module id = 33\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./animated/shared-control-curved-line-buffer-ants\"));\n__export(require(\"./animated/shared-control-curved-line-colors-buffer\"));\n__export(require(\"./base-buffer\"));\n__export(require(\"./static/shared-control-curved-line-buffer\"));\n__export(require(\"./static/simple-bezier-line-buffer\"));\n__export(require(\"./static/simple-circle-buffer\"));\n__export(require(\"./static/simple-label-buffer\"));\n__export(require(\"./static/simple-line-buffer\"));\n__export(require(\"./static/simple-straight-line-buffer\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/index.ts\n// module id = 34\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBufferAnts = (function (_super) {\n    __extends(SharedControlCurvedLineBufferAnts, _super);\n    function SharedControlCurvedLineBufferAnts() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBufferAnts.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'marching',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBufferAnts.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var marchingAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        var antLength;\n        var antGap;\n        var antSpeed;\n        var controlPoint;\n        var controlRef;\n        // We can not accurately send very large numbers via float point into the attributes\n        // So we trim down our time sent to the attribute down to a number that is less than\n        // 16,777,217 which means we can only reliably grab the last 7 digits of the date's time\n        var antStartTime = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            // We will not render the curved line with this buffer if the marching ants are not provided\n            if (!curvedLine.marchingAnts) {\n                console.error('Attempted to render a curved line shape with a marching ant buffer but provided no marching ant metrics. This curved line shape will be skipped', curvedLine);\n                return \"continue\";\n            }\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            antGap = curvedLine.marchingAnts.gapLength;\n            antSpeed = curvedLine.marchingAnts.speed;\n            antLength = curvedLine.marchingAnts.strokeLength + curvedLine.marchingAnts.gapLength;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos, marching, mpos, controlPick, cpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[cpos] = controlRef;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                marching[mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                marching[++mpos] = antStartTime;\n                marching[++mpos] = antSpeed;\n                marching[++mpos] = antGap;\n                marching[++mpos] = antLength;\n                controlPick[++cpos] = controlRef;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                mpos += marchingAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++cpos] = controlRef;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBufferAnts;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBufferAnts = SharedControlCurvedLineBufferAnts;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/animated/shared-control-curved-line-buffer-ants.ts\n// module id = 35\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineColorsBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineColorsBuffer, _super);\n    function SharedControlCurvedLineColorsBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'colorPicks',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'timing',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineColorsBuffer.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var uniforms;\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var timingAttributeSize = 2;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorStartStop;\n        var colorEnd;\n        var colorEndStop;\n        var alpha;\n        var startTime;\n        var duration;\n        var controlRef;\n        var controlPoint;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorEnd = curvedLine.endColor.base.colorIndex;\n            colorEndStop = curvedLine.endColorStop.base.colorIndex;\n            colorStart = curvedLine.startColor.base.colorIndex;\n            colorStartStop = curvedLine.startColorStop.base.colorIndex;\n            duration = curvedLine.duration;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.currentStart;\n            p2 = curvedLine.currentEnd;\n            startTime = curvedLine.startTime;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colorPicks, cpos, controlPick, ctpos, timing, tpos, normals, npos, endPoints, epos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                controlPick[ctpos] = controlRef;\n                cpos += colorAttributeSize;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[wpos] = halfWidthSize;\n                normals[npos] = 1;\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                tpos += timingAttributeSize;\n                // TR\n                colorPicks[cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[tpos] = startTime;\n                timing[++tpos] = duration;\n                // BR\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // TL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // BL\n                colorPicks[++cpos] = colorStart;\n                colorPicks[++cpos] = colorStartStop;\n                colorPicks[++cpos] = colorEnd;\n                colorPicks[++cpos] = colorEndStop;\n                controlPick[++ctpos] = controlRef;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                timing[++tpos] = startTime;\n                timing[++tpos] = duration;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++ctpos] = controlRef;\n            }, \n            // We force updates for this buffer since it has animated properties\n            // Such as currentStartStop and currentEndStop which calculates\n            // Animations on the CPU side.\n            true);\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineColorsBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineColorsBuffer = SharedControlCurvedLineColorsBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/animated/shared-control-curved-line-colors-buffer.ts\n// module id = 36\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This only supports atlas colors.\n */\nvar SharedControlCurvedLineBuffer = (function (_super) {\n    __extends(SharedControlCurvedLineBuffer, _super);\n    function SharedControlCurvedLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SharedControlCurvedLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'startColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'endColorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'controlPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param {CurvedLineShape<any>[]} shapeBuffer A buffer of curved line shapes\n     * @param {AtlasManager} atlasManager The Atlas Manager that contains the color atlas\n     *                                    needed for rendering with color picks.\n     */\n    SharedControlCurvedLineBuffer.prototype.update = function (shapeBuffer, atlasManager, controlPointSource) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // This is a special case where we need to update our current item dataset to prevent\n        // Re-updates for the same empty shape buffer\n        if (shapeBuffer.length === 0) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        var controlPoints = [];\n        var controlReference = new Map();\n        var controlUniform;\n        // As this is a single material, we have to assume that the color atlas\n        // For our shapes will be the same atlas for all colors. Thus, the atlas\n        // Information for one color will be valid for all colors\n        if (shapeBuffer && shapeBuffer.length > 0 && atlasManager) {\n            var colorRef = shapeBuffer[0].startColor;\n            var colorBase = colorRef.base;\n            // Update all uniforms for this material to utilize the atlas metrics for\n            // Picking colors\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            // This is the shared control points for all of the vertices\n            controlUniform = uniforms.controlPoints;\n            atlas.needsUpdate = true;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 1;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var colorStart;\n        var colorEnd;\n        var alpha;\n        var controlPoint;\n        var controlRef;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            colorStart = curvedLine.startColor.base;\n            colorEnd = curvedLine.endColor.base;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            controlPoint = curvedLine.controlPoints[controlPointSource];\n            controlRef = controlReference.get(controlPoint);\n            if (controlRef === undefined) {\n                var controlLength = controlPoints.push(controlPoint.x, controlPoint.y);\n                controlRef = controlLength - 2;\n                controlReference.set(controlPoint, controlRef);\n            }\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, startColor, scpos, endColor, ecpos, normals, npos, endPoints, epos, halfWidth, wpos, controlPick, cpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[cpos] = controlRef;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[scpos] = colorStart.colorIndex;\n                endColor[ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                startColor[++scpos] = colorStart.colorIndex;\n                endColor[++ecpos] = colorEnd.colorIndex;\n                controlPick[++cpos] = controlRef;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                scpos += colorAttributeSize;\n                ecpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPick[++cpos] = controlRef;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (controlUniform) {\n            controlUniform.value = controlPoints;\n        }\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SharedControlCurvedLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SharedControlCurvedLineBuffer = SharedControlCurvedLineBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/shared-control-curved-line-buffer.ts\n// module id = 37\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\n/**\n * This renders a curved line by injecting all attributes needed to render it.\n * This naively includes all possible data in the vertex.\n *\n * This ONLY supports a single color\n */\nvar SimpleStaticBezierLineBuffer = (function (_super) {\n    __extends(SimpleStaticBezierLineBuffer, _super);\n    function SimpleStaticBezierLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticBezierLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [1],\n                name: 'normalDirection',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 0, 0],\n                name: 'endPoints',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n            {\n                defaults: [0, 0],\n                name: 'controlPoint',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0],\n                name: 'halfLinewidth',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticBezierLineBuffer.prototype.update = function (shapeBuffer) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        // Commit static curved lines\n        var colorAttributeSize = 4;\n        var numVerticesPerSegment = 6;\n        var halfWidthSize = 1;\n        var length = 15;\n        var needsUpdate = false;\n        var p1;\n        var p2;\n        var color;\n        var alpha;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var _loop_1 = function (curvedLine) {\n            alpha = curvedLine.startColor.base.opacity;\n            color = curvedLine.startColor.base.color;\n            halfWidthSize = curvedLine.lineWidth / 2.0;\n            length = curvedLine.resolution;\n            p1 = curvedLine.start;\n            p2 = curvedLine.end;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, length, function (i, positions, ppos, colors, cpos, normals, npos, endPoints, epos, controlPoints, copos, halfWidth, wpos) {\n                // Copy first vertex twice for intro degenerate tri\n                positions[ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[wpos] = halfWidthSize;\n                // Skip over degenerate tris color\n                cpos += colorAttributeSize;\n                normals[npos] = 1;\n                endPoints[epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                // TR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BR\n                positions[++ppos] = (i + 1) / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // TL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = 1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // BL\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // Copy last vertex again for degenerate tri\n                positions[++ppos] = i / length;\n                positions[++ppos] = length;\n                positions[++ppos] = curvedLine.depth;\n                halfWidth[++wpos] = halfWidthSize;\n                // Skip over degenerate tris for color\n                cpos += colorAttributeSize;\n                normals[++npos] = -1;\n                endPoints[++epos] = p1.x;\n                endPoints[++epos] = p1.y;\n                endPoints[++epos] = p2.x;\n                endPoints[++epos] = p2.y;\n                controlPoints[++copos] = curvedLine.controlPoints[0].x;\n                controlPoints[++copos] = curvedLine.controlPoints[0].y;\n            });\n            // If no updating is happening, just quit the loop\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        // Only if updates happened, should this change\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticBezierLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticBezierLineBuffer = SimpleStaticBezierLineBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-bezier-line-buffer.ts\n// module id = 38\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\nvar SimpleStaticCircleBuffer = (function (_super) {\n    __extends(SimpleStaticCircleBuffer, _super);\n    function SimpleStaticCircleBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticCircleBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'radius',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0],\n                name: 'colorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 1;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Points(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticCircleBuffer.prototype.update = function (shapeBuffer, atlasManager, camera) {\n        if (!shapeBuffer || shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        if (atlasManager) {\n            var colorRef = shapeBuffer[0].outerColor;\n            var colorBase = colorRef.base;\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            atlas.needsUpdate = true;\n            if (camera) {\n                uniforms.zoom.value = camera.zoom;\n            }\n        }\n        var needsUpdate = false;\n        var circle;\n        needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this.bufferItems, 1, shapeBuffer.length, function (i, positions, ppos, radius, rpos, color, cpos) {\n            circle = shapeBuffer[i];\n            // These are point sprites, so just update a single vertex\n            positions[ppos] = circle._centerX;\n            positions[++ppos] = circle._centerY;\n            positions[++ppos] = circle.depth;\n            radius[rpos] = circle._radius;\n            color[cpos] = circle.outerColor.base.colorIndex;\n        });\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, shapeBuffer.length);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticCircleBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticCircleBuffer = SimpleStaticCircleBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-circle-buffer.ts\n// module id = 39\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = require(\"ramda\");\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\nfunction isCluster(value) {\n    if (Array.isArray(value[0]))\n        return true;\n    return false;\n}\nvar SimpleStaticLabelBuffer = (function (_super) {\n    __extends(SimpleStaticLabelBuffer, _super);\n    function SimpleStaticLabelBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLabelBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n            {\n                defaults: [0, 0, 1],\n                name: 'texCoord',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0],\n                name: 'size',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n            {\n                defaults: [0, 0],\n                name: 'anchor',\n                size: buffer_util_1.AttributeSize.TWO,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLabelBuffer.prototype.update = function (shapeBuffer, atlasManager, startFade, endFade, labelMaxSize) {\n        if (!shapeBuffer || shapeBuffer.length <= 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        var buffer;\n        if (isCluster(shapeBuffer)) {\n            buffer = ramda_1.flatten(shapeBuffer);\n        }\n        else {\n            buffer = shapeBuffer;\n        }\n        // Make some constants and props for our buffer update loop\n        var numVerticesPerQuad = 6;\n        var label;\n        var texture;\n        var color;\n        var alpha;\n        var anchor;\n        var labelSize;\n        if (atlasManager) {\n            var colorRef = buffer[0].color;\n            var colorBase = colorRef.base;\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            if (uniforms.colorAtlas.value !== atlas) {\n                uniforms.colorAtlas.value = atlas;\n                uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n                uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n                uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n                atlas.needsUpdate = true;\n            }\n            if (startFade || endFade || labelMaxSize) {\n                material = this.bufferItems.system.material;\n                uniforms = material.uniforms;\n                uniforms.startFade.value = startFade || 0;\n                uniforms.endFade.value = endFade || 0;\n                uniforms.maxLabelSize.value = labelMaxSize || 0;\n            }\n        }\n        var updated = buffer_util_1.BufferUtil.updateBuffer(buffer, this.bufferItems, numVerticesPerQuad, buffer.length, function (i, positions, ppos, colors, cpos, texCoords, tpos, sizes, spos, anchors, apos) {\n            label = buffer[i];\n            texture = label.rasterizedLabel;\n            color = label.color.base;\n            alpha = label.color.base.opacity;\n            anchor = {\n                x: label.getLocation().x + label.getSize().width * Math.cos(label.getRotation()),\n                y: label.getLocation().y + label.getSize().width * Math.sin(label.getRotation()),\n            };\n            labelSize = label.getSize();\n            // Make sure the label is updated with it's latest metrics\n            label.update();\n            // Copy first vertex twice for intro degenerate tri\n            positions[ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            texCoords[tpos] = texture.atlasTR.x;\n            texCoords[++tpos] = texture.atlasTR.y;\n            texCoords[++tpos] = alpha;\n            colors[cpos] = color.colorIndex;\n            sizes[spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // TR\n            positions[++ppos] = label.TR.x;\n            positions[++ppos] = label.TR.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasTR.x;\n            texCoords[++tpos] = texture.atlasTR.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BR\n            positions[++ppos] = label.BR.x;\n            positions[++ppos] = label.BR.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBR.x;\n            texCoords[++tpos] = texture.atlasBR.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // TL\n            positions[++ppos] = label.TL.x;\n            positions[++ppos] = label.TL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasTL.x;\n            texCoords[++tpos] = texture.atlasTL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // BL\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBL.x;\n            texCoords[++tpos] = texture.atlasBL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n            // Copy last vertex again for degenerate tri\n            positions[++ppos] = label.BL.x;\n            positions[++ppos] = label.BL.y;\n            positions[++ppos] = label.depth;\n            texCoords[++tpos] = texture.atlasBL.x;\n            texCoords[++tpos] = texture.atlasBL.y;\n            texCoords[++tpos] = alpha;\n            colors[++cpos] = color.colorIndex;\n            sizes[++spos] = labelSize.width;\n            sizes[++spos] = labelSize.height;\n            anchors[++apos] = anchor.x;\n            anchors[++apos] = anchor.y;\n        });\n        this.bufferItems.geometry.setDrawRange(0, numVerticesPerQuad * buffer.length);\n        // Since we have the ability to flatten the shape buffer (thus causing a new array point to\n        // Come into existance) we must explicitly ensure the current data is set to the actual\n        // Shape buffer that came in. This makes clusters only efficient if using a multibuffer cache\n        if (isCluster(shapeBuffer)) {\n            this.bufferItems.currentData = shapeBuffer;\n        }\n        return updated;\n    };\n    return SimpleStaticLabelBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLabelBuffer = SimpleStaticLabelBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-label-buffer.ts\n// module id = 40\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\nvar SimpleStaticLineBuffer = (function (_super) {\n    __extends(SimpleStaticLineBuffer, _super);\n    function SimpleStaticLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0, 0, 0, 1],\n                name: 'customColor',\n                size: buffer_util_1.AttributeSize.FOUR,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticLineBuffer.prototype.update = function (shapeBuffer) {\n        if (!shapeBuffer) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        var needsUpdate = false;\n        var numVerticesPerSegment = 6;\n        var colorAttributeSize = 4;\n        var stripPos = 0;\n        buffer_util_1.BufferUtil.beginUpdates();\n        var TR;\n        var BR;\n        var TL;\n        var BL;\n        var color;\n        var alpha;\n        var _loop_1 = function (curvedLine) {\n            var strip = curvedLine.getTriangleStrip();\n            color = curvedLine.startColor.base.color;\n            alpha = curvedLine.startColor.base.opacity;\n            needsUpdate = buffer_util_1.BufferUtil.updateBuffer(shapeBuffer, this_1.bufferItems, numVerticesPerSegment, strip.length / 4, function (i, positions, ppos, colors, cpos) {\n                stripPos = i * 4;\n                TR = strip[stripPos];\n                BR = strip[stripPos + 1];\n                TL = strip[stripPos + 2];\n                BL = strip[stripPos + 3];\n                // 1\n                positions[ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n                // 2\n                positions[++ppos] = TR.x;\n                positions[++ppos] = TR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 3\n                positions[++ppos] = BR.x;\n                positions[++ppos] = BR.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 4\n                positions[++ppos] = TL.x;\n                positions[++ppos] = TL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 5\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                colors[++cpos] = color.r;\n                colors[++cpos] = color.g;\n                colors[++cpos] = color.b;\n                colors[++cpos] = alpha;\n                // 6\n                positions[++ppos] = BL.x;\n                positions[++ppos] = BL.y;\n                positions[++ppos] = curvedLine.depth;\n                cpos += colorAttributeSize;\n            });\n            if (!needsUpdate) {\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, shapeBuffer_1 = shapeBuffer; _i < shapeBuffer_1.length; _i++) {\n            var curvedLine = shapeBuffer_1[_i];\n            var state_1 = _loop_1(curvedLine);\n            if (state_1 === \"break\")\n                break;\n        }\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        else if (shapeBuffer.length === 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticLineBuffer = SimpleStaticLineBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-line-buffer.ts\n// module id = 41\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ramda_1 = require(\"ramda\");\nvar three_1 = require(\"three\");\nvar point_1 = require(\"../../primitives/point\");\nvar buffer_util_1 = require(\"../../util/buffer-util\");\nvar base_buffer_1 = require(\"../base-buffer\");\nfunction isCluster(value) {\n    if (Array.isArray(value[0]))\n        return true;\n    return false;\n}\nvar SimpleStaticStraightLineBuffer = (function (_super) {\n    __extends(SimpleStaticStraightLineBuffer, _super);\n    function SimpleStaticStraightLineBuffer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @override\n     * See interface definition\n     */\n    SimpleStaticStraightLineBuffer.prototype.init = function (material, unitCount) {\n        this.bufferItems = buffer_util_1.BufferUtil.makeBufferItems();\n        this.bufferItems.attributes = [\n            {\n                defaults: [0, 0, 0],\n                name: 'position',\n                size: buffer_util_1.AttributeSize.THREE,\n            },\n            {\n                defaults: [0],\n                name: 'colorPick',\n                size: buffer_util_1.AttributeSize.ONE,\n            },\n        ];\n        var verticesPerQuad = 6;\n        var numQuads = unitCount;\n        this.bufferItems.geometry = buffer_util_1.BufferUtil.makeBuffer(numQuads * verticesPerQuad, this.bufferItems.attributes);\n        this.bufferItems.system = new three_1.Mesh(this.bufferItems.geometry, material);\n        this.bufferItems.system.frustumCulled = false;\n        this.bufferItems.system.drawMode = three_1.TriangleStripDrawMode;\n    };\n    /**\n     * @override\n     * See interface definition\n     *\n     * @param shapeBuffer\n     */\n    SimpleStaticStraightLineBuffer.prototype.update = function (shapeBuffer, atlasManager) {\n        if (!shapeBuffer || shapeBuffer.length <= 0) {\n            this.bufferItems.geometry.setDrawRange(0, 0);\n            return false;\n        }\n        var buffer;\n        if (isCluster(shapeBuffer)) {\n            buffer = ramda_1.flatten(shapeBuffer);\n        }\n        else {\n            buffer = shapeBuffer;\n        }\n        if (atlasManager) {\n            var colorRef = buffer[0].startColor;\n            var colorBase = colorRef.base;\n            var material = this.bufferItems.system.material;\n            var uniforms = material.uniforms;\n            var atlas = atlasManager.getAtlasTexture(colorBase.atlasReferenceID);\n            uniforms.colorAtlas.value = atlas;\n            uniforms.colorsPerRow.value = colorBase.colorsPerRow;\n            uniforms.firstColor.value = [colorBase.firstColor.x, colorBase.firstColor.y];\n            uniforms.nextColor.value = [colorBase.nextColor.x, colorBase.nextColor.y];\n            atlas.needsUpdate = true;\n        }\n        var needsUpdate = false;\n        var numVerticesPerSegment = 6;\n        var TR = point_1.Point.zero();\n        var BR = point_1.Point.zero();\n        var TL = point_1.Point.zero();\n        var BL = point_1.Point.zero();\n        var startColor = 0;\n        var endColor = 0;\n        var line;\n        needsUpdate = buffer_util_1.BufferUtil.updateBuffer(buffer, this.bufferItems, numVerticesPerSegment, buffer.length, function (i, positions, ppos, color, cpos) {\n            line = buffer[i];\n            startColor = line.startColor.base.colorIndex;\n            endColor = line.endColor.base.colorIndex;\n            point_1.Point.add(line.p2, point_1.Point.scale(line.perpendicular, -line.thickness / 2.0), TR);\n            point_1.Point.add(line.p2, point_1.Point.scale(line.perpendicular, line.thickness / 2.0), BR);\n            point_1.Point.add(line.p1, point_1.Point.scale(line.perpendicular, -line.thickness / 2.0), TL);\n            point_1.Point.add(line.p1, point_1.Point.scale(line.perpendicular, line.thickness / 2.0), BL);\n            // 1\n            positions[ppos] = TR.x;\n            positions[++ppos] = TR.y;\n            positions[++ppos] = line.depth;\n            cpos += 1.0;\n            // 2\n            positions[++ppos] = TR.x;\n            positions[++ppos] = TR.y;\n            positions[++ppos] = line.depth;\n            color[cpos] = endColor;\n            // 3\n            positions[++ppos] = BR.x;\n            positions[++ppos] = BR.y;\n            positions[++ppos] = line.depth;\n            color[++cpos] = endColor;\n            // 4\n            positions[++ppos] = TL.x;\n            positions[++ppos] = TL.y;\n            positions[++ppos] = line.depth;\n            color[++cpos] = startColor;\n            // 5\n            positions[++ppos] = BL.x;\n            positions[++ppos] = BL.y;\n            positions[++ppos] = line.depth;\n            color[++cpos] = startColor;\n            // 6\n            positions[++ppos] = BL.x;\n            positions[++ppos] = BL.y;\n            positions[++ppos] = line.depth;\n        });\n        var numBatches = buffer_util_1.BufferUtil.endUpdates();\n        if (needsUpdate) {\n            this.bufferItems.geometry.setDrawRange(0, numVerticesPerSegment * numBatches);\n            // Since we have the ability to flatten the shape buffer (thus causing a new array point to\n            // Come into existance) we must explicitly ensure the current data is set to the actual\n            // Shape buffer that came in. This makes clusters only efficient if using a multibuffer cache\n            if (isCluster(shapeBuffer)) {\n                this.bufferItems.currentData = shapeBuffer;\n            }\n        }\n        return needsUpdate;\n    };\n    return SimpleStaticStraightLineBuffer;\n}(base_buffer_1.BaseBuffer));\nexports.SimpleStaticStraightLineBuffer = SimpleStaticStraightLineBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/buffers/static/simple-straight-line-buffer.ts\n// module id = 42\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./reference/reference-color\"));\n__export(require(\"./animation/animated-curved-line-shape\"));\n__export(require(\"./shape/circle-shape\"));\n__export(require(\"./shape/curved-line-shape\"));\n__export(require(\"./shape/edge-shape\"));\n__export(require(\"./shape/image-shape\"));\n__export(require(\"./shape/label\"));\n__export(require(\"./shape/line-shape\"));\n__export(require(\"./shape/quad-shape\"));\n__export(require(\"./texture/atlas-color\"));\n__export(require(\"./texture/atlas-manager\"));\n__export(require(\"./texture/atlas-texture\"));\n__export(require(\"./texture/sprite\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/index.ts\n// module id = 43\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This defines a reference to a color that has been rendered to a texture\n * (See AtlasColor). This exposes the only properties that MAY be utilized\n * in a shader to modify the existing values without altering what is rendered\n * on the texture.\n */\nvar ReferenceColor = (function () {\n    /**\n     * Creates an instance of ReferenceColor.\n     *\n     * @param {AtlasColor} base The color to be based off of\n     */\n    function ReferenceColor(base) {\n        this.base = base;\n    }\n    return ReferenceColor;\n}());\nexports.ReferenceColor = ReferenceColor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/reference/reference-color.ts\n// module id = 44\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\nvar easing_1 = require(\"../../util/easing\");\nvar frame_info_1 = require(\"../../util/frame-info\");\nvar interpolation_1 = require(\"../../util/interpolation\");\nvar curved_line_shape_1 = require(\"../shape/curved-line-shape\");\n/**\n * This represents curved lines and what it would take to animate various properties.\n * While this provides helpers to aid in animating the properties, it is up to\n * buffers, shaders and materials to render those changes appropriately.\n */\nvar AnimatedCurvedLineShape = (function (_super) {\n    __extends(AnimatedCurvedLineShape, _super);\n    function AnimatedCurvedLineShape(options) {\n        var _this = _super.call(this, options) || this;\n        /**\n         * This defines the suggested easing for the animation for any of\n         * the values.\n         */\n        _this.easing = easing_1.linear;\n        _this._startColorChange = new three_1.Color(0, 0, 0);\n        _this._endColorChange = new three_1.Color(0, 0, 0);\n        /** The starting end point's destination */\n        _this.startStop = { x: 0, y: 0 };\n        _this.endStop = { x: 0, y: 0 };\n        /**\n         * This calculates the current start color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentStartColor = new three_1.Color(0, 0, 0);\n        /**\n         * This calculates the current end color with the given easing function\n         * based on how much time has lapsed since startTime\n         */\n        _this._currentEndColor = new three_1.Color(0, 0, 0);\n        if (options) {\n            _this.startStop = options.startStop || { x: 0, y: 0 };\n            _this.endStop = options.endStop || { x: 0, y: 0 };\n            if (options.startColorStop) {\n                _this.startColorStop = options.startColorStop;\n            }\n            if (options.endColorStop) {\n                _this.endColorStop = options.endColorStop;\n            }\n        }\n        return _this;\n    }\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"startColorStop\", {\n        get: function () {\n            return this._startColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._startColorStop = value;\n            this._startColorChange.r = newBase.r - startBase.r;\n            this._startColorChange.g = newBase.g - startBase.g;\n            this._startColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"endColorStop\", {\n        get: function () {\n            return this._endColorStop;\n        },\n        set: function (value) {\n            var startBase = this.startColor.base.color;\n            var newBase = value.base.color;\n            this._endColorStop = value;\n            this._endColorChange.r = newBase.r - startBase.r;\n            this._endColorChange.g = newBase.g - startBase.g;\n            this._endColorChange.b = newBase.b - startBase.b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStartColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var startBase = this.startColor.base.color;\n            this._currentStartColor.r = this.easing(time, startBase.r, this._startColorChange.r, this.duration);\n            this._currentStartColor.g = this.easing(time, startBase.g, this._startColorChange.g, this.duration);\n            this._currentStartColor.b = this.easing(time, startBase.b, this._startColorChange.b, this.duration);\n            return this._currentStartColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEndColor\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            var endBase = this.endColor.base.color;\n            this._currentEndColor.r = this.easing(time, endBase.r, this._endColorChange.r, this.duration);\n            this._currentEndColor.g = this.easing(time, endBase.g, this._endColorChange.g, this.duration);\n            this._currentEndColor.b = this.easing(time, endBase.b, this._endColorChange.b, this.duration);\n            return this._currentEndColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentStart\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            var newStart = interpolation_1.circular(easedTime, this.start, this.startStop, this.controlPoints[1]);\n            return newStart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatedCurvedLineShape.prototype, \"currentEnd\", {\n        get: function () {\n            var time = Math.min(frame_info_1.FrameInfo.lastFrameTime - this.startTime, this.duration);\n            // Since we must use a circular interpolation to calculate the animated position\n            // Of the end point, we must apply the easing to the path the point will take\n            // Which gets applied to the interpolations t value of 0 - 1\n            var easedTime = this.easing(time, 0, 1, this.duration);\n            // Apply the circular interpolation to the points\n            return interpolation_1.circular(easedTime, this.end, this.endStop, this.controlPoints[1]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimatedCurvedLineShape;\n}(curved_line_shape_1.CurvedLineShape));\nexports.AnimatedCurvedLineShape = AnimatedCurvedLineShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/animation/animated-curved-line-shape.ts\n// module id = 45\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar circle_1 = require(\"../../primitives/circle\");\n/**\n * Defines a circular shape that can be drawn\n */\nvar CircleShape = (function (_super) {\n    __extends(CircleShape, _super);\n    /**\n     * Sets the properties of the shape to be drawn\n     *\n     * @param {ICircleShapeOptions} options The options for the shape\n     */\n    function CircleShape(options) {\n        var _this = _super.call(this, options) || this;\n        _this.depth = options.depth || 0;\n        _this.innerColor = options.innerColor;\n        _this.innerRadius = options.innerRadius;\n        _this.outerColor = options.outerColor;\n        return _this;\n    }\n    /**\n     * Clones this instance of the circle shape and creates a new instance of a circle shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {CircleShape} A newly cloned instance of this circleshape\n     */\n    CircleShape.prototype.clone = function (newProperties) {\n        var instance = new CircleShape(this);\n        instance.d = this.d;\n        return instance;\n    };\n    return CircleShape;\n}(circle_1.Circle));\nexports.CircleShape = CircleShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/circle-shape.ts\n// module id = 46\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar line_1 = require(\"../../primitives/line\");\nvar line_shape_1 = require(\"./line-shape\");\n/**\n * This defines an edge that can be drawn.\n * This type of edge is a quad with distorted ends. The quad will represent a\n * line with each end having potentially different sizes thus giving a four sided\n * polygon rather than a parallelogram.\n *\n * The edge shape also doubles up as a simple line shape should it be desired to\n * render differently.\n */\nvar EdgeShape = (function (_super) {\n    __extends(EdgeShape, _super);\n    /**\n     * Constructor with basic parameters to declare an edge\n     *\n     * @param p1 The point the edge begins at\n     * @param p2 The point the edge terminates at\n     * @param d The data associated with the edge\n     * @param p1Col The color at the start point\n     * @param p2Col The color at the end point\n     * @param p1Width The width at the start point. Example: if you specify 4, then\n     *                the start part of the edge will fan out 2 on either side of the\n     *                start point\n     * @param p2Width The width at the end point. Example: if you specify 4, then\n     *                the end part of the edge will fan out 2 on either side of the\n     *                end point\n     */\n    function EdgeShape(options) {\n        var _this = \n        // Set up all of our line shape based metrics\n        _super.call(this, Object.assign(options, {\n            thickness: options.startWidth,\n        })) || this;\n        /** Top left of the quad to generate this edge */\n        _this.tl = { x: 0, y: 0 };\n        /** Bottom left of the quad to generate this edge */\n        _this.bl = { x: 0, y: 0 };\n        /** Top right of the quad to generate this edge */\n        _this.tr = { x: 0, y: 0 };\n        /** Bottom Right of the quad to generate this edge */\n        _this.br = { x: 0, y: 0 };\n        /** The width of the edge at the termination point */\n        _this.endWidth = 1;\n        _this.endWidth = options.endWidth || 1.0;\n        _this.setPoints(options.p1, options.p2);\n        return _this;\n    }\n    /**\n     * Clones this instance of the edge shape and creates a new instance of an edge shape that\n     * is identical to this one. The properties injected can be modifiers after the clone happens\n     *\n     * @param newProperties New properties to override the properties on the new instance\n     *\n     * @return {EdgeShape} A newly cloned instance of this edgeshape\n     */\n    EdgeShape.prototype.clone = function (newProperties) {\n        return Object.assign(new EdgeShape(Object.assign(this, {\n            startWidth: this.thickness,\n        })), newProperties);\n    };\n    /**\n     * Algorithm provided by\n     * https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n     * Adapted to Javascript by Chris @ VoidRay co\n     *\n     * Remember the point must be in the same\n     * coordinate system that the edge is using\n     *\n     * @param {number} point The point to test\n     *\n     * @return {boolean} True if the point is inside the edge\n     */\n    EdgeShape.prototype.pointInside = function (point) {\n        var testx = point.x;\n        var testy = point.y;\n        // This is an algortihm to handle any number of points for a polygon. In this\n        // Case our polygon is simply the points that make this fat edge. Note:\n        // The points MUST be in CW order\n        var points = [this.tl, this.tr, this.br, this.bl];\n        var numberVertices = points.length;\n        var isClockwise = false;\n        for (var i = 0, j = numberVertices - 1; i < numberVertices; j = i++) {\n            if (((points[i].y > testy) !== (points[j].y > testy)) &&\n                (testx < (points[j].x - points[i].x) * (testy - points[i].y) /\n                    (points[j].y - points[i].y) + points[i].x)) {\n                isClockwise = !isClockwise;\n            }\n        }\n        return isClockwise;\n    };\n    /**\n     * @override\n     * This sets the two endpoints for this edge and recalculates the bounds\n     * of the edge accordingly.\n     *\n     * @param {IPoint} p1 The start point\n     * @param {IPoint} p2 The end point\n     */\n    EdgeShape.prototype.setPoints = function (p1, p2) {\n        _super.prototype.setPoints.call(this, p1, p2);\n        if (this.tl) {\n            // Get the distance from the points we will go based on specified widths\n            var p1Dx = this.thickness / 2;\n            var p2Dx = this.endWidth / 2;\n            // Calculate the deltas to get from point to quad edge\n            var p1DeltaX = this.perpendicular.x * p1Dx;\n            var p1DeltaY = this.perpendicular.y * p1Dx;\n            var p2DeltaX = this.perpendicular.x * p2Dx;\n            var p2DeltaY = this.perpendicular.y * p2Dx;\n            // Apply the metrics to our quad points\n            // Start side of the edge\n            this.tl.x = this.p1.x + p1DeltaX;\n            this.tl.y = this.p1.y + p1DeltaY;\n            this.bl.x = this.p1.x - p1DeltaX;\n            this.bl.y = this.p1.y - p1DeltaY;\n            // End side of the edge\n            this.tr.x = this.p2.x + p2DeltaX;\n            this.tr.y = this.p2.y + p2DeltaY;\n            this.br.x = this.p2.x - p2DeltaX;\n            this.br.y = this.p2.y - p2DeltaY;\n            // Create lines for the edges for computations and faster hit detections\n            this.topEdge = new line_1.Line(this.tl, this.tr);\n            this.bottomEdge = new line_1.Line(this.bl, this.br);\n            // Make sure our bounds reflects the entirety of the fat edge\n            this.encapsulatePoints([this.tl, this.tr, this.bl, this.br]);\n        }\n    };\n    return EdgeShape;\n}(line_shape_1.LineShape));\nexports.EdgeShape = EdgeShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/edge-shape.ts\n// module id = 47\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\n/**\n * Defines an image that can be rendered by the gpu. This is an axis oriented\n * image only (no rotations)\n */\nvar ImageShape = (function (_super) {\n    __extends(ImageShape, _super);\n    /**\n     * Generates a new ImageShape that can be rendered\n     *\n     * @param {AtlasTexture} image The AtlasTexture to use when rendering this image\n     * @param {number} size This is the size of the longest edge of the image while\n     *                      retaining aspect ratio.\n     */\n    function ImageShape(image, size) {\n        var _this = _super.call(this, 0, 0, size, size) || this;\n        /** This is the level of opacity the image will be rendered with */\n        _this.opacity = 1.0;\n        _this.texture = image;\n        _this.size = size;\n        return _this;\n    }\n    Object.defineProperty(ImageShape.prototype, \"size\", {\n        /**\n         * Returns the largest edge of the image\n         */\n        get: function () {\n            return Math.max(this.width, this.height);\n        },\n        /**\n         * This is the size the image will be rendered within World Space. The size\n         * correlates to the largest edge of the image\n         */\n        set: function (val) {\n            if (this.texture.aspectRatio > 1) {\n                this.width = val;\n                this.height = val / this.texture.aspectRatio;\n            }\n            else {\n                this.width = val * this.texture.aspectRatio;\n                this.height = val;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Centers this image on a provided location\n     *\n     * @param {number} x The x coordinate in world space\n     * @param {number} y The y coordinate in world space\n     */\n    ImageShape.prototype.centerOn = function (x, y) {\n        this.x = x - (this.width / 2.0);\n        this.y = y - (this.height / 2.0);\n    };\n    return ImageShape;\n}(bounds_1.Bounds));\nexports.ImageShape = ImageShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/image-shape.ts\n// module id = 48\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bounds_1 = require(\"../../primitives/bounds\");\nvar QuadShape = (function (_super) {\n    __extends(QuadShape, _super);\n    function QuadShape(bounds, color) {\n        var _this = _super.call(this, bounds.x, bounds.right, bounds.y, bounds.bottom) || this;\n        _this.r = 1.0;\n        _this.g = 0.0;\n        _this.b = 0.0;\n        _this.a = 1.0;\n        return _this;\n    }\n    return QuadShape;\n}(bounds_1.Bounds));\nexports.QuadShape = QuadShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/shape/quad-shape.ts\n// module id = 49\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar three_1 = require(\"three\");\n/**\n * Defines a color that is located on an atlas\n */\nvar AtlasColor = (function () {\n    /**\n     * Constructor implementation\n     */\n    function AtlasColor(color, g, b, a) {\n        if (a === void 0) { a = 1.0; }\n        // Value between 1 - 0 for the opacity of the color\n        this.opacity = 1.0;\n        // The pixel width and height of the color rendered onto the atlas\n        // This will always be a 2x2 so the color can be sampled in the middle\n        // For a guaranteed pure color regardless of gl sampling states\n        this.pixelWidth = 2;\n        this.pixelHeight = 2;\n        if (color instanceof three_1.Color) {\n            this.color = color.clone();\n            this.opacity = g === undefined ? 1.0 : g;\n        }\n        else {\n            this.color = new three_1.Color(color, g, b);\n            this.opacity = a;\n        }\n    }\n    return AtlasColor;\n}());\nexports.AtlasColor = AtlasColor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/drawing/texture/atlas-color.ts\n// module id = 50\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bounds\"));\n__export(require(\"./circle\"));\n__export(require(\"./curved-line\"));\n__export(require(\"./line\"));\n__export(require(\"./point\"));\n__export(require(\"./rotateable-quad\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/primitives/index.ts\n// module id = 51\n// module chunks = 0","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./animate\"));\n__export(require(\"./animated-shape-buffer-cache\"));\n__export(require(\"./buffer-util\"));\n__export(require(\"./custom-selection\"));\n__export(require(\"./easing\"));\n__export(require(\"./frame-info\"));\n__export(require(\"./get-font-metrics\"));\n__export(require(\"./interpolation\"));\n__export(require(\"./mouse\"));\n__export(require(\"./multi-shape-buffer-cache\"));\n__export(require(\"./pack-node\"));\n__export(require(\"./quad-tree\"));\n__export(require(\"./shape-buffer-cache\"));\n__export(require(\"./webgl-stat\"));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/index.ts\n// module id = 52\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PlayState;\n(function (PlayState) {\n    PlayState[PlayState[\"PLAY\"] = 0] = \"PLAY\";\n    PlayState[PlayState[\"STOP\"] = 1] = \"STOP\";\n})(PlayState || (PlayState = {}));\nvar Animate = (function () {\n    function Animate() {\n    }\n    Animate.animate = function () {\n        if (Animate.playState === PlayState.PLAY) {\n            requestAnimationFrame(Animate.animate);\n        }\n        this.animating.forEach(function (propToItem) {\n            propToItem.forEach(function (animate) {\n                // TODO\n            });\n        });\n    };\n    Animate.cancel = function (container, prop) {\n        // TODO\n    };\n    Animate.value = function (container, prop, start, end, duration, ease) {\n        // TODO\n    };\n    Animate.point = function (container) {\n        // TODO\n    };\n    Animate.start = function () {\n        // TODO\n    };\n    Animate.stop = function () {\n        // TODO\n    };\n    Animate.playState = PlayState.PLAY;\n    Animate.animating = new Map();\n    return Animate;\n}());\nexports.Animate = Animate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/animate.ts\n// module id = 53\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar multi_shape_buffer_cache_1 = require(\"./multi-shape-buffer-cache\");\nvar PlayState;\n(function (PlayState) {\n    PlayState[PlayState[\"INIT\"] = 0] = \"INIT\";\n    PlayState[PlayState[\"PLAY\"] = 1] = \"PLAY\";\n    PlayState[PlayState[\"STOP\"] = 2] = \"STOP\";\n})(PlayState = exports.PlayState || (exports.PlayState = {}));\n/**\n * This defines an object that helps facilitate parts of or complete shape buffers that\n * need regenerating.\n */\nvar AnimatedShapeBufferCache = (function (_super) {\n    __extends(AnimatedShapeBufferCache, _super);\n    function AnimatedShapeBufferCache() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.playState = PlayState.INIT;\n        _this.buffer = [];\n        _this.bustCache = true;\n        /**\n         * This is the internal control for managing execution of the animate method\n         */\n        _this.doAnimate = function () {\n            if (_this.playState === PlayState.PLAY) {\n                requestAnimationFrame(_this.doAnimate);\n            }\n            _this.animate();\n        };\n        return _this;\n    }\n    /**\n     * This is the method that will execute with the frame rate. Subclasses can\n     * override this to implement animated changes\n     */\n    AnimatedShapeBufferCache.prototype.animate = function () {\n        // Implemented by subclasses\n    };\n    /**\n     * Tells this cache to generate what it needs to. If the cache isn't busted,\n     * it will not regenerate\n     */\n    AnimatedShapeBufferCache.prototype.generate = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Make sure the storage is established before trying to create modifications of any sort\n        this.getStorage(selection);\n        if (this.bustCache) {\n            this.buildCache.apply(this, arguments);\n            this.bustCache = false;\n            if (this.playState === PlayState.INIT) {\n                this.start();\n                requestAnimationFrame(this.doAnimate);\n            }\n        }\n        // We always invalidate and commit all of our buffers for animations\n        this.flagBuffersDirty();\n        // Make sure our buffers are updated so they will commit to vertex buffers\n        this.processDirtyBuffers();\n    };\n    /**\n     * Sub classes will implement this stub to perform what is necessary to produce\n     * a newly updated version of their cache.\n     */\n    AnimatedShapeBufferCache.prototype.buildCache = function (selection) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        // Implemented by sub classes\n    };\n    /**\n     * Begins executing the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.start = function () {\n        this.playState = PlayState.PLAY;\n    };\n    /**\n     * Ceases the animate method every frame\n     */\n    AnimatedShapeBufferCache.prototype.stop = function () {\n        this.playState = PlayState.STOP;\n    };\n    return AnimatedShapeBufferCache;\n}(multi_shape_buffer_cache_1.MultiShapeBufferCache));\nexports.AnimatedShapeBufferCache = AnimatedShapeBufferCache;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/animated-shape-buffer-cache.ts\n// module id = 54\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Takes a map of the form <T, boolean> and returns an array of the keys,\n * excluding entries who's mapped value is false.\n *\n * @param map The map to convert to a list\n *\n * @return T[] A list of the keys, exluding false mappings\n */\nfunction boolMapToArray(map) {\n    return Array\n        .from(map)\n        .filter(function (item) { return item[1]; })\n        .map(function (item) { return item[0]; });\n}\nexports.boolMapToArray = boolMapToArray;\n/**\n * Defines a selection control for custom types and categories\n */\nvar CustomSelection = (function () {\n    function CustomSelection() {\n        /** This caches the list generation of a selection */\n        this.cachedSelection = new Map();\n        /** Map of the custom categories to the selection state */\n        this.selections = new Map();\n        /** Keeps flags indicating if a selection for a given category has changed or not */\n        this._didSelectionChange = new Map();\n    }\n    /**\n     * Clears out all custom selections for every category\n     */\n    CustomSelection.prototype.clearAllSelections = function () {\n        for (var _i = 0, _a = Array.from(this.selections.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.clearSelection(key);\n        }\n    };\n    /**\n     * Clears the selection for the category specified\n     *\n     * @param {string} category Name of the category of selection\n     */\n    CustomSelection.prototype.clearSelection = function (category) {\n        // We must have selected items to clear the selection\n        if (this.getSelection(category).length) {\n            this.selections.set(category, null);\n            this.cachedSelection.set(category, null);\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Makes an item no longer flaged as selected within the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to remove from being selected\n     */\n    CustomSelection.prototype.deselect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        // See if the item is selected already, if it is, clear the selection and bust caches\n        if (selectionMap && selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, false);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Checks if a selection from a category has been modified\n     *\n     * @param {string} category The selection category to check\n     */\n    CustomSelection.prototype.didSelectionCategoryChange = function (category) {\n        return this._didSelectionChange.get(category);\n    };\n    /**\n     * Checks if ANY selection has changed\n     *\n     * @return {boolean} True if any selection has changed\n     */\n    CustomSelection.prototype.didSelectionChange = function () {\n        return boolMapToArray(this._didSelectionChange).length > 0;\n    };\n    /**\n     * This indicates that updates have taken place to account for selection\n     * changes.\n     */\n    CustomSelection.prototype.finalizeUpdate = function () {\n        for (var _i = 0, _a = Array.from(this._didSelectionChange.keys()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this._didSelectionChange.set(key, false);\n        }\n    };\n    /**\n     * This retrieves a list of the items that are selected\n     *\n     * @param category The selection category to check on\n     *\n     * @return {T} Returns a list of items that are currently selected\n     */\n    CustomSelection.prototype.getSelection = function (category) {\n        if (!this.cachedSelection.get(category)) {\n            var theSelection = this.selections.get(category);\n            if (theSelection) {\n                this.cachedSelection.set(category, boolMapToArray(theSelection));\n            }\n            else {\n                this.cachedSelection.set(category, []);\n            }\n        }\n        return this.cachedSelection.get(category);\n    };\n    /**\n     * Specifies an item to flag as selected for the given category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.select = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        if (!selectionMap.get(item)) {\n            // Clear the cache for the selection list\n            this.cachedSelection.set(category, null);\n            // Set the selection\n            selectionMap.set(item, true);\n            // Flag the category of selections as changed\n            this._didSelectionChange.set(category, true);\n        }\n    };\n    /**\n     * Specifies an item to toggle it's selection status for the provided category\n     *\n     * @param category The custom category of the selection\n     * @param item The item to flag as selected\n     */\n    CustomSelection.prototype.toggleSelect = function (category, item) {\n        var selectionMap = this.selections.get(category);\n        if (!selectionMap) {\n            selectionMap = new Map();\n            this.selections.set(category, selectionMap);\n        }\n        // Clear the cache for the selection list\n        this.cachedSelection.set(category, null);\n        // Toggle the selection off if already selected\n        if (selectionMap.get(item)) {\n            this.deselect(category, item);\n        }\n        else {\n            this.select(category, item);\n        }\n        // Flag the category of selections as changed\n        this._didSelectionChange.set(category, true);\n    };\n    return CustomSelection;\n}());\nexports.CustomSelection = CustomSelection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/custom-selection.ts\n// module id = 55\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getFontMetrics(props) {\n    var ctx = props.ctx;\n    var text = props.text;\n    var bboxHeight = props.bboxHeight;\n    var canvasHeight = props.ctx.canvas.height;\n    var baseline = props.baseline || 'alphabetic';\n    var flip = props.flip || false;\n    var drawBaseline = props.drawBaseline || false;\n    var fontFamily = 'Arial, san-serif';\n    var fontSize = 14;\n    if (props.fontFamily) {\n        fontFamily = props.fontFamily;\n    }\n    if (props.fontSize) {\n        fontSize = props.fontSize;\n    }\n    // Setting up the canvas\n    ctx.save(); // Create canvas to use as buffer\n    ctx.font = fontSize + \"px \" + fontFamily;\n    var textWidth = ctx.measureText(text).width;\n    // This keeps font in-screen, measureText().width doesn't\n    // Quite do it in some cases. For instance \"j\", or the letter \"f\"\n    // In the font \"Zapfino\".\n    var offsetx = fontSize * 2;\n    var offsety = fontSize * 2;\n    var cwidth = ctx.canvas.width = Math.round(textWidth + offsetx * 2);\n    var cheight = ctx.canvas.height = canvasHeight ? canvasHeight : Math.round(offsety * 2);\n    if (typeof (baseline) === 'string') {\n        offsety = 0; // Using <canvas> baseline\n        ctx.textBaseline = baseline;\n    }\n    // Ctx.font has to be called twice because resetting the size resets the state\n    if (flip) {\n        ctx.scale(1, -1);\n    }\n    ctx.font = fontSize + \"px \" + fontFamily;\n    ctx.fillText(text, offsetx, (typeof (bboxHeight) === 'number' ? bboxHeight : offsety));\n    // Drawing baseline\n    if (drawBaseline) {\n        ctx.fillRect(0, canvasHeight / 2, ctx.canvas.width, 1);\n    }\n    // Grabbing image data\n    var imageData = ctx.getImageData(0, 0, cwidth, cheight);\n    var data = imageData.data;\n    // Calculating top\n    var top = 0;\n    var pos = data.length;\n    var bottom = 0;\n    var realBottom = 0;\n    var left = 0;\n    var right = 0;\n    while (pos > 0) {\n        if (data[pos + 3]) {\n            pos -= pos % (cwidth * 4); // Back to beginning of the line top = (pos / 4) / cwidth; // calculate pixel position top -= offsety - fontSize; pos = data.length; // exit loop } pos += 4; } // calculating bottom var bottom = 0; var pos = data.length; while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                bottom = (pos / 4) / cwidth;\n                bottom -= offsety - fontSize;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Calculating left\n        left = 0;\n        var col = 0;\n        var row = 0; // Left bounds\n        while (row < cheight && col < cwidth) {\n            var px = data[(row * cwidth * 4) + (col * 4) + 3];\n            if (px) {\n                left = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col++;\n            }\n        }\n        // Calculating right\n        right = 0;\n        col = cwidth;\n        row = 0; // Right bounds\n        while (row < cheight && col > 0) {\n            if (data[(row * cwidth * 4) + (col * 4) + 3]) {\n                right = col - offsetx;\n                row = cheight;\n                col = cwidth;\n            }\n            row++;\n            if (row % cheight === 0) {\n                row = 0;\n                col--;\n            }\n        }\n        // Calculating real-bottom\n        realBottom = 0;\n        pos = data.length;\n        while (pos > 0) {\n            if (data[pos + 3]) {\n                pos -= pos % (cwidth * 4); // Back to beginning of the line\n                realBottom = (pos / 4) / cwidth;\n                pos = 0; // Exit loop\n            }\n            pos -= 4;\n        }\n        // Restoring state\n        ctx.restore();\n    }\n    // Returning raw-metrics\n    return {\n        bottom: realBottom,\n        height: (bottom - top),\n        left: (-left),\n        top: (fontSize - top),\n        width: (right - left),\n    };\n}\nexports.getFontMetrics = getFontMetrics;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webgl-surface/util/get-font-metrics.ts\n// module id = 56\n// module chunks = 0"],"sourceRoot":""}